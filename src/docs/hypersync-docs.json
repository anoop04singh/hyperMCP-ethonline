{
  "data": {
    "markdown": "[Skip to main content](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#__docusaurus_skipToContent_fallback)\n\nHyperSync API tokens required from **3 November 2025**. Ensure you are using one to keep uninterrupted HyperSync access. [Learn more →](https://docs.envio.dev/docs/HyperSync/api-tokens)\n\n[![Envio Logo](https://docs.envio.dev/img/envio-logo.png)](https://envio.dev/)[HyperIndex Docs](https://docs.envio.dev/docs/HyperIndex/overview) [HyperSync Docs](https://docs.envio.dev/docs/HyperSync/overview) [HyperRPC Docs](https://docs.envio.dev/docs/HyperRPC/overview-hyperrpc) [Showcase](https://docs.envio.dev/showcase) [Blog](https://docs.envio.dev/blog)\n\n[GitHub](https://github.com/enviodev)\n\n![Cookbook.dev](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Ask Envio AIExplain\n\n![Ask Envio AI](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Ask Envio AI\n\nLanguage**English**\n\nAsk Envio AI\n\nSearch Contracts\n\nABI\n\nBytecode\n\n1\n\nNo-Code Actions\n\nCompile\n\n![avatar](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Welcome to AI Onboard\n\nOne stop shop for all your smart contract needs. Pick a contract from our library, customize it to your needs, and deploy right away. Or export for Foundry, Remix, ChainIDE, Hardhat or Scaffold ETH and continue working there.\n\nTrending Now\n\nReady to get started? Here are some of the most popular contracts in our library.\n\nSimple ERC20 Token\n\nSOpenZeppelin\n\n14944\n\nERC20 token with the following features: - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token.\n\nOpen\n\nAudited\n\nFlash loan Attacker\n\nFAave\n\n8979\n\nThis contract is an attacker contract that utilizes flash loans to borrow assets from a lending pool, supply assets to the pool, and execute operations to mint and return tokens with a premium.\n\nOpen\n\nDividend Paying Token with Buy/Sell Fee\n\n![](https://pbs.twimg.com/profile_images/1511939100303142912/4iT-NXVI_400x400.jpg)SatoshiViral\n\n3310\n\nToken that pays dividends, and has a fee on buys and sells. Users hold the token, and they receive LP over time that they can claim from the contract. Used in the VIRAL project.\n\nOpen\n\nAudited\n\nUSDT (Tether)\n\n![](https://pbs.twimg.com/profile_images/1792114402864640002/yR72EOJ7_400x400.png)Tether\n\n2810\n\nTether tokens are the most widely adopted stablecoins, having pioneered the concept in the digital token space. A disruptor to the conventional financial system and a trailblazer in the digital use of traditional currencies, Tether Tokens support and empower growing ventures and innovation throughout the blockchain space. Tether Tokens exist as a digital token built on multiple blockchains.\n\nOpen\n\nAudited\n\nBurnable ERC20 Token\n\nBOpenZeppelin\n\n2200\n\nERC20 token with the following features: - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token. - Methods that allow users to burn their tokens. This directly decreases total supply. Used to burn tokens from the supply.\n\nOpen\n\nAudited\n\nBuyback Token with Fees\n\nBCookbook\n\n2093\n\nA premium token with most of the modern smart contract features that developers look for. With the Fully Baked token base, developers have the option of customizing to include additional tax features such as Salary Tax and Buyback Tax. Great if you plan on offering staking as a utility or you're creating a Play-to-Earn (P2E) project.\n\nThis contract is commonly found on launchpads like pinksale.finance, apesale.finance, mofoLabs etc.\n\nOpen\n\nMintable ERC20 Token\n\nMOpenZeppelin\n\n1968\n\nERC20 token with the following features: - Premint your initial supply. - Mint as many tokens as you want with no cap. - Only the contract owner can mint new tokens.\n\nOpen\n\nAudited\n\nAzuki ERC721A NFT Sale Basic\n\n![](https://pbs.twimg.com/profile_images/1514324107881431045/vsF28_QV_400x400.jpg)Chiru-Labs\n\n1478\n\nThis smart contract is an implementation of the ERC721A standard. It allows users to purchase and mint NFTs, with the sale being active and limited to a maximum supply. The owner can reserve NFTs, withdraw proceeds from the sale, and set the sale status, price, and base URI for metadata retrieval.\n\nOpen\n\nToken Staking\n\n![](https://pbs.twimg.com/profile_images/1315664565917581312/9da1QkqP_400x400.png)oiler.network\n\n1355\n\nStaking contract where users deposit tokens and receive a reward based on the amount of time their tokens are staked. Users decide how long they want to stake their tokens for, and earn a bonus depending on the length of time. They can withdraw early, but are penalized.\n\nOpen\n\nAudited\n\nBasic DAO\n\nBCookbook\n\n1118\n\nA very simple implementation of a DAO. Voting period is locked in at 1 week, and the voting delay is 1 block. There is no delay on approved proposals.\n\nOpen\n\nLottery Contract\n\nLBraverElliot\n\n1046\n\nA lottery that uses a TRUELY random number.\n\nWatch my yt tutorial for the midpoint side.\n\nhttps://www.youtube.com/watch?v=QLbcAaYqh4I\n\nOpen\n\nVoting ERC20 Token\n\nVOpenZeppelin\n\n938\n\nERC20 token with the following features: - Token owners can vote on Governance/DAO proposals. - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token. Used with Governance/DAO contracts for voting.\n\nOpen\n\nAudited\n\nReflection Token supporting 3 wallets\n\n![](https://pbs.twimg.com/profile_images/1383133626431332353/6T-NQTxr_400x400.jpg)MediToken\n\n888\n\nA Reflection Token supporting 3 reflection recipients. Each transfer has a fee which is split between the liquidity pool, and 3 additional wallets. The 3 additional wallet are exempted from transfer fees and can be given specific purposes. (Treasury, Developer, Community, etc)\n\nOpen\n\nAudited\n\nSoulbound NFT\n\nSCookbook\n\n834\n\nSoulbound Token: ERC721 Soulbound NFT with the following features: - Deployer can mint to recipients. - No transfer capability.\n\nOpen\n\nCircle USDC\n\nCCircle-USDC\n\n808\n\nThis smart contract is an upgraded version of a fiat token. It introduces new features such as initializing the token with a new name, increasing/decreasing the allowance, executing transfers with signed authorizations, canceling authorizations, and updating allowances with signed permits.\n\nOpen\n\nAzuki ERC721A NFT Sale\n\n![](https://pbs.twimg.com/profile_images/1514324107881431045/vsF28_QV_400x400.jpg)Chiru-Labs\n\n771\n\nThis smart contract is an extension of the ERC721A standard. It allows users to purchase and mint NFTs, with a maximum supply and wallet limit. The owner can reserve NFTs, withdraw proceeds, and control the sale's activity, price, and wallet limit. It also enables the owner to update the base URI for NFT metadata.\n\nOpen\n\nERC721 NFT Staking with Infinite Rewards\n\nECookbook\n\n760\n\nNFT staking contract that rewards stakers with an exact number of ERC20 tokens per day. On deployment, the owner specifies a daily reward rate, and an address that tokens will be pulled from. Neither of these can be changed. Each staked NFT receives the same number of tokens every day. The per NFT rate stays the same even when the number of staked NFTs increases/decreases. A common usecase is for blockchain-based games, where each NFT rewards a certain number of lives per day.\n\nOpen\n\nOn-Chain income splitter and distributor\n\n![](https://pbs.twimg.com/profile_images/1570085369907138561/3CM7z929_400x400.jpg)0xSplits\n\n691\n\nSet and perform payment splits in either ETH or Tokens. Can be used for royalty splits or automated payment splits. Accepts both ETH and ERC20 tokens. Splits can be updated and transferred. Whenever a Split receives income, each recipient gets their share.\n\nOpen\n\nAudited\n\nERC20 Token with Automatic Vesting\n\n![](https://pbs.twimg.com/profile_images/1506907877134544897/_zWnXOgM_400x400.jpg)Aurox\n\n683\n\nWhen this contract is deployed, vesting contracts are automatically deployed, and tokens are automatically vested in those contracts. This allows the owner to immediately vest marketing/developer/admin tokens, without any manual work.\n\nOpen\n\nAudited\n\nAntiBot ERC20\n\n![](https://smart-contract-recipes.s3.amazonaws.com/0x7Ff38964ae5aC947FAfD86BaA44D347241ceE013/profile-pic.png)Hargobind-Gupta\n\n612\n\nThe Antibot ERC20 token is designed to protect against frontrunner sandwich bots on the blockchain network. Implementing a unique logic, it adds an extra layer of vulnerability for bots. The token includes a mapping called \\_buyBlock that stores the block number when a buy transaction occurs. During token transfers, the \\_beforeTokenTransfer function is triggered, and it checks if the from address has the same block number stored in \\_buyBlock. If it does, the transfer is flagged as a \"Bad bot!\" and blocked. The checkBot variable can be toggled by the contract owner to enable or disable the bot-checking functionality. Overall, this Antibot ERC20 token aims to deter and trap frontrunner bots by utilizing block number comparisons. This contract is inspired by an Ethereum Stackexchange discussion linked below.\nhttps://ethereum.stackexchange.com/questions/116857/stop-frontrunner-bots-by-comparing-block-number-of-buy-tx-versus-sell-and-transf\n\nOpen\n\nMoonbirds NFT\n\n![](https://pbs.twimg.com/profile_images/1595478138716184577/g620V8sF_400x400.jpg)Moonbirds\n\n570\n\nA collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits.\n\nOpen\n\nERC721A\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n567\n\nThis smart contract is an implementation of the ERC721A standard. It allows for the creation, ownership, and transfer of non-fungible tokens (NFTs). The contract keeps track of token ownership, token metadata, and token counts. It also includes functions for minting, burning, and querying token information.\n\nOpen\n\nSimple ERC721 NFT Sale\n\nSCookbook\n\n516\n\nERC721 NFT with the following features: - Built-in sale with an adjustable price. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nRoyalty Splitter\n\nROpenZeppelin\n\n475\n\nThis contract allows payments to be split among a group of accounts. The split can be in equal parts or set in percentages. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set when you deploy the contract and can't be updated afterwards. Payments must be claimed from the contract by each user. NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you to run tests before sending real value to this contract.\n\nOpen\n\nAudited\n\nERC1155 with burnable NFTs and pausable transfers\n\nECookbook\n\n438\n\nERC 1155 NFT, the basic standard multi-token, with the following features: - Burn feature that allow users to burn their NFTs. This directly decreases total supply. - Owner can pause or unpause NFT transfers. - Adjustable metadata. - Create multiple NFT collections with the same contract.\n\nOpen\n\nERC721 Limited Sale\n\nECookbook\n\n418\n\nERC721 NFT, including: - Built-in sale mechanism with an adjustable price. - Wallets can only purchase a limited number of NFTs during the sale. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nAudited\n\nERC721ABurnable\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n400\n\nThis contract extends ERC721A and IERC721ABurnable, allowing the owner or approved operators to burn a specific token by calling the \"burn\" function.\n\nOpen\n\nERC721ABurnableMock\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n400\n\nThe ERC721ABurnableMock contract is an implementation of the ERC721A and ERC721ABurnable interfaces. It allows for the creation and management of non-fungible tokens (NFTs) that can be burned. It provides functions to check token existence, mint new tokens, retrieve ownership information, and get statistics on minted and burned tokens.\n\nOpen\n\nERC721 NFT Sale with wallet cap\n\nECookbook\n\n399\n\nERC721 NFT with the following features: - Built-in sale with an adjustable price. - Wallets can only purchase a limited number of NFTs during the sale. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nNFT Sale (ERC20) with Distributed Royalties\n\nNCookbook\n\n395\n\nERC721 NFT with the following features: \\* \\* -Built-in sale with an adjustable price. Payment in Tokens \\* -Wallets can only purchase a limited number of NFTs during the sale. \\* -Reserve function for the owner to mint free NFTs. \\* -Fixed maximum supply. \\* -Methods that allow users to burn their NFTs. This directly decreases total supply. \\* -Proceeds can be divided across 5 wallets\n\nOpen\n\nHistory\n\nEnable notificationsDetailed Mode\n\nStart New Chat\n\n[Integrate Cookbook AI](https://ai.cookbook.dev/)\n\n![](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)\n\nAsk me anything about Envio!\n\nWhat's Envio?How do I get started with Envio?\n\nHistory\n\nEnable notificationsDetailed Mode\n\nStart New Chat\n\n[Integrate Cookbook AI](https://ai.cookbook.dev/)\n\n![](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)\n\nAsk me anything about Envio!\n\nWhat's Envio?How do I get started with Envio?\n\nSearch`` `K`\n\n- [HyperSync Complete Documentation](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete)\n\n- [Home page](https://docs.envio.dev/)\n- HyperSync Complete Documentation\n\nOn this page\n\n# HyperSync Complete Documentation\n\nThis document contains all HyperSync documentation consolidated into a single file for LLM consumption.\n\n* * *\n\n## HyperSync: Ultra-Fast & Flexible Data API [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-ultra-fast--flexible-data-api \"Direct link to HyperSync: Ultra-Fast & Flexible Data API\")\n\n**File:** `overview.md`\n\n## What is HyperSync? [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#what-is-hypersync \"Direct link to What is HyperSync?\")\n\nHyperSync is a purpose-built, high-performance data retrieval layer that gives developers unprecedented access to blockchain data. Built from the ground up in Rust, HyperSync serves as an alternative to traditional JSON-RPC endpoints, offering dramatically faster queries and more flexible data access patterns.\n\nHyperSync & HyperIndex\n\n**HyperSync** is Envio's high-performance blockchain data engine that serves as a direct replacement for traditional RPC endpoints, delivering up to 2000x faster data access.\n\n**HyperIndex** is built on top of HyperSync, providing a complete indexing framework with schema management, event handling, and GraphQL APIs.\n\nUse HyperSync directly when you need raw blockchain data at maximum speed, or use HyperIndex when you need a full-featured indexing solution.\n\n## The Problem HyperSync Solves [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#the-problem-hypersync-solves \"Direct link to The Problem HyperSync Solves\")\n\nTraditional blockchain data access through JSON-RPC faces several limitations:\n\n- **Speed constraints**: Retrieving large amounts of historical data can take days\n- **Query flexibility**: Complex data analysis requires many separate calls\n- **Cost inefficiency**: Expensive for data-intensive applications\n\n## Key Benefits [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#key-benefits \"Direct link to Key Benefits\")\n\n- **Exceptional Performance**: Retrieve and process blockchain data up to 1000x faster than traditional RPC methods\n- **Comprehensive Coverage**: Access data across 70+ EVM chains and Fuel, with new networks added regularly\n- **Flexible Query Capabilities**: Filter, select, and process exactly the data you need with powerful query options\n- **Cost Efficiency**: Dramatically reduce infrastructure costs for data-intensive applications\n- **Simple Integration**: Client libraries available for Python, Rust, Node.js, and Go\n\n## Performance Benchmarks [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#performance-benchmarks \"Direct link to Performance Benchmarks\")\n\nHyperSync delivers transformative performance compared to traditional methods:\n\n| Task | Traditional RPC | HyperSync | Improvement |\n| --- | --- | --- | --- |\n| Scan Arbitrum blockchain for sparse log data | Hours/Days | 2 seconds | ~2000x faster |\n| Fetch all Uniswap v3 PoolCreated events ethereum | Hours | Seconds | ~500x faster |\n\n## Use Cases [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#use-cases \"Direct link to Use Cases\")\n\nHyperSync powers a wide range of blockchain applications, enabling developers to build tools that would be impractical with traditional data access methods:\n\n### General Applications [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#general-applications \"Direct link to General Applications\")\n\n- **Indexers**: Build high-performance data indexers with minimal infrastructure\n- **Data Analytics**: Perform complex on-chain analysis in seconds instead of days\n- **Block Explorers**: Create responsive explorers with comprehensive data access\n- **Monitoring Tools**: Track blockchain activity with near real-time updates\n- **Cross-chain Applications**: Access unified data across multiple networks\n- **ETL Pipelines**: Create pipelines to extract and save data fast\n\n### Powered by HyperSync [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#powered-by-hypersync \"Direct link to Powered by HyperSync\")\n\n#### HyperIndex [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hyperindex \"Direct link to HyperIndex\")\n\n- **100x faster blockchain indexing** across 70+ EVM chains and Fuel\n- **Powers 100 plus applications** like v4.xyz analytics\n\n#### ChainDensity.xyz [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#chaindensityxyz \"Direct link to ChainDensity.xyz\")\n\n- **Fast transaction/event density analysis** for any address\n- **Generates insights in seconds** that would take hours with traditional methods\n\n#### Scope.sh [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#scopesh \"Direct link to Scope.sh\")\n\n- **Ultra-fast Account Abstraction (AA) focused block explorer**\n- **Fast historical data retrieval** with minimal latency\n\n#### LogTUI [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#logtui \"Direct link to LogTUI\")\n\n- **Terminal-based UI** for finding all historical blockchain events\n- **Built-in presets** for 20+ protocols (Uniswap, Chainlink, Aave, ENS, etc.)\n- **Try it**: `pnpx logtui aave arbitrum` to track Aave events on Arbitrum in your terminal\n\n## See HyperSync in Action [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#see-hypersync-in-action \"Direct link to See HyperSync in Action\")\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#next-steps \"Direct link to Next Steps\")\n\n- **Try the Quick Start Guide** to get up and running in minutes\n- **Build queries visually** with our Intuitive Query Builder\n- Get an API Token to access HyperSync services\n- View Supported Networks to see available chains\n- Check Client Documentation for language-specific guides\n- Join our Discord for support and updates\n\nnote\n\nOur documentation is continuously improving! If you have questions or need assistance, please reach out in our Discord community.\n\n* * *\n\n## HyperSync Quickstart [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-quickstart \"Direct link to HyperSync Quickstart\")\n\n**File:** `quickstart.md`\n\nGet up and running with HyperSync in minutes. This guide will help you start accessing blockchain data at unprecedented speeds with minimal setup.\n\n## Quickest Start: Try LogTUI [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#quickest-start-try-logtui \"Direct link to Quickest Start: Try LogTUI\")\n\nWant to see HyperSync in action with zero setup? Try LogTUI, a terminal-based blockchain event viewer:\n\n```codeBlockLines_e6Vv\n# Monitor Aave events on Arbitrum (no installation needed)\npnpx logtui aave arbitrum\n\n```\n\n## Clone the Quickstart Repository [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#clone-the-quickstart-repository \"Direct link to Clone the Quickstart Repository\")\n\nThe fastest way to get started is to clone our minimal example repository:\n\n```codeBlockLines_e6Vv\ngit clone https://github.com/enviodev/hypersync-quickstart.git\ncd hypersync-quickstart\n\n```\n\nThis repository contains everything you need to start streaming blockchain data using HyperSync.\n\n## Install Dependencies [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#install-dependencies \"Direct link to Install Dependencies\")\n\n```codeBlockLines_e6Vv\n# Using pnpm (recommended)\npnpm install\n\n```\n\n## Choose Your Adventure [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#choose-your-adventure \"Direct link to Choose Your Adventure\")\n\nThe repository includes three different script options, all of which retrieve Uniswap V3 events from Ethereum mainnet:\n\n```codeBlockLines_e6Vv\n# Run minimal version (recommended for beginners)\nnode run-simple.js\n\n# Run full version with progress bar\nnode run.js\n\n# Run version with terminal UI\nnode run-tui.js\n\n```\n\nThat's it! You're now streaming data directly from Ethereum mainnet through HyperSync! (TUI version below)\n\n!HyperSync in Action\n\n## Understanding the Code [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#understanding-the-code \"Direct link to Understanding the Code\")\n\nLet's look at the core concepts in the example code:\n\n### 1\\. Initialize the Client [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#1-initialize-the-client \"Direct link to 1. Initialize the Client\")\n\n```codeBlockLines_e6Vv\n\n// Initialize Hypersync client\nconst client = HypersyncClient.new({\n  url: \"http://eth.hypersync.xyz\", // Change this URL for different networks\n});\n\n```\n\n> **Note:** To connect to different networks, see the Supported Networks page for a complete list of available URLs.\n\n### 2\\. Build Your Query [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#2-build-your-query \"Direct link to 2. Build Your Query\")\n\nThe heart of HyperSync is the query object, which defines what data you want to retrieve:\n\n```codeBlockLines_e6Vv\nlet query = {\n  fromBlock: 0, // Start block (0 = genesis)\n  logs: [\\\n    // Filter for specific events\\\n    {\\\n      topics: [topic0_list], // Event signatures we're interested in\\\n    },\\\n  ],\n  fieldSelection: {\n    // Only return fields we need\n    log: [\\\n      LogField.Data,\\\n      LogField.Address,\\\n      LogField.Topic0,\\\n      LogField.Topic1,\\\n      LogField.Topic2,\\\n      LogField.Topic3,\\\n    ],\n  },\n  joinMode: JoinMode.JoinTransactions, // How to join related data\n};\n\n```\n\n### 3\\. Stream and Process Results [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#3-stream-and-process-results \"Direct link to 3. Stream and Process Results\")\n\n```codeBlockLines_e6Vv\n// Start streaming events\nconst stream = await client.stream(query, {});\n\nwhile (true) {\n  const res = await stream.recv();\n\n  // Process results\n  if (res.data && res.data.logs) {\n    // Do something with the logs\n    totalEvents += res.data.logs.length;\n  }\n\n  // Update starting block for next batch\n  if (res.nextBlock) {\n    query.fromBlock = res.nextBlock;\n  }\n}\n\n```\n\n## Key Concepts for Building Queries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#key-concepts-for-building-queries \"Direct link to Key Concepts for Building Queries\")\n\n### Filtering Data [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#filtering-data \"Direct link to Filtering Data\")\n\nHyperSync lets you filter blockchain data in several ways:\n\n- **Log filters**: Find specific events by contract address and event signature\n- **Transaction filters**: Filter by sender/receiver addresses, method signatures, etc.\n- **Trace filters**: Access internal transactions and state changes (only supported on select networks like Ethereum Mainnet)\n- **Block filters**: Get data from specific block ranges\n\n### Field Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#field-selection \"Direct link to Field Selection\")\n\nOne of HyperSync's most powerful features is the ability to retrieve only the fields you need:\n\n```codeBlockLines_e6Vv\nfieldSelection: {\n  // Block fields\n  block: [BlockField.Number, BlockField.Timestamp],\n\n  // Log fields\n  log: [LogField.Address, LogField.Topic0, LogField.Data],\n\n  // Transaction fields\n  transaction: [TransactionField.From, TransactionField.To, TransactionField.Value],\n}\n\n```\n\nThis selective approach dramatically reduces unnecessary data transfer and improves performance.\n\n### Join Modes [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#join-modes \"Direct link to Join Modes\")\n\nHyperSync allows you to control how related data is joined:\n\n- **JoinNothing**: Return only exact matches\n- **JoinAll**: Return matches plus all related objects\n- **JoinTransactions**: Return matches plus their transactions\n- **Default**: Return a reasonable set of related objects\n\n## Examples [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#examples \"Direct link to Examples\")\n\n### Finding Uniswap V3 Events [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#finding-uniswap-v3-events \"Direct link to Finding Uniswap V3 Events\")\n\nThis example (from the quickstart repo) streams all Uniswap V3 events from the beginning of Ethereum:\n\n```codeBlockLines_e6Vv\n\nimport {\n  HypersyncClient,\n  LogField,\n  JoinMode,\n} from \"@envio-dev/hypersync-client\";\n\n// Define Uniswap V3 event signatures\nconst event_signatures = [\\\n  \"PoolCreated(address,address,uint24,int24,address)\",\\\n  \"Burn(address,int24,int24,uint128,uint256,uint256)\",\\\n  \"Initialize(uint160,int24)\",\\\n  \"Mint(address,address,int24,int24,uint128,uint256,uint256)\",\\\n  \"Swap(address,address,int256,int256,uint160,uint128,int24)\",\\\n];\n\n// Create topic0 hashes from event signatures\nconst topic0_list = event_signatures.map((sig) => keccak256(toHex(sig)));\n\n// Initialize Hypersync client\nconst client = HypersyncClient.new({\n  url: \"http://eth.hypersync.xyz\",\n});\n\n// Define query for Uniswap V3 events\nlet query = {\n  fromBlock: 0,\n  logs: [\\\n    {\\\n      topics: [topic0_list],\\\n    },\\\n  ],\n  fieldSelection: {\n    log: [\\\n      LogField.Data,\\\n      LogField.Address,\\\n      LogField.Topic0,\\\n      LogField.Topic1,\\\n      LogField.Topic2,\\\n      LogField.Topic3,\\\n    ],\n  },\n  joinMode: JoinMode.JoinTransactions,\n};\n\nconst main = async () => {\n  console.log(\"Starting Uniswap V3 event scan...\");\n  const stream = await client.stream(query, {});\n\n  // Process stream...\n};\n\nmain();\n\n```\n\n## Supported Networks [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#supported-networks \"Direct link to Supported Networks\")\n\nHyperSync supports 70+ EVM-compatible networks. You can change networks by simply changing the client URL:\n\n```codeBlockLines_e6Vv\n// Ethereum Mainnet\nconst client = HypersyncClient.new({ url: \"http://eth.hypersync.xyz\" });\n\n// Arbitrum\nconst client = HypersyncClient.new({ url: \"http://arbitrum.hypersync.xyz\" });\n\n// Base\nconst client = HypersyncClient.new({ url: \"http://base.hypersync.xyz\" });\n\n```\n\nSee the Supported Networks page for a complete list.\n\n## Using LogTUI [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#using-logtui \"Direct link to Using LogTUI\")\n\nThis quickstart repository powers LogTUI, a terminal-based blockchain event viewer built on HyperSync. LogTUI lets you monitor events from popular protocols across multiple chains with zero configuration.\n\nTry it with a single command:\n\n```codeBlockLines_e6Vv\n# Monitor Uniswap events on unichain\npnpx logtui uniswap-v4 unichain\n\n# Monitor Aave events on Arbitrum\npnpx logtui aave arbitrum\n\n# See all available options\npnpx logtui --help\n\n```\n\nLogTUI supports scanning historically for any events across all networks supported by HyperSync.\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#next-steps-1 \"Direct link to Next Steps\")\n\nYou're now ready to build with HyperSync! Here are some resources for diving deeper:\n\n- Client Libraries - Explore language-specific clients\n- Query Reference - Learn advanced query techniques\n- **Build queries visually** \\- Use our Intuitive Query Builder\n- curl Examples - Test queries directly in your terminal\n- Complete Getting Started Guide - More comprehensive guidance\n\n## API Token for Production Use [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#api-token-for-production-use \"Direct link to API Token for Production Use\")\n\nFor development, you can use HyperSync without an API token. For production applications, you'll need to get an API token and update your client initialization:\n\n```codeBlockLines_e6Vv\nconst client = HypersyncClient.new({\n  url: \"http://eth.hypersync.xyz\",\n  bearerToken: \"your-api-token-here\",\n});\n\n```\n\nCongratulations! You've taken your first steps with HyperSync, bringing ultra-fast blockchain data access to your applications. Happy building!\n\n* * *\n\n## Getting Started with HyperSync [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#getting-started-with-hypersync \"Direct link to Getting Started with HyperSync\")\n\n**File:** `hypersync-usage.md`\n\nHyperSync is Envio's high-performance blockchain data engine that provides up to 2000x faster access to blockchain data compared to traditional RPC endpoints. This guide will help you understand how to effectively use HyperSync in your applications.\n\n## Quick Start Video [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#quick-start-video \"Direct link to Quick Start Video\")\n\nWatch this quick tutorial to see HyperSync in action:\n\n## Core Concepts [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#core-concepts \"Direct link to Core Concepts\")\n\nHyperSync revolves around two main concepts:\n\n1. **Queries** \\- Define what blockchain data you want to retrieve\n2. **Output Configuration** \\- Specify how you want that data formatted and delivered\n\nThink of queries as your data filter and the output configuration as your data processor.\n\n## Building Effective Queries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#building-effective-queries \"Direct link to Building Effective Queries\")\n\nQueries are the heart of working with HyperSync. They allow you to filter for specific blocks, logs, transactions, and traces.\n\n### Query Structure [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#query-structure \"Direct link to Query Structure\")\n\nA basic HyperSync query contains:\n\n```codeBlockLines_e6Vv\nquery = hypersync.Query(\n    from_block=12345678,               # Required: Starting block number\n    to_block=12345778,                 # Optional: Ending block number\n    field_selection=field_selection,   # Required: What fields to return\n    logs=[log_selection],              # Optional: Filter for specific logs\n    transactions=[tx_selection],       # Optional: Filter for specific transactions\n    traces=[trace_selection],          # Optional: Filter for specific traces\n    include_all_blocks=False,          # Optional: Include blocks with no matches\n    max_num_blocks=1000,               # Optional: Limit number of blocks processed\n    max_num_transactions=5000,         # Optional: Limit number of transactions processed\n    max_num_logs=5000,                 # Optional: Limit number of logs processed\n    max_num_traces=5000                # Optional: Limit number of traces processed\n)\n\n```\n\n### Field Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#field-selection-1 \"Direct link to Field Selection\")\n\nField selection allows you to specify exactly which data fields you want to retrieve. This improves performance by only fetching what you need:\n\n```codeBlockLines_e6Vv\nfield_selection = hypersync.FieldSelection(\n    # Block fields you want to retrieve\n    block=[\\\n        BlockField.NUMBER,\\\n        BlockField.TIMESTAMP,\\\n        BlockField.HASH\\\n    ],\n\n    # Transaction fields you want to retrieve\n    transaction=[\\\n        TransactionField.HASH,\\\n        TransactionField.FROM,\\\n        TransactionField.TO,\\\n        TransactionField.VALUE\\\n    ],\n\n    # Log fields you want to retrieve\n    log=[\\\n        LogField.ADDRESS,\\\n        LogField.TOPIC0,\\\n        LogField.TOPIC1,\\\n        LogField.TOPIC2,\\\n        LogField.TOPIC3,\\\n        LogField.DATA,\\\n        LogField.TRANSACTION_HASH\\\n    ],\n\n    # Trace fields you want to retrieve (if applicable)\n    trace=[\\\n        TraceField.ACTION_FROM,\\\n        TraceField.ACTION_TO,\\\n        TraceField.ACTION_VALUE\\\n    ]\n)\n\n```\n\n### Filtering for Specific Data [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#filtering-for-specific-data \"Direct link to Filtering for Specific Data\")\n\nFor most use cases, you'll want to filter for specific logs, transactions, or traces:\n\n#### Log Selection Example [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#log-selection-example \"Direct link to Log Selection Example\")\n\n```codeBlockLines_e6Vv\n# Filter for Transfer events from USDC contract\nlog_selection = hypersync.LogSelection(\n    address=[\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"],  # USDC contract\n    topics=[\\\n        [\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]  # Transfer event signature\\\n    ]\n)\n\n```\n\n#### Transaction Selection Example [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#transaction-selection-example \"Direct link to Transaction Selection Example\")\n\n```codeBlockLines_e6Vv\n# Filter for transactions to the Uniswap V3 router\ntx_selection = hypersync.TransactionSelection(\n    to=[\"0xE592427A0AEce92De3Edee1F18E0157C05861564\"]  # Uniswap V3 Router\n)\n\n```\n\n## Processing the Results [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#processing-the-results \"Direct link to Processing the Results\")\n\nHyperSync provides multiple ways to process query results:\n\n### Stream to Parquet Files [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#stream-to-parquet-files \"Direct link to Stream to Parquet Files\")\n\nParquet is the recommended format for large data sets:\n\n```codeBlockLines_e6Vv\n# Configure output format\nconfig = hypersync.StreamConfig(\n    hex_output=hypersync.HexOutput.PREFIXED,\n    event_signature=\"Transfer(address indexed from, address indexed to, uint256 value)\"\n)\n\n# Stream results to a Parquet file\nawait client.collect_parquet(\"data_directory\", query, config)\n\n```\n\n### Stream to JSON Files [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#stream-to-json-files \"Direct link to Stream to JSON Files\")\n\nFor smaller datasets or debugging:\n\n```codeBlockLines_e6Vv\n# Stream results to JSON\nawait client.collect_json(\"output.json\", query, config)\n\n```\n\n### Process Data in Memory [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#process-data-in-memory \"Direct link to Process Data in Memory\")\n\nFor immediate processing:\n\n```codeBlockLines_e6Vv\n# Process data directly\nasync for result in client.stream(query, config):\n    for log in result.logs:\n        # Process each log\n        print(f\"Transfer from {log.event_params['from']} to {log.event_params['to']}\")\n\n```\n\n## Tips and Best Practices [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#tips-and-best-practices \"Direct link to Tips and Best Practices\")\n\n### Performance Optimization [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#performance-optimization \"Direct link to Performance Optimization\")\n\n- **Use Appropriate Batch Sizes**: Adjust batch size based on your chain and use case:\n\n\n\n\n\n```codeBlockLines_e6Vv\nconfig = hypersync.ParquetConfig(\n      path=\"data\",\n      hex_output=hypersync.HexOutput.PREFIXED,\n      batch_size=1000000,  # Process 1M blocks at a time\n      concurrency=10,      # Use 10 concurrent workers\n)\n\n```\n\n- **Enable Trace Logs**: Set `RUST_LOG=trace` to see detailed progress:\n\n\n\n\n\n```codeBlockLines_e6Vv\nexport RUST_LOG=trace\n\n```\n\n- **Paginate Large Queries**: HyperSync requests have a 5-second time limit. For large data sets, paginate results:\n\n\n\n\n\n```codeBlockLines_e6Vv\ncurrent_block = start_block\nwhile current_block < end_block:\n      query.from_block = current_block\n      query.to_block = min(current_block + 1000000, end_block)\n      result = await client.collect_parquet(\"data\", query, config)\n      current_block = result.end_block + 1\n\n```\n\n\n### Network-Specific Considerations [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#network-specific-considerations \"Direct link to Network-Specific Considerations\")\n\n- **High-Volume Networks**: For networks like Ethereum Mainnet, use smaller block ranges or more specific filters\n- **Low-Volume Networks**: For smaller chains, you can process the entire chain in one query\n\n## Complete Example [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#complete-example \"Direct link to Complete Example\")\n\nHere's a complete example that fetches all USDC Transfer events:\n\n```codeBlockLines_e6Vv\nimport hypersync\nfrom hypersync import (\n    LogSelection,\n    LogField,\n    BlockField,\n    FieldSelection,\n    TransactionField,\n    HexOutput\n)\nimport asyncio\n\nasync def collect_usdc_transfers():\n    # Initialize client\n    client = hypersync.HypersyncClient(\n        hypersync.ClientConfig(\n            url=\"https://ethereum.hypersync.xyz\",\n            bearer_token=\"your-token-here\",  # Get from https://docs.envio.dev/docs/HyperSync/api-tokens\n        )\n    )\n\n    # Define field selection\n    field_selection = hypersync.FieldSelection(\n        block=[BlockField.NUMBER, BlockField.TIMESTAMP],\n        transaction=[TransactionField.HASH],\n        log=[\\\n            LogField.ADDRESS,\\\n            LogField.TOPIC0,\\\n            LogField.TOPIC1,\\\n            LogField.TOPIC2,\\\n            LogField.DATA,\\\n        ]\n    )\n\n    # Define query for USDC transfers\n    query = hypersync.Query(\n        from_block=12000000,\n        to_block=12100000,\n        field_selection=field_selection,\n        logs=[\\\n            LogSelection(\\\n                address=[\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"],  # USDC contract\\\n                topics=[\\\n                    [\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"]  # Transfer signature\\\n                ]\\\n            )\\\n        ]\n    )\n\n    # Configure output\n    config = hypersync.StreamConfig(\n        hex_output=HexOutput.PREFIXED,\n        event_signature=\"Transfer(address indexed from, address indexed to, uint256 value)\"\n    )\n\n    # Collect data to a Parquet file\n    result = await client.collect_parquet(\"usdc_transfers\", query, config)\n    print(f\"Processed blocks {query.from_block} to {result.end_block}\")\n\nasyncio.run(collect_usdc_transfers())\n\n```\n\n## Decoding Event Logs [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#decoding-event-logs \"Direct link to Decoding Event Logs\")\n\nWhen working with blockchain data, event logs contain encoded data that needs to be properly decoded to extract meaningful information. HyperSync provides powerful decoding capabilities to simplify this process.\n\n### Understanding Log Structure [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#understanding-log-structure \"Direct link to Understanding Log Structure\")\n\nEvent logs in Ethereum have the following structure:\n\n- **Address**: The contract that emitted the event\n- **Topic0**: The event signature hash (keccak256 of the event signature)\n- **Topics 1-3**: Indexed parameters (up to 3)\n- **Data**: Non-indexed parameters packed together\n\n### Using the Decoder [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#using-the-decoder \"Direct link to Using the Decoder\")\n\nHyperSync's client libraries include a `Decoder` class that can parse these raw logs into structured data:\n\n```codeBlockLines_e6Vv\n// Create a decoder with event signatures\nconst decoder = Decoder.fromSignatures([\\\n  \"Transfer(address indexed from, address indexed to, uint256 amount)\",\\\n  \"Approval(address indexed owner, address indexed spender, uint256 amount)\",\\\n]);\n\n// Decode logs\nconst decodedLogs = await decoder.decodeLogs(logs);\n\n```\n\n### Single vs. Multiple Event Types [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#single-vs-multiple-event-types \"Direct link to Single vs. Multiple Event Types\")\n\nHyperSync provides flexibility to decode different types of event logs:\n\n- **Single Event Type**: For processing one type of event (e.g., only Swap events)\n  - See complete example: run-decoder.js\n- **Multiple Event Types**: For processing different events from the same contract (e.g., Transfer and Approval)\n  - See complete example: run-decoder-multi.js\n\n### Working with Decoded Data [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#working-with-decoded-data \"Direct link to Working with Decoded Data\")\n\nAfter decoding, you can access the log parameters in a structured way:\n\n- **Indexed parameters**: Available in `decodedLog.indexed` array\n- **Non-indexed parameters**: Available in `decodedLog.body` array\n\nEach parameter object contains:\n\n- **name**: The parameter name from the signature\n- **type**: The Solidity type\n- **val**: The actual value\n\nFor example, to access parameters from a Transfer event:\n\n```codeBlockLines_e6Vv\n// Access indexed parameters (from, to)\nconst from = decodedLog.indexed[0]?.val.toString();\nconst to = decodedLog.indexed[1]?.val.toString();\n\n// Access non-indexed parameters (amount)\nconst amount = decodedLog.body[0]?.val.toString();\n\n```\n\n### Benefits of Using the Decoder [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#benefits-of-using-the-decoder \"Direct link to Benefits of Using the Decoder\")\n\n- **Type Safety**: Values are properly converted to their corresponding types\n- **Simplified Access**: Direct access to named parameters\n- **Batch Processing**: Decode multiple logs with a single call\n- **Multiple Event Support**: Handle different event types in the same processing pipeline\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#next-steps-2 \"Direct link to Next Steps\")\n\nNow that you understand the basics of using HyperSync:\n\n- Browse the Python Client or other language-specific clients\n- Learn about advanced query options\n- See example queries for common use cases\n- Get your API token to start building\n\nFor detailed API references and examples in other languages, check our client documentation.\n\n* * *\n\n## HyperSync Client Libraries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-client-libraries \"Direct link to HyperSync Client Libraries\")\n\n**File:** `hypersync-clients.md`\n\nHyperSync provides powerful client libraries that enable you to integrate high-performance blockchain data access into your applications. These libraries handle the communication with HyperSync servers, data serialization/deserialization, and provide convenient APIs for querying blockchain data.\n\n## Quick Links [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#quick-links \"Direct link to Quick Links\")\n\n| Client | Resources |\n| --- | --- |\n| **Node.js** | 📝 API Docs · 📦 NPM · 💻 GitHub · 🧪 Examples |\n| **Python** | 📦 PyPI · 💻 GitHub · 🧪 Examples |\n| **Rust** | 📦 Crates.io · 📝 API Docs · 💻 GitHub · 🧪 Examples |\n| **Go** _(community)_ | 💻 GitHub · 🧪 Examples |\n| **API Tokens** | 🔑 Get Tokens |\n\n## Client Overview [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#client-overview \"Direct link to Client Overview\")\n\nAll HyperSync clients share these key features:\n\n- **High Performance**: Built on a common Rust foundation for maximum efficiency\n- **Optimized Transport**: Uses binary formats to minimize bandwidth and maximize throughput\n- **Consistent Experience**: Similar APIs across all language implementations\n- **Automatic Pagination**: Handles large data sets efficiently\n- **Event Decoding**: Parses binary event data into structured formats\n\nChoose the client that best matches your application's technology stack:\n\n| Feature | Node.js | Python | Rust | Go |\n| --- | --- | --- | --- | --- |\n| Async Support | ✅ | ✅ | ✅ | ✅ |\n| Typing | TypeScript | Type Hints | Native | Native |\n| Data Formats | JSON, Parquet | JSON, Parquet, CSV | JSON, Parquet | JSON, Parquet |\n| Memory Efficiency | Good | Better | Best | Better |\n| Installation | npm | pip | cargo | go get |\n\n## Node.js Client [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#nodejs-client \"Direct link to Node.js Client\")\n\nResources\n\n- 📝 API Documentation\n- 📦 NPM Package\n- 💻 GitHub Repository\n- 🧪 Example Projects\n\nThe Node.js client provides a TypeScript-first experience for JavaScript developers.\n\n### Installation [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#installation \"Direct link to Installation\")\n\n```codeBlockLines_e6Vv\n# Using npm\nnpm install @envio-dev/hypersync-client\n\n# Using yarn\nyarn add @envio-dev/hypersync-client\n\n# Using pnpm\npnpm add @envio-dev/hypersync-client\n\n```\n\n## Python Client [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#python-client \"Direct link to Python Client\")\n\nResources\n\n- 📦 PyPI Package\n- 💻 GitHub Repository\n- 🧪 Example Projects\n\nThe Python client provides a Pythonic interface with full type hinting support.\n\n### Installation [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#installation-1 \"Direct link to Installation\")\n\n```codeBlockLines_e6Vv\npip install hypersync\n\n```\n\n## Rust Client [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#rust-client \"Direct link to Rust Client\")\n\nResources\n\n- 📦 Crates.io Package\n- 📝 API Documentation\n- 💻 GitHub Repository\n- 🧪 Example Projects\n\nThe Rust client provides the most efficient and direct access to HyperSync, with all the safety and performance benefits of Rust.\n\n### Installation [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#installation-2 \"Direct link to Installation\")\n\nAdd the following to your `Cargo.toml`:\n\n```codeBlockLines_e6Vv\n[dependencies]\nhypersync-client = \"0.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n## Go Client [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#go-client \"Direct link to Go Client\")\n\nResources\n\n- 💻 GitHub Repository\n- 🧪 Example Projects\n\nCommunity Maintained\n\nThe Go client is community maintained and marked as work-in-progress. For production use, you may want to test thoroughly or consider the officially supported clients.\n\nThe Go client provides a native Go interface for accessing HyperSync, with support for streaming and decoding blockchain data.\n\n### Installation [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#installation-3 \"Direct link to Installation\")\n\n```codeBlockLines_e6Vv\ngo get github.com/enviodev/hypersync-client-go\n\n```\n\n## Using API Tokens [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#using-api-tokens \"Direct link to Using API Tokens\")\n\nGet Your API Token\n\nYou'll need an API token to use any HyperSync client. Get your token here.\n\nAll HyperSync clients require an API token for authentication. Tokens are used to manage access and usage limits.\n\nTo get an API token:\n\n1. Visit Envio\n2. Register or sign in with your github account\n3. Navigate to the API Tokens section\n4. Create a new token\n\nFor detailed instructions, see our API Tokens guide.\n\n## Client Selection Guide [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#client-selection-guide \"Direct link to Client Selection Guide\")\n\nChoose the client that best fits your use case:\n\nNode.js Client\n\n**Choose when**: You're building JavaScript/TypeScript applications or if your team is most comfortable with the JavaScript ecosystem.\n\nPython Client\n\n**Choose when**: You're doing data science work, need integration with pandas/numpy, or if your team prefers Python's simplicity.\n\nRust Client\n\n**Choose when**: You need maximum performance, are doing systems programming, or building performance-critical applications.\n\nGo Client\n\n**Choose when**: You're working in a Go ecosystem and want native integration with Go applications. Note that this client is community maintained.\n\n## Additional Resources [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#additional-resources \"Direct link to Additional Resources\")\n\n- 📚 HyperSync Usage Guide\n- 📝 Query Reference\n- 🧪 cURL Examples\n- 📊 Supported Networks\n\n## Support [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#support \"Direct link to Support\")\n\nNeed help getting started or have questions about our clients? Connect with our community:\n\n- Discord Community\n- GitHub Issues\n- Documentation Feedback\n\n```codeBlockLines_e6Vv\n\n```\n\n* * *\n\n## HyperSync Query [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-query \"Direct link to HyperSync Query\")\n\n**File:** `hypersync-query.md`\n\nThis guide explains how to structure queries for HyperSync to efficiently retrieve blockchain data. You'll learn both the basics and advanced techniques to make the most of HyperSync's powerful querying capabilities.\n\nHyperFuel Limitations\n\nNot all features implemented in HyperSync are available in HyperFuel (the Fuel implementation of HyperSync). For example, as of this writing, stream and collect functions aren't implemented in the Fuel client.\n\n## Client Examples [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#client-examples \"Direct link to Client Examples\")\n\nHyperSync offers client libraries in multiple languages, each with its own comprehensive examples. Instead of providing generic examples here, we recommend exploring the language-specific examples:\n\n| Client | Example Links |\n| --- | --- |\n| **Node.js** | Example Repository |\n| **Python** | Example Repository |\n| **Rust** | Example Repository |\n| **Go** | Example Repository |\n\nAdditionally, we maintain a comprehensive collection of real-world examples covering various use cases across different languages:\n\n- **30 HyperSync Examples** \\- A diverse collection of practical examples demonstrating HyperSync's capabilities in Python, JavaScript, TypeScript, Rust, and more.\n\nFor more details on client libraries, see the HyperSync Clients documentation.\n\nVisual Query Builder\n\nNeed help building queries? Try our **Intuitive Query Builder** to construct queries visually and see the results in real-time.\n\nDeveloper Tip\n\nSet the `RUST_LOG` environment variable to `trace` for more detailed logs when using client libraries.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#table-of-contents \"Direct link to Table of Contents\")\n\n1. Understanding HyperSync Queries\n2. Query Execution Process\n3. Query Structure Reference\n4. Data Schema\n5. Response Structure\n6. Stream and Collect Functions\n7. Working with Join Modes\n8. Best Practices\n\n## Understanding HyperSync Queries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#understanding-hypersync-queries \"Direct link to Understanding HyperSync Queries\")\n\nA HyperSync query defines what blockchain data you want to retrieve and how you want it returned. Unlike regular RPC calls, HyperSync queries offer:\n\n- **Flexible filtering** across logs, transactions, traces, and blocks\n- **Field selection** to retrieve only the data you need\n- **Automatic pagination** to handle large result sets\n- **Join capabilities** that link related blockchain data together\n\n### Core Concepts [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#core-concepts-1 \"Direct link to Core Concepts\")\n\n- **Selections**: Define criteria for filtering blockchain data (logs, transactions, traces)\n- **Field Selection**: Specify which fields to include in the response\n- **Limits**: Control query execution time and response size\n- **Joins**: Determine how related data is connected in the response\n\n## Query Execution Process [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#query-execution-process \"Direct link to Query Execution Process\")\n\n### How Data is Organized [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#how-data-is-organized \"Direct link to How Data is Organized\")\n\nHyperSync organizes blockchain data into groups of contiguous blocks. When executing a query:\n\n1. The server identifies which block group contains the starting block\n2. It processes data groups sequentially until it hits a limit\n3. Results are returned along with a `next_block` value for pagination\n\n### Query Limits [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#query-limits \"Direct link to Query Limits\")\n\nHyperSync enforces several types of limits to ensure efficient query execution:\n\n| Limit Type | Description | Behavior |\n| --- | --- | --- |\n| **Time** | Server-configured maximum execution time | May slightly exceed limit to complete current block group |\n| **Response Size** | Maximum data returned | May slightly exceed limit to complete current block group |\n| **to\\_block** | User-specified ending block (exclusive) | Never exceeds this limit |\n| **max _num_\\*** | User-specified maximum number of results by type | May slightly exceed limit to complete current block group |\n\n### Execution Steps [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#execution-steps \"Direct link to Execution Steps\")\n\n1. Server receives query and identifies the starting block group\n2. It scans each block group, applying selection criteria\n3. It joins related data according to the specified join mode\n4. When a limit is reached, it finishes processing the current block group\n5. It returns results with pagination information\n\n### Understanding Pagination [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#understanding-pagination \"Direct link to Understanding Pagination\")\n\nHyperSync uses a time-based pagination model that differs from traditional RPC calls:\n\n- By default, HyperSync has a **5-second query execution limit**\n- Within this time window, it processes as many blocks as possible\n- For example, starting with `from_block: 0` might progress to block 10 million in a single request\n- Each response includes a `next_block` value indicating where to resume for the next query\n- This differs from RPC calls where you typically specify fixed block ranges (e.g., 0-1000)\n\nFor most use cases, the `stream` function handles pagination automatically, making it the recommended approach for processing large ranges of blocks.\n\n### Reverse Search [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#reverse-search \"Direct link to Reverse Search\")\n\nHyperSync supports searching from the head of the chain backwards, which is useful for:\n\n- Block explorers showing the most recent activity\n- UIs displaying latest transactions for a user\n- Any use case where recent data is more relevant\n\nTo use reverse search, add the `reverse: true` parameter to your stream call:\n\n```codeBlockLines_e6Vv\n// Example of reverse search to get recent transactions\nconst receiver = await client.stream(query, { reverse: true });\n\nlet count = 0;\nwhile (true) {\n  let res = await receiver.recv();\n  if (res === null) {\n    break;\n  }\n  for (const tx of res.data.transactions) {\n    console.log(JSON.stringify(tx, null, 2));\n  }\n  count += res.data.transactions.length;\n  if (count >= 20) {\n    break;\n  }\n}\n\n```\n\nWith reverse search, HyperSync starts from the latest block and works backwards, allowing you to efficiently access the most recent blockchain data first.\n\n## Query Structure Reference [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#query-structure-reference \"Direct link to Query Structure Reference\")\n\nA complete HyperSync query can include the following components:\n\n### Core Query Parameters [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#core-query-parameters \"Direct link to Core Query Parameters\")\n\n```codeBlockLines_e6Vv\nstruct Query {\n    /// The block to start the query from\n    from_block: u64,\n\n    /// The block to end the query at (exclusive)\n    /// If not specified, the query runs until the end of available data\n    to_block: Optional,\n\n    /// Log selection criteria (OR relationship between selections)\n    logs: Array,\n\n    /// Transaction selection criteria (OR relationship between selections)\n    transactions: Array,\n\n    /// Trace selection criteria (OR relationship between selections)\n    traces: Array,\n\n    /// Whether to include all blocks in the requested range\n    /// Default: only return blocks related to matched transactions/logs\n    include_all_blocks: bool,\n\n    /// Fields to include in the response\n    field_selection: FieldSelection,\n\n    /// Maximum results limits (approximate)\n    max_num_blocks: Optional,\n    max_num_transactions: Optional,\n    max_num_logs: Optional,\n    max_num_traces: Optional,\n\n    /// Data relationship model (Default, JoinAll, or JoinNothing)\n    join_mode: JoinMode,\n}\n\n```\n\n### Selection Types [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#selection-types \"Direct link to Selection Types\")\n\n#### Log Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#log-selection \"Direct link to Log Selection\")\n\n```codeBlockLines_e6Vv\nstruct LogSelection {\n    /// Contract addresses to match (empty = match all)\n    address: Array,\n\n    /// Topics to match by position (empty = match all)\n    /// Each array element corresponds to a topic position (0-3)\n    /// Within each position, any matching value will satisfy the condition\n    topics: Array>,\n}\n\n```\n\n#### Transaction Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#transaction-selection \"Direct link to Transaction Selection\")\n\n```codeBlockLines_e6Vv\nstruct TransactionSelection {\n    /// Sender addresses (empty = match all)\n    /// Has AND relationship with 'to' field\n    from: Array,\n\n    /// Recipient addresses (empty = match all)\n    /// Has AND relationship with 'from' field\n    to: Array,\n\n    /// Method signatures to match (first 4 bytes of input)\n    sighash: Array,\n\n    /// Transaction status to match (1 = success, 0 = failure)\n    status: Optional,\n\n    /// Transaction types to match (e.g., 0 = legacy, 2 = EIP-1559)\n    type: Array,\n\n    /// Created contract addresses to match\n    contract_address: Array,\n}\n\n```\n\n#### Block Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#block-selection \"Direct link to Block Selection\")\n\n```codeBlockLines_e6Vv\nstruct BlockSelection {\n    /// Block hashes to match (empty = match all)\n    hash: Array,\n\n    /// Miner/validator addresses to match (empty = match all)\n    miner: Array,\n}\n\n```\n\n#### Trace Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#trace-selection \"Direct link to Trace Selection\")\n\n```codeBlockLines_e6Vv\nstruct TraceSelection {\n    /// Sender addresses (empty = match all)\n    /// Has AND relationship with 'to' field\n    from: Array,\n\n    /// Recipient addresses (empty = match all)\n    /// Has AND relationship with 'from' field\n    to: Array,\n\n    /// Created contract addresses to match\n    address: Array,\n\n    /// Call types to match (e.g., \"call\", \"delegatecall\")\n    call_type: Array,\n\n    /// Reward types to match (e.g., \"block\", \"uncle\")\n    reward_type: Array,\n\n    /// Trace types to match (e.g., \"call\", \"create\", \"suicide\", \"reward\")\n    kind: Array,\n\n    /// Method signatures to match (first 4 bytes of input)\n    sighash: Array,\n}\n\n```\n\n#### Field Selection [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#field-selection-2 \"Direct link to Field Selection\")\n\n```codeBlockLines_e6Vv\nstruct FieldSelection {\n    /// Block fields to include in response\n    block: Array,\n\n    /// Transaction fields to include in response\n    transaction: Array,\n\n    /// Log fields to include in response\n    log: Array,\n\n    /// Trace fields to include in response\n    trace: Array,\n}\n\n```\n\n## Data Schema [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#data-schema \"Direct link to Data Schema\")\n\nHyperSync organizes blockchain data into four main tables. Below are the available fields for each table.\n\nField Naming\n\nWhen specifying fields in your query, always use snake\\_case names (e.g., `block_number`, not `blockNumber`).\n\n### Block Fields [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#block-fields \"Direct link to Block Fields\")\n\n```codeBlockLines_e6Vv\nclass BlockField(StrEnum):\n    NUMBER = 'number'               # Block number\n    HASH = 'hash'                   # Block hash\n    PARENT_HASH = 'parent_hash'     # Parent block hash\n    TIMESTAMP = 'timestamp'         # Block timestamp (Unix time)\n    MINER = 'miner'                 # Miner/validator address\n    GAS_LIMIT = 'gas_limit'         # Block gas limit\n    GAS_USED = 'gas_used'           # Total gas used in block\n    BASE_FEE_PER_GAS = 'base_fee_per_gas'  # EIP-1559 base fee\n    # Many more fields available...\n\n```\n\n### Transaction Fields [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#transaction-fields \"Direct link to Transaction Fields\")\n\n```codeBlockLines_e6Vv\nclass TransactionField(StrEnum):\n    # Block-related fields\n    BLOCK_HASH = 'block_hash'           # The Keccak 256-bit hash of the block\n    BLOCK_NUMBER = 'block_number'       # Block number containing the transaction\n\n    # Transaction identifiers\n    HASH = 'hash'                       # Transaction hash (keccak hash of RLP encoded signed transaction)\n    TRANSACTION_INDEX = 'transaction_index' # Index of the transaction in the block\n\n    # Transaction participants\n    FROM = 'from'                       # 160-bit address of the sender\n    TO = 'to'                           # 160-bit address of the recipient (null for contract creation)\n\n    # Gas information\n    GAS = 'gas'                         # Gas limit set by sender\n    GAS_PRICE = 'gas_price'             # Wei paid per unit of gas\n    GAS_USED = 'gas_used'               # Actual gas used by the transaction\n    CUMULATIVE_GAS_USED = 'cumulative_gas_used' # Total gas used in the block up to this transaction\n    EFFECTIVE_GAS_PRICE = 'effective_gas_price' # Sum of base fee and tip paid per unit of gas\n\n    # EIP-1559 fields\n    MAX_PRIORITY_FEE_PER_GAS = 'max_priority_fee_per_gas' # Max priority fee (a.k.a. GasTipCap)\n    MAX_FEE_PER_GAS = 'max_fee_per_gas' # Max fee per gas (a.k.a. GasFeeCap)\n\n    # Transaction data\n    INPUT = 'input'                     # Transaction input data or contract initialization code\n    VALUE = 'value'                     # Amount of ETH transferred in wei\n    NONCE = 'nonce'                     # Number of transactions sent by the sender\n\n    # Signature fields\n    V = 'v'                             # Replay protection value (based on chain_id)\n    R = 'r'                             # The R field of the signature\n    S = 's'                             # The S field of the signature\n    Y_PARITY = 'y_parity'               # Signature Y parity\n    CHAIN_ID = 'chain_id'               # Chain ID for replay protection (EIP-155)\n\n    # Contract-related fields\n    CONTRACT_ADDRESS = 'contract_address' # Address of created contract (for contract creation txs)\n\n    # Transaction result fields\n    STATUS = 'status'                   # Success (1) or failure (0)\n    LOGS_BLOOM = 'logs_bloom'           # Bloom filter for logs produced by this transaction\n    ROOT = 'root'                       # State root (pre-Byzantium)\n\n    # EIP-2930 fields\n    ACCESS_LIST = 'access_list'         # List of addresses and storage keys to pre-warm\n\n    # EIP-4844 (blob transactions) fields\n    MAX_FEE_PER_BLOB_GAS = 'max_fee_per_blob_gas' # Max fee per data gas (blob fee cap)\n    BLOB_VERSIONED_HASHES = 'blob_versioned_hashes' # List of blob versioned hashes\n\n    # Transaction type\n    KIND = 'type'                       # Transaction type (0=legacy, 1=EIP-2930, 2=EIP-1559, 3=EIP-4844, 4=EIP-7702) # note - in old versions of the clients this was called 'kind', in newer versions its called 'type'\n\n    # L2-specific fields (for rollups)\n    L1_FEE = 'l1_fee'                   # Fee for L1 data (L1GasPrice × L1GasUsed)\n    L1_GAS_PRICE = 'l1_gas_price'       # Gas price on L1\n    L1_GAS_USED = 'l1_gas_used'         # Amount of gas consumed on L1\n    L1_FEE_SCALAR = 'l1_fee_scalar'     # Multiplier for L1 fee calculation\n    GAS_USED_FOR_L1 = 'gas_used_for_l1' # Gas spent on L1 calldata in L2 gas units\n\n```\n\n### Log Fields [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#log-fields \"Direct link to Log Fields\")\n\n```codeBlockLines_e6Vv\nclass LogField(StrEnum):\n    # Log identification\n    LOG_INDEX = 'log_index'             # Index of the log in the block\n    TRANSACTION_INDEX = 'transaction_index' # Index of the transaction in the block\n\n    # Transaction information\n    TRANSACTION_HASH = 'transaction_hash' # Hash of the transaction that created this log\n\n    # Block information\n    BLOCK_HASH = 'block_hash'           # Hash of the block containing this log\n    BLOCK_NUMBER = 'block_number'       # Block number containing this log\n\n    # Log content\n    ADDRESS = 'address'                 # Contract address that emitted the event\n    DATA = 'data'                       # Non-indexed data from the event\n\n    # Topics (indexed parameters)\n    TOPIC0 = 'topic0'                   # Event signature hash\n    TOPIC1 = 'topic1'                   # First indexed parameter\n    TOPIC2 = 'topic2'                   # Second indexed parameter\n    TOPIC3 = 'topic3'                   # Third indexed parameter\n\n    # Reorg information\n    REMOVED = 'removed'                 # True if log was removed due to chain reorganization\n\n```\n\n### Trace Fields [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#trace-fields \"Direct link to Trace Fields\")\n\n```codeBlockLines_e6Vv\nclass TraceField(StrEnum):\n    # Trace identification\n    TRANSACTION_HASH = 'transaction_hash'   # Hash of the transaction\n    TRANSACTION_POSITION = 'transaction_position' # Index of the transaction in the block\n    SUBTRACES = 'subtraces'                 # Number of sub-traces created during execution\n    TRACE_ADDRESS = 'trace_address'         # Array indicating position in the trace tree\n\n    # Block information\n    BLOCK_HASH = 'block_hash'               # Hash of the block containing this trace\n    BLOCK_NUMBER = 'block_number'           # Block number containing this trace\n\n    # Transaction participants\n    FROM = 'from'                           # Address of the sender\n    TO = 'to'                               # Address of the recipient (null for contract creation)\n\n    # Value and gas\n    VALUE = 'value'                         # ETH value transferred (in wei)\n    GAS = 'gas'                             # Gas limit\n    GAS_USED = 'gas_used'                   # Gas actually used\n\n    # Call data\n    INPUT = 'input'                         # Call data for function calls\n    INIT = 'init'                           # Initialization code for contract creation\n    OUTPUT = 'output'                       # Return data from the call\n\n    # Contract information\n    ADDRESS = 'address'                     # Contract address (for creation/destruction)\n    CODE = 'code'                           # Contract code\n\n    # Trace types and categorization\n    TYPE = 'type'                           # Trace type (call, create, suicide, reward)\n    CALL_TYPE = 'call_type'                 # Call type (call, delegatecall, staticcall, etc.)\n    REWARD_TYPE = 'reward_type'             # Reward type (block, uncle)\n\n    # Other actors\n    AUTHOR = 'author'                       # Address of receiver for reward transactions\n\n    # Result information\n    ERROR = 'error'                         # Error message if failed\n\n```\n\nFor a complete list of all available fields, refer to the HyperSync API Reference.\n\n## Response Structure [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#response-structure \"Direct link to Response Structure\")\n\nWhen you execute a HyperSync query, the response includes both metadata and the requested data:\n\n```codeBlockLines_e6Vv\nstruct QueryResponse {\n    /// Current height of the blockchain in HyperSync\n    archive_height: Optional,\n\n    /// Block number to use as from_block in your next query for pagination\n    next_block: u64,\n\n    /// Query execution time in milliseconds\n    total_execution_time: u64,\n\n    /// The actual blockchain data matching your query\n    data: ResponseData,\n\n    /// Information to help handle chain reorganizations\n    rollback_guard: Optional,\n}\n\n```\n\n### Rollback Guard [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#rollback-guard \"Direct link to Rollback Guard\")\n\nThe optional `rollback_guard` helps manage chain reorganizations:\n\n```codeBlockLines_e6Vv\nstruct RollbackGuard {\n    /// Last block scanned\n    block_number: u64,\n    timestamp: i64,\n    hash: Hash,\n\n    /// First block scanned\n    first_block_number: u64,\n    first_parent_hash: Hash,\n}\n\n```\n\n## Stream and Collect Functions [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#stream-and-collect-functions \"Direct link to Stream and Collect Functions\")\n\nFor continuous data processing or building data pipelines, client libraries provide `stream` and `collect` functions that wrap the base query functionality.\n\nTip of Chain Warning\n\nThese functions are not designed for use at the blockchain tip where rollbacks may occur. For real-time data near the chain tip, implement a custom loop using the `get` functions and handle rollbacks manually.\n\n### Stream Function [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#stream-function \"Direct link to Stream Function\")\n\nThe `stream` function:\n\n- Runs multiple queries concurrently\n- Returns a stream handle that yields results as they're available\n- Optimizes performance through pipelined decoding/decompression\n- Continues until reaching either `to_block` or the chain height at stream start\n\n### Collect Functions [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#collect-functions \"Direct link to Collect Functions\")\n\nThe `collect` functions:\n\n- Call `stream` internally and aggregate results\n- Offer different output formats (JSON, Parquet)\n- Handle data that may not fit in memory\n\nResource Management\n\nAlways call `close()` on stream handles when finished to prevent resource leaks, especially if creating multiple streams.\n\n## Working with Join Modes [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#working-with-join-modes \"Direct link to Working with Join Modes\")\n\nHyperSync \"joins\" connect related blockchain data automatically. Unlike SQL joins that combine rows from different tables, HyperSync joins determine which related records to include in the response.\n\n### Default Join Mode (logs → transactions → traces → blocks) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#default-join-mode-logs--transactions--traces--blocks \"Direct link to Default Join Mode (logs → transactions → traces → blocks)\")\n\nWith the default join mode:\n\n1. When you query logs, you automatically get their associated transactions\n2. Those transactions' traces are also included\n3. The blocks containing these transactions are included\n\n```codeBlockLines_e6Vv\n┌───────┐     ┌───────────────┐     ┌───────┐     ┌───────┐\n│  Logs │ ──> │ Transactions  │ ──> │ Traces│ ──> │ Blocks│\n└───────┘     └───────────────┘     └───────┘     └───────┘\n\n```\n\n### JoinAll Mode [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#joinall-mode \"Direct link to JoinAll Mode\")\n\nJoinAll creates a more comprehensive network of related data:\n\n```codeBlockLines_e6Vv\n                 ┌─────────────────────────────┐\n                 │                             │\n                 ▼                             │\n┌───────┐  ┌───────────────┐  ┌───────┐  ┌───────┐\n│  Logs │      │ Transactions  │      │ Traces│      │ Blocks│\n└───────┘      └───────────────┘      └───────┘      └───────┘\n\n```\n\nFor example, if you query a trace:\n\n1. You get the transaction that created it\n2. You get ALL logs from that transaction (not just the ones matching your criteria)\n3. You get ALL traces from that transaction\n4. You get the block containing the transaction\n\n### JoinNothing Mode [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#joinnothing-mode \"Direct link to JoinNothing Mode\")\n\nJoinNothing is the most restrictive:\n\n```codeBlockLines_e6Vv\n┌───────┐     ┌───────────────┐     ┌───────┐     ┌───────┐\n│  Logs │     │ Transactions  │     │ Traces│     │ Blocks│\n└───────┘     └───────────────┘     └───────┘     └───────┘\n\n```\n\nOnly data directly matching your selection criteria is returned, with no related records included.\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#best-practices \"Direct link to Best Practices\")\n\nTo get the most out of HyperSync queries:\n\n1. **Minimize field selection** \\- Only request fields you actually need to improve performance\n2. **Use appropriate limits** \\- Set `max_num_*` parameters to control response size\n3. **Choose the right join mode** \\- Use `JoinNothing` for minimal data, `JoinAll` for complete context\n4. **Process in chunks** \\- For large datasets, use pagination or the `stream` function\n5. **Consider Parquet** \\- For analytical workloads, use `collect_parquet` for efficient storage\n6. **Handle chain tip carefully** \\- Near the chain tip, implement custom rollback handling\n\n* * *\n\n## HyperSync Preset Queries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-preset-queries \"Direct link to HyperSync Preset Queries\")\n\n**File:** `hypersync-presets.md`\n\nHyperSync's client libraries include helper functions that build common queries. These presets are useful when you need raw blockchain objects without crafting a query manually.\n\nEach preset returns a `Query` object so you can pass it directly to `client.get`, `client.stream`, or `client.collect`.\n\n## Available Presets [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#available-presets \"Direct link to Available Presets\")\n\n### `preset_query_blocks_and_transactions(from_block, to_block)` [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#preset_query_blocks_and_transactionsfrom_block-to_block \"Direct link to preset_query_blocks_and_transactionsfrom_block-to_block\")\n\nReturns every block and all associated transactions within the supplied block range.\n\n```codeBlockLines_e6Vv\nimport hypersync\nimport asyncio\n\nasync def main():\n    client = hypersync.HypersyncClient(hypersync.ClientConfig())\n\n    query = hypersync.preset_query_blocks_and_transactions(17_000_000, 17_000_050)\n    result = await client.get(query)\n    print(f\"Query returned {len(result.data.blocks)} blocks and {len(result.data.transactions)} transactions\")\n\nasyncio.run(main())\n\n```\n\n### `preset_query_blocks_and_transaction_hashes(from_block, to_block)` [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#preset_query_blocks_and_transaction_hashesfrom_block-to_block \"Direct link to preset_query_blocks_and_transaction_hashesfrom_block-to_block\")\n\nReturns each block in the range along with only the transaction hashes.\n\n### `preset_query_get_logs(addresses, from_block, to_block)` [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#preset_query_get_logsaddresses-from_block-to_block \"Direct link to preset_query_get_logsaddresses-from_block-to_block\")\n\nFetches all logs emitted by the provided contract addresses in the given block range.\n\n```codeBlockLines_e6Vv\nlogs_res = await client.get(\n    hypersync.preset_query_get_logs([\"0xYourContract\"], 17_000_000, 17_000_050)\n)\n\n```\n\n### `preset_query_logs(from_block, to_block)` [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#preset_query_logsfrom_block-to_block \"Direct link to preset_query_logsfrom_block-to_block\")\n\nFetches every log across the specified blocks.\n\n### `preset_query_logs_of_event(event_signature, from_block, to_block)` [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#preset_query_logs_of_eventevent_signature-from_block-to_block \"Direct link to preset_query_logs_of_eventevent_signature-from_block-to_block\")\n\nFetches logs for the specified event signature over the block range.\n\nClient libraries for other languages expose the same presets under similar names. See the Python and Node.js example repositories for more details.\n\nUse these helpers whenever you need a quick query without specifying field selections or joins manually.\n\n* * *\n\n## Using curl with HyperSync [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#using-curl-with-hypersync \"Direct link to Using curl with HyperSync\")\n\n**File:** `hypersync-curl-examples.md`\n\nThis guide demonstrates how to interact with HyperSync using direct HTTP requests via curl. These examples provide a quick way to explore HyperSync functionality without installing client libraries.\n\nRecommended Approach\n\nWe highly recommend trying these curl examples as they're super quick and easy to run directly in your terminal. It's one of the fastest ways to experience HyperSync's performance firsthand and see just how quickly you can retrieve blockchain data without any setup overhead. Simply copy, paste, and be amazed by the response speed!\n\nWhile curl requests are technically slower than our client libraries (since they use HTTP rather than binary data transfer protocols), they're still impressively fast and provide an excellent demonstration of HyperSync's capabilities without any installation requirements.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#table-of-contents-1 \"Direct link to Table of Contents\")\n\n1. Curl vs. Client Libraries\n2. Common Use Cases\n   - ERC-20 Transfers for an Address\n   - Contract Event Logs\n   - Blob Transactions\n   - Token Mint Events\n   - Address Transactions\n   - Transaction Status Filtering\n\n## Curl vs. Client Libraries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#curl-vs-client-libraries \"Direct link to Curl vs. Client Libraries\")\n\nWhen deciding whether to use curl commands or client libraries, consider the following comparison:\n\n### When to Use curl (JSON API) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#when-to-use-curl-json-api \"Direct link to When to Use curl (JSON API)\")\n\n- **Quick Prototyping**: Test endpoints and explore data structure without setup\n- **Simple Scripts**: Perfect for shell scripts and automation\n- **Language Independence**: When working with languages without HyperSync client libraries\n- **API Exploration**: When learning the HyperSync API capabilities\n\n### When to Use Client Libraries [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#when-to-use-client-libraries \"Direct link to When to Use Client Libraries\")\n\n- **Production Applications**: For stable, maintained codebases\n- **Complex Data Processing**: When working with large datasets or complex workflows\n- **Performance**: Client libraries offer automatic compression and pagination\n- **Error Handling**: Built-in retry mechanisms and better error reporting\n- **Data Formats**: Support for efficient formats like Apache Arrow\n\n## Common Use Cases [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#common-use-cases \"Direct link to Common Use Cases\")\n\n### Get All ERC-20 Transfers for an Address [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-all-erc-20-transfers-for-an-address \"Direct link to Get All ERC-20 Transfers for an Address\")\n\nThis example filters for all ERC-20 transfer events involving a specific address, either as sender or recipient. Feel free to swap your address into the example.\n\n**What this query does:**\n\n- Filters logs for the Transfer event signature (topic0)\n- Matches when the address appears in either topic1 (sender) or topic2 (recipient)\n- Also includes direct transactions to/from the address\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"from_block\": 0,\n    \"logs\": [\\\n        {\\\n            \"topics\": [\\\n                [\\\n                    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\\\n                ],\\\n                [],\\\n                [\\\n                    \"0x0000000000000000000000001e037f97d730Cc881e77F01E409D828b0bb14de0\"\\\n                ]\\\n            ]\\\n        },\\\n        {\\\n            \"topics\": [\\\n                [\\\n                    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\\\n                ],\\\n                [\\\n                    \"0x0000000000000000000000001e037f97d730Cc881e77F01E409D828b0bb14de0\"\\\n                ],\\\n                []\\\n            ]\\\n        }\\\n    ],\n    \"transactions\": [\\\n        {\\\n            \"from\": [\\\n                \"0x1e037f97d730Cc881e77F01E409D828b0bb14de0\"\\\n            ]\\\n        },\\\n        {\\\n            \"to\": [\\\n                \"0x1e037f97d730Cc881e77F01E409D828b0bb14de0\"\\\n            ]\\\n        }\\\n    ],\n    \"field_selection\": {\n        \"block\": [\\\n            \"number\",\\\n            \"timestamp\",\\\n            \"hash\"\\\n        ],\n        \"log\": [\\\n            \"block_number\",\\\n            \"log_index\",\\\n            \"transaction_index\",\\\n            \"data\",\\\n            \"address\",\\\n            \"topic0\",\\\n            \"topic1\",\\\n            \"topic2\",\\\n            \"topic3\"\\\n        ],\n        \"transaction\": [\\\n            \"block_number\",\\\n            \"transaction_index\",\\\n            \"hash\",\\\n            \"from\",\\\n            \"to\",\\\n            \"value\",\\\n            \"input\"\\\n        ]\n    }\n}'\n\n```\n\n### Get All Logs for a Smart Contract [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-all-logs-for-a-smart-contract \"Direct link to Get All Logs for a Smart Contract\")\n\nThis example retrieves all event logs emitted by a specific contract (USDC in this case).\n\n**Key points:**\n\n- Sets `from_block: 0` to scan from the beginning of the chain\n- Uses `next_block` in the response for pagination to fetch subsequent data\n- Includes relevant block, log, and transaction fields\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"from_block\": 0,\n    \"logs\": [\\\n        {\\\n            \"address\": [\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"]\\\n        }\\\n    ],\n    \"field_selection\": {\n        \"block\": [\\\n            \"number\",\\\n            \"timestamp\",\\\n            \"hash\"\\\n        ],\n        \"log\": [\\\n            \"block_number\",\\\n            \"log_index\",\\\n            \"transaction_index\",\\\n            \"data\",\\\n            \"address\",\\\n            \"topic0\",\\\n            \"topic1\",\\\n            \"topic2\",\\\n            \"topic3\"\\\n        ],\n        \"transaction\": [\\\n            \"block_number\",\\\n            \"transaction_index\",\\\n            \"hash\",\\\n            \"from\",\\\n            \"to\",\\\n            \"value\",\\\n            \"input\"\\\n        ]\n    }\n}'\n\n```\n\n### Get Blob Data for the Optimism Chain [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-blob-data-for-the-optimism-chain \"Direct link to Get Blob Data for the Optimism Chain\")\n\nThis example finds blob transactions used by the Optimism chain for data availability.\n\n**Key points:**\n\n- Starts at a relatively recent block (20,000,000)\n- Filters for transactions from the Optimism sequencer address\n- Specifically looks for type 3 (blob) transactions\n- Results can be used to retrieve the actual blob data from Ethereum\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"from_block\": 20000000,\n    \"transactions\": [\\\n        {\\\n            \"from\": [\"0x6887246668a3b87F54DeB3b94Ba47a6f63F32985\"],\\\n            \"to\": [\"0xFF00000000000000000000000000000000000010\"],\\\n            \"type\": [3]\\\n        }\\\n    ],\n    \"field_selection\": {\n        \"block\": [\\\n            \"number\",\\\n            \"timestamp\",\\\n            \"hash\"\\\n        ],\n        \"transaction\": [\\\n            \"block_number\",\\\n            \"transaction_index\",\\\n            \"hash\",\\\n            \"from\",\\\n            \"to\",\\\n            \"type\"\\\n        ]\n    }\n}'\n\n```\n\n### Get Mint USDC Events [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-mint-usdc-events \"Direct link to Get Mint USDC Events\")\n\nThis example identifies USDC token minting events.\n\n**How it works:**\n\n- Filters for the USDC contract address\n- Looks for Transfer events (topic0)\n- Specifically matches when topic1 (from address) is the zero address, indicating a mint\n- Returns detailed information about each mint event\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"from_block\": 0,\n    \"logs\": [\\\n        {\\\n            \"address\": [\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"],\\\n            \"topics\": [\\\n                [\\\n                    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\\\n                ],\\\n                [\\\n                    \"0x0000000000000000000000000000000000000000000000000000000000000000\"\\\n                ],\\\n                []\\\n            ]\\\n        }\\\n    ],\n    \"field_selection\": {\n        \"block\": [\\\n            \"number\",\\\n            \"timestamp\",\\\n            \"hash\"\\\n        ],\n        \"log\": [\\\n            \"block_number\",\\\n            \"log_index\",\\\n            \"transaction_index\",\\\n            \"data\",\\\n            \"address\",\\\n            \"topic0\",\\\n            \"topic1\",\\\n            \"topic2\",\\\n            \"topic3\"\\\n        ],\n        \"transaction\": [\\\n            \"block_number\",\\\n            \"transaction_index\",\\\n            \"hash\",\\\n            \"from\",\\\n            \"to\",\\\n            \"value\",\\\n            \"input\"\\\n        ]\n    }\n}'\n\n```\n\n### Get All Transactions for an Address [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-all-transactions-for-an-address \"Direct link to Get All Transactions for an Address\")\n\nThis example retrieves all transactions where a specific address is either the sender or receiver.\n\n**Implementation notes:**\n\n- Starts from a specific block (15,362,000) for efficiency\n- Uses two transaction filters in an OR relationship\n- Only includes essential fields in the response\n- Multiple queries may be needed for complete history\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"from_block\": 15362000,\n    \"transactions\": [\\\n        {\\\n            \"from\": [\"0xdb255746609baadd67ef44fc15b5e1d04befbca7\"]\\\n        },\\\n        {\\\n            \"to\": [\"0xdb255746609baadd67ef44fc15b5e1d04befbca7\"]\\\n        }\\\n    ],\n    \"field_selection\": {\n        \"block\": [\\\n            \"number\",\\\n            \"timestamp\",\\\n            \"hash\"\\\n        ],\n        \"transaction\": [\\\n            \"block_number\",\\\n            \"transaction_index\",\\\n            \"hash\",\\\n            \"from\",\\\n            \"to\"\\\n        ]\n    }\n}'\n\n```\n\n### Get Successful or Failed Transactions [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#get-successful-or-failed-transactions \"Direct link to Get Successful or Failed Transactions\")\n\nThis example shows how to filter transactions based on their status (successful or failed) for recent blocks.\n\n**How it works:**\n\n1. First, query the current chain height\n2. Calculate a starting point (current height minus 10)\n3. Query transactions with status=1 (successful) or status=0 (failed)\n\n```codeBlockLines_e6Vv\n# Get current height and calculate starting block\nheight=$((`curl https://eth.hypersync.xyz/height | jq .height` - 10))\n\n# Query successful transactions (change status to 0 for failed transactions)\ncurl --request POST \\\n  --url https://eth.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data \"{\n    \\\"from_block\\\": ${height},\n    \\\"transactions\\\": [\\\n        {\\\n            \\\"status\\\": 1\\\n        }\\\n    ],\n    \\\"field_selection\\\": {\n        \\\"block\\\": [\\\n            \\\"number\\\",\\\n            \\\"timestamp\\\",\\\n            \\\"hash\\\"\\\n        ],\n        \\\"transaction\\\": [\\\n            \\\"block_number\\\",\\\n            \\\"transaction_index\\\",\\\n            \\\"hash\\\",\\\n            \\\"from\\\",\\\n            \\\"to\\\"\\\n        ]\n    }\n  }\"\n\n```\n\n* * *\n\n## Api Tokens [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#api-tokens \"Direct link to Api Tokens\")\n\n**File:** `api-tokens.mdx`\n\n# API Tokens for HyperSync\n\n## Overview [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#overview \"Direct link to Overview\")\n\nAPI tokens provide authenticated access to HyperSync services, enabling enhanced capabilities and usage tracking.\n\nHyperSync implements **rate limits for requests without API tokens**. API tokens will be required from **3 November 2025**. Indexers deployed to our hosted service will have special access to HyperSync that does not require a custom API token.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#table-of-contents-2 \"Direct link to Table of Contents\")\n\n- Generating API Tokens\n- Implementation Guide\n- Security Best Practices\n\n## Generating API Tokens [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#generating-api-tokens \"Direct link to Generating API Tokens\")\n\nYou can generate API tokens through the Envio Dashboard:\n\n1. Visit [https://envio.dev/app/api-tokens](https://envio.dev/app/api-tokens)\n2. Sign in to your account (or create one if you don't have one)\n3. Follow the prompts to create a new token\n4. Copy and securely store your token\n\n## Implementation Guide [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#implementation-guide \"Direct link to Implementation Guide\")\n\nTo use an API token, pass it as a `bearer_token` when creating a HyperSync client:\n\n```codeBlockLines_e6Vv\nconst client = HypersyncClient.new({\n  url: \"https://eth.hypersync.xyz\",\n  bearerToken: process.env.HYPERSYNC_BEARER_TOKEN,\n});\n\n```\n\n```codeBlockLines_e6Vv\nclient = hypersync.HypersyncClient(hypersync.ClientConfig(\n    url=\"https://eth.hypersync.xyz\",\n    bearer_token=os.environ.get(\"HYPERSYNC_BEARER_TOKEN\")\n))\n\n```\n\n```codeBlockLines_e6Vv\nlet client = Client::new(ClientConfig {\n    bearer_token: Some(std::env::var(\"HYPERSYNC_BEARER_TOKEN\").unwrap_or_default()),\n    ..Default::default()\n})\n.unwrap();\n\n```\n\n## Understanding Usage [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#understanding-usage \"Direct link to Understanding Usage\")\n\nTo understand your current month's usage, visit [https://envio.dev/app/api-tokens](https://envio.dev/app/api-tokens). Usage is composed of two main components:\n\n- **Number of Requests**: The total count of API requests made.\n- **Credits**: A comprehensive calculation that takes into account multiple factors including data bandwidth, disk read operations, and other resource utilization metrics. This provides the most accurate representation of actual service usage. We're happy to provide more detailed breakdowns of the credit calculation upon request.\n\n## Security Best Practices [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#security-best-practices \"Direct link to Security Best Practices\")\n\nWhen working with API tokens:\n\n- **Never commit tokens to git repositories**\n- **Use environment variables** to store tokens instead of hardcoding\n- **Add token files like `.env` to your \\`.gitignore**\n- **Rotate tokens periodically** for enhanced security\n- **Limit token sharing** to only those who require access\n\n```codeBlockLines_e6Vv\n# Example .env file\nHYPERSYNC_BEARER_TOKEN=your_secret_token_here\n\n```\n\nThis approach keeps your tokens secure while making them available to your application at runtime.\n\n* * *\n\n## Hypersync Supported Networks [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hypersync-supported-networks \"Direct link to Hypersync Supported Networks\")\n\n**File:** `hypersync-supported-networks.md`\n\nnote\n\nWe are rapidly adding new supported networks. If you don't see your network here or would like us to add a network to HyperSync, pop us a message in our Discord.\n\ninfo\n\nThe Tier is the level of support (and therefore reliability) based on the infrastructure running the chain. We are actively working to make the tier distinctions more clear and transparent to our users.\n\nCurrently, tiers relate to various service quality aspects including:\n\n- Allocated resources and compute power\n- Query processing speed\n- Infrastructure redundancy\n- Backup frequency and retention\n- Multi-region availability\n- Priority for upgrades and new features\n- SLA guarantees\n\nWhile detailed tier specifications are still being finalized, we're committed to providing transparent service level information in the near future.\n\nIf you are a network operator or user and would like improved service support or to discuss upgrading a chain's level of support, please reach out to us in Discord.\n\n| Network Name | Network ID | URL | Tier | Supports Traces |\n| --- | --- | --- | --- | --- |\n| Abstract | 2741 | [https://abstract.hypersync.xyz](https://abstract.hypersync.xyz/) or [https://2741.hypersync.xyz](https://2741.hypersync.xyz/) | 🪨 |  |\n| Arbitrum | 42161 | [https://arbitrum.hypersync.xyz](https://arbitrum.hypersync.xyz/) or [https://42161.hypersync.xyz](https://42161.hypersync.xyz/) | 🥈 |  |\n| Arbitrum Nova | 42170 | [https://arbitrum-nova.hypersync.xyz](https://arbitrum-nova.hypersync.xyz/) or [https://42170.hypersync.xyz](https://42170.hypersync.xyz/) | 🥉 |  |\n| Arbitrum Sepolia | 421614 | [https://arbitrum-sepolia.hypersync.xyz](https://arbitrum-sepolia.hypersync.xyz/) or [https://421614.hypersync.xyz](https://421614.hypersync.xyz/) | 🎒 |  |\n| Aurora | 1313161554 | [https://aurora.hypersync.xyz](https://aurora.hypersync.xyz/) or [https://1313161554.hypersync.xyz](https://1313161554.hypersync.xyz/) | 🪨 |  |\n| Aurora Turbo | 1313161567 | [https://aurora-turbo.hypersync.xyz](https://aurora-turbo.hypersync.xyz/) or [https://1313161567.hypersync.xyz](https://1313161567.hypersync.xyz/) | 🪨 |  |\n| Avalanche | 43114 | [https://avalanche.hypersync.xyz](https://avalanche.hypersync.xyz/) or [https://43114.hypersync.xyz](https://43114.hypersync.xyz/) | 🥉 |  |\n| Base | 8453 | [https://base.hypersync.xyz](https://base.hypersync.xyz/) or [https://8453.hypersync.xyz](https://8453.hypersync.xyz/) | 🏅 |  |\n| Base Sepolia | 84532 | [https://base-sepolia.hypersync.xyz](https://base-sepolia.hypersync.xyz/) or [https://84532.hypersync.xyz](https://84532.hypersync.xyz/) | 🎒 |  |\n| Berachain | 80094 | [https://berachain.hypersync.xyz](https://berachain.hypersync.xyz/) or [https://80094.hypersync.xyz](https://80094.hypersync.xyz/) | 🥉 |  |\n| Blast | 81457 | [https://blast.hypersync.xyz](https://blast.hypersync.xyz/) or [https://81457.hypersync.xyz](https://81457.hypersync.xyz/) | 🥉 |  |\n| Blast Sepolia | 168587773 | [https://blast-sepolia.hypersync.xyz](https://blast-sepolia.hypersync.xyz/) or [https://168587773.hypersync.xyz](https://168587773.hypersync.xyz/) | 🎒 |  |\n| Boba | 288 | [https://boba.hypersync.xyz](https://boba.hypersync.xyz/) or [https://288.hypersync.xyz](https://288.hypersync.xyz/) | 🪨 |  |\n| Bsc | 56 | [https://bsc.hypersync.xyz](https://bsc.hypersync.xyz/) or [https://56.hypersync.xyz](https://56.hypersync.xyz/) | 🥉 |  |\n| Bsc Testnet | 97 | [https://bsc-testnet.hypersync.xyz](https://bsc-testnet.hypersync.xyz/) or [https://97.hypersync.xyz](https://97.hypersync.xyz/) | 🎒 |  |\n| Celo | 42220 | [https://celo.hypersync.xyz](https://celo.hypersync.xyz/) or [https://42220.hypersync.xyz](https://42220.hypersync.xyz/) | 🪨 |  |\n| Chainweb Testnet 20 | 5920 | [https://chainweb-testnet-20.hypersync.xyz](https://chainweb-testnet-20.hypersync.xyz/) or [https://5920.hypersync.xyz](https://5920.hypersync.xyz/) | 🪨 |  |\n| Chainweb Testnet 21 | 5921 | [https://chainweb-testnet-21.hypersync.xyz](https://chainweb-testnet-21.hypersync.xyz/) or [https://5921.hypersync.xyz](https://5921.hypersync.xyz/) | 🪨 |  |\n| Chainweb Testnet 22 | 5922 | [https://chainweb-testnet-22.hypersync.xyz](https://chainweb-testnet-22.hypersync.xyz/) or [https://5922.hypersync.xyz](https://5922.hypersync.xyz/) | 🪨 |  |\n| Chainweb Testnet 23 | 5923 | [https://chainweb-testnet-23.hypersync.xyz](https://chainweb-testnet-23.hypersync.xyz/) or [https://5923.hypersync.xyz](https://5923.hypersync.xyz/) | 🪨 |  |\n| Chainweb Testnet 24 | 5924 | [https://chainweb-testnet-24.hypersync.xyz](https://chainweb-testnet-24.hypersync.xyz/) or [https://5924.hypersync.xyz](https://5924.hypersync.xyz/) | 🪨 |  |\n| Chiliz | 88888 | [https://chiliz.hypersync.xyz](https://chiliz.hypersync.xyz/) or [https://88888.hypersync.xyz](https://88888.hypersync.xyz/) | 🪨 |  |\n| Citrea Testnet | 5115 | [https://citrea-testnet.hypersync.xyz](https://citrea-testnet.hypersync.xyz/) or [https://5115.hypersync.xyz](https://5115.hypersync.xyz/) | 🪨 |  |\n| Curtis | 33111 | [https://curtis.hypersync.xyz](https://curtis.hypersync.xyz/) or [https://33111.hypersync.xyz](https://33111.hypersync.xyz/) | 🪨 |  |\n| Cyber | 7560 | [https://cyber.hypersync.xyz](https://cyber.hypersync.xyz/) or [https://7560.hypersync.xyz](https://7560.hypersync.xyz/) | 🪨 |  |\n| Damon | 341 | [https://damon.hypersync.xyz](https://damon.hypersync.xyz/) or [https://341.hypersync.xyz](https://341.hypersync.xyz/) | 🪨 |  |\n| Eth Traces | 1 | [https://eth-traces.hypersync.xyz](https://eth-traces.hypersync.xyz/) or [https://1-traces.hypersync.xyz](https://1-traces.hypersync.xyz/) | 🏅 |  |\n| Ethereum Mainnet | 1 | [https://eth.hypersync.xyz](https://eth.hypersync.xyz/) or [https://1.hypersync.xyz](https://1.hypersync.xyz/) | 🏅 |  |\n| Fantom | 250 | [https://fantom.hypersync.xyz](https://fantom.hypersync.xyz/) or [https://250.hypersync.xyz](https://250.hypersync.xyz/) | 🪨 |  |\n| Flare | 14 | [https://flare.hypersync.xyz](https://flare.hypersync.xyz/) or [https://14.hypersync.xyz](https://14.hypersync.xyz/) | 🪨 |  |\n| Fraxtal | 252 | [https://fraxtal.hypersync.xyz](https://fraxtal.hypersync.xyz/) or [https://252.hypersync.xyz](https://252.hypersync.xyz/) | 🪨 |  |\n| Fuji | 43113 | [https://fuji.hypersync.xyz](https://fuji.hypersync.xyz/) or [https://43113.hypersync.xyz](https://43113.hypersync.xyz/) | 🎒 |  |\n| Gnosis | 100 | [https://gnosis.hypersync.xyz](https://gnosis.hypersync.xyz/) or [https://100.hypersync.xyz](https://100.hypersync.xyz/) | 🏅 |  |\n| Gnosis Chiado | 10200 | [https://gnosis-chiado.hypersync.xyz](https://gnosis-chiado.hypersync.xyz/) or [https://10200.hypersync.xyz](https://10200.hypersync.xyz/) | 🎒 |  |\n| Gnosis Traces | 100 | [https://gnosis-traces.hypersync.xyz](https://gnosis-traces.hypersync.xyz/) or [https://100-traces.hypersync.xyz](https://100-traces.hypersync.xyz/) | 🥉 |  |\n| Harmony Shard 0 | 1666600000 | [https://harmony-shard-0.hypersync.xyz](https://harmony-shard-0.hypersync.xyz/) or [https://1666600000.hypersync.xyz](https://1666600000.hypersync.xyz/) | 🪨 |  |\n| Holesky | 17000 | [https://holesky.hypersync.xyz](https://holesky.hypersync.xyz/) or [https://17000.hypersync.xyz](https://17000.hypersync.xyz/) | 🎒 |  |\n| Hyperliquid | 999 | [https://hyperliquid.hypersync.xyz](https://hyperliquid.hypersync.xyz/) or [https://999.hypersync.xyz](https://999.hypersync.xyz/) | 🪨 |  |\n| Ink | 57073 | [https://ink.hypersync.xyz](https://ink.hypersync.xyz/) or [https://57073.hypersync.xyz](https://57073.hypersync.xyz/) | 🪨 |  |\n| Kroma | 255 | [https://kroma.hypersync.xyz](https://kroma.hypersync.xyz/) or [https://255.hypersync.xyz](https://255.hypersync.xyz/) | 🪨 |  |\n| Linea | 59144 | [https://linea.hypersync.xyz](https://linea.hypersync.xyz/) or [https://59144.hypersync.xyz](https://59144.hypersync.xyz/) | 🥉 |  |\n| Lisk | 1135 | [https://lisk.hypersync.xyz](https://lisk.hypersync.xyz/) or [https://1135.hypersync.xyz](https://1135.hypersync.xyz/) | 🪨 |  |\n| Lukso | 42 | [https://lukso.hypersync.xyz](https://lukso.hypersync.xyz/) or [https://42.hypersync.xyz](https://42.hypersync.xyz/) | 🪨 |  |\n| Lukso Testnet | 4201 | [https://lukso-testnet.hypersync.xyz](https://lukso-testnet.hypersync.xyz/) or [https://4201.hypersync.xyz](https://4201.hypersync.xyz/) | 🎒 |  |\n| Manta | 169 | [https://manta.hypersync.xyz](https://manta.hypersync.xyz/) or [https://169.hypersync.xyz](https://169.hypersync.xyz/) | 🪨 |  |\n| Mantle | 5000 | [https://mantle.hypersync.xyz](https://mantle.hypersync.xyz/) or [https://5000.hypersync.xyz](https://5000.hypersync.xyz/) | 🪨 |  |\n| Megaeth Testnet | 6342 | [https://megaeth-testnet.hypersync.xyz](https://megaeth-testnet.hypersync.xyz/) or [https://6342.hypersync.xyz](https://6342.hypersync.xyz/) | 🥈 |  |\n| Merlin | 4200 | [https://merlin.hypersync.xyz](https://merlin.hypersync.xyz/) or [https://4200.hypersync.xyz](https://4200.hypersync.xyz/) | 🪨 |  |\n| Metall2 | 1750 | [https://metall2.hypersync.xyz](https://metall2.hypersync.xyz/) or [https://1750.hypersync.xyz](https://1750.hypersync.xyz/) | 🪨 |  |\n| Mev Commit | 17864 | [https://mev-commit.hypersync.xyz](https://mev-commit.hypersync.xyz/) or [https://17864.hypersync.xyz](https://17864.hypersync.xyz/) | 🪨 |  |\n| Mode | 34443 | [https://mode.hypersync.xyz](https://mode.hypersync.xyz/) or [https://34443.hypersync.xyz](https://34443.hypersync.xyz/) | 🪨 |  |\n| Monad Testnet | 10143 | [https://monad-testnet.hypersync.xyz](https://monad-testnet.hypersync.xyz/) or [https://10143.hypersync.xyz](https://10143.hypersync.xyz/) | 🏅 |  |\n| Moonbase Alpha | 1287 | [https://moonbase-alpha.hypersync.xyz](https://moonbase-alpha.hypersync.xyz/) or [https://1287.hypersync.xyz](https://1287.hypersync.xyz/) | 🪨 |  |\n| Moonbeam | 1284 | [https://moonbeam.hypersync.xyz](https://moonbeam.hypersync.xyz/) or [https://1284.hypersync.xyz](https://1284.hypersync.xyz/) | 🪨 |  |\n| Morph | 2818 | [https://morph.hypersync.xyz](https://morph.hypersync.xyz/) or [https://2818.hypersync.xyz](https://2818.hypersync.xyz/) | 🪨 |  |\n| Opbnb | 204 | [https://opbnb.hypersync.xyz](https://opbnb.hypersync.xyz/) or [https://204.hypersync.xyz](https://204.hypersync.xyz/) | 🪨 |  |\n| Optimism | 10 | [https://optimism.hypersync.xyz](https://optimism.hypersync.xyz/) or [https://10.hypersync.xyz](https://10.hypersync.xyz/) | 🏅 |  |\n| Optimism Sepolia | 11155420 | [https://optimism-sepolia.hypersync.xyz](https://optimism-sepolia.hypersync.xyz/) or [https://11155420.hypersync.xyz](https://11155420.hypersync.xyz/) | 🎒 |  |\n| Plasma | 9745 | [https://plasma.hypersync.xyz](https://plasma.hypersync.xyz/) or [https://9745.hypersync.xyz](https://9745.hypersync.xyz/) | 🥉 |  |\n| Plume | 98866 | [https://plume.hypersync.xyz](https://plume.hypersync.xyz/) or [https://98866.hypersync.xyz](https://98866.hypersync.xyz/) | 🪨 |  |\n| Polygon | 137 | [https://polygon.hypersync.xyz](https://polygon.hypersync.xyz/) or [https://137.hypersync.xyz](https://137.hypersync.xyz/) | 🥈 |  |\n| Polygon Amoy | 80002 | [https://polygon-amoy.hypersync.xyz](https://polygon-amoy.hypersync.xyz/) or [https://80002.hypersync.xyz](https://80002.hypersync.xyz/) | 🥉 |  |\n| Polygon zkEVM | 1101 | [https://polygon-zkevm.hypersync.xyz](https://polygon-zkevm.hypersync.xyz/) or [https://1101.hypersync.xyz](https://1101.hypersync.xyz/) | 🪨 |  |\n| Rootstock | 30 | [https://rootstock.hypersync.xyz](https://rootstock.hypersync.xyz/) or [https://30.hypersync.xyz](https://30.hypersync.xyz/) | 🪨 |  |\n| Saakuru | 7225878 | [https://saakuru.hypersync.xyz](https://saakuru.hypersync.xyz/) or [https://7225878.hypersync.xyz](https://7225878.hypersync.xyz/) | 🪨 |  |\n| Scroll | 534352 | [https://scroll.hypersync.xyz](https://scroll.hypersync.xyz/) or [https://534352.hypersync.xyz](https://534352.hypersync.xyz/) | 🪨 |  |\n| Sentient Testnet | 1184075182 | [https://sentient-testnet.hypersync.xyz](https://sentient-testnet.hypersync.xyz/) or [https://1184075182.hypersync.xyz](https://1184075182.hypersync.xyz/) | 🪨 |  |\n| Sepolia | 11155111 | [https://sepolia.hypersync.xyz](https://sepolia.hypersync.xyz/) or [https://11155111.hypersync.xyz](https://11155111.hypersync.xyz/) | 🎒 |  |\n| Shimmer Evm | 148 | [https://shimmer-evm.hypersync.xyz](https://shimmer-evm.hypersync.xyz/) or [https://148.hypersync.xyz](https://148.hypersync.xyz/) | 🪨 |  |\n| Soneium | 1868 | [https://soneium.hypersync.xyz](https://soneium.hypersync.xyz/) or [https://1868.hypersync.xyz](https://1868.hypersync.xyz/) | 🪨 |  |\n| Sonic | 146 | [https://sonic.hypersync.xyz](https://sonic.hypersync.xyz/) or [https://146.hypersync.xyz](https://146.hypersync.xyz/) | 🪨 |  |\n| Sophon | 50104 | [https://sophon.hypersync.xyz](https://sophon.hypersync.xyz/) or [https://50104.hypersync.xyz](https://50104.hypersync.xyz/) | 🪨 |  |\n| Sophon Testnet | 531050104 | [https://sophon-testnet.hypersync.xyz](https://sophon-testnet.hypersync.xyz/) or [https://531050104.hypersync.xyz](https://531050104.hypersync.xyz/) | 🎒 |  |\n| Superseed | 5330 | [https://superseed.hypersync.xyz](https://superseed.hypersync.xyz/) or [https://5330.hypersync.xyz](https://5330.hypersync.xyz/) | 🪨 |  |\n| Swell | 1923 | [https://swell.hypersync.xyz](https://swell.hypersync.xyz/) or [https://1923.hypersync.xyz](https://1923.hypersync.xyz/) | 🪨 |  |\n| Tangle | 5845 | [https://tangle.hypersync.xyz](https://tangle.hypersync.xyz/) or [https://5845.hypersync.xyz](https://5845.hypersync.xyz/) | 🪨 |  |\n| Taraxa | 841 | [https://taraxa.hypersync.xyz](https://taraxa.hypersync.xyz/) or [https://841.hypersync.xyz](https://841.hypersync.xyz/) | 🥉 |  |\n| Unichain | 130 | [https://unichain.hypersync.xyz](https://unichain.hypersync.xyz/) or [https://130.hypersync.xyz](https://130.hypersync.xyz/) | 🪨 |  |\n| Worldchain | 480 | [https://worldchain.hypersync.xyz](https://worldchain.hypersync.xyz/) or [https://480.hypersync.xyz](https://480.hypersync.xyz/) | 🪨 |  |\n| Xdc | 50 | [https://xdc.hypersync.xyz](https://xdc.hypersync.xyz/) or [https://50.hypersync.xyz](https://50.hypersync.xyz/) | 🥈 |  |\n| Xdc Testnet | 51 | [https://xdc-testnet.hypersync.xyz](https://xdc-testnet.hypersync.xyz/) or [https://51.hypersync.xyz](https://51.hypersync.xyz/) | 🎒 |  |\n| Zeta | 7000 | [https://zeta.hypersync.xyz](https://zeta.hypersync.xyz/) or [https://7000.hypersync.xyz](https://7000.hypersync.xyz/) | 🪨 |  |\n| Zircuit | 48900 | [https://zircuit.hypersync.xyz](https://zircuit.hypersync.xyz/) or [https://48900.hypersync.xyz](https://48900.hypersync.xyz/) | 🪨 |  |\n| ZKsync | 324 | [https://zksync.hypersync.xyz](https://zksync.hypersync.xyz/) or [https://324.hypersync.xyz](https://324.hypersync.xyz/) | 🥉 |  |\n| Zora | 7777777 | [https://zora.hypersync.xyz](https://zora.hypersync.xyz/) or [https://7777777.hypersync.xyz](https://7777777.hypersync.xyz/) | 🪨 |  |\n\n* * *\n\n## Analyzing All Transactions To and From an Address [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#analyzing-all-transactions-to-and-from-an-address \"Direct link to Analyzing All Transactions To and From an Address\")\n\n**File:** `tutorial-address-transactions.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#introduction \"Direct link to Introduction\")\n\nUnderstanding all transactions to and from an address is an interesting use case. Traditionally extracting this information would be very difficult with an RPC. In this tutorial, we'll introduce you to the evm-address-summary tool, which uses HyperSync to efficiently extract all transactions associated with a specific address.\n\n## About evm-address-summary [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#about-evm-address-summary \"Direct link to About evm-address-summary\")\n\nThe evm-address-summary repository contains a collection of scripts designed to get activity related to an address. These scripts leverage HyperSync's efficient data access to make complex address analysis simple and quick.\n\n**GitHub Repository**: [https://github.com/enviodev/evm-address-summary](https://github.com/enviodev/evm-address-summary)\n\n## Available Scripts [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#available-scripts \"Direct link to Available Scripts\")\n\nThe repository offers several specialized scripts:\n\n1. **All Transfers**: This script scans the entire blockchain (from block 0 to the present) and retrieves all relevant transactions for the given address. It iterates through these transactions and sums up their values to calculate aggregates for each token.\n\n2. **NFT Holders**: This script scans the entire blockchain and retrieves all token transfer events for an ERC721 address. It records all the owners of these tokens and how many tokens they have traded in the past.\n\n3. **ERC20 Transfers and Approvals**: This script scans the blockchain and retrieves all ERC20 transfer and approval events for the given address.\n\n\nIt calculates the following:\n\n- **Token balances**: Summing up all incoming and outgoing transfers for each token\n- **Token transaction counts**: Counting the number of incoming and outgoing transactions for each token\n- **Approvals**: Tracking approvals for each token, including the spender and approved amount\n\n## Quick Start Guide [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#quick-start-guide \"Direct link to Quick Start Guide\")\n\n### Prerequisites [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#prerequisites \"Direct link to Prerequisites\")\n\n- Node.js (v16 or newer)\n- pnpm (recommended)\n- Git\n\n### Basic Setup [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#basic-setup \"Direct link to Basic Setup\")\n\n1. **Clone the Repository**\n\n\n\n\n\n```codeBlockLines_e6Vv\ngit clone https://github.com/enviodev/evm-address-summary.git\ncd evm-address-summary\n\n```\n\n2. **Install Dependencies**\n\n\n\n\n\n```codeBlockLines_e6Vv\npnpm install\n\n```\n\n3. **Run a Script** (example with all-transfers)\n\n\n\n\n\n```codeBlockLines_e6Vv\npnpm run all-transfers 0xYourAddressHere\n\n```\n\n\nFor complete details on all available scripts, their usage, and example outputs, refer to the project README.\n\n## Customizing Network Endpoints [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#customizing-network-endpoints \"Direct link to Customizing Network Endpoints\")\n\nThe scripts work with any network supported by HyperSync. To change networks, edit the `hyperSyncEndpoint` in the appropriate config file:\n\n```codeBlockLines_e6Vv\n// For Ethereum Mainnet\nexport const hyperSyncEndpoint = \"https://eth.hypersync.xyz\";\n\n```\n\nFor a complete list of supported networks, see our HyperSync Supported Networks documentation.\n\n## Practical Use Cases [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#practical-use-cases \"Direct link to Practical Use Cases\")\n\nOne powerful application is measuring value at risk for any address, similar to revoke.cash. You can quickly scan an address to find all approvals and transfers to easily determine any outstanding approvals on any token. This helps identify potential security risks from forgotten token approvals.\n\nOther use cases include:\n\n- Portfolio tracking and analysis\n- Auditing transaction history\n- Research on token holder behavior\n- Monitoring NFT ownership changes\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#next-steps-3 \"Direct link to Next Steps\")\n\n- Check out the evm-address-summary repository for full documentation\n- Explore the source code to understand how HyperSync is used for data retrieval\n- Try modifying the scripts for your specific use cases\n- Learn more about HyperSync's capabilities for blockchain data analysis\n\nFor any questions or support, join our Discord community or create an issue on the GitHub repository.\n\n* * *\n\n## Hyperfuel [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#hyperfuel \"Direct link to Hyperfuel\")\n\n**File:** `HyperFuel/hyperfuel.md`\n\nHyperSync is a high-performance data node and accelerated data query layer that powers Envio’s Indexing framework, HyperIndex, for up to 1000x faster data retrieval than standard RPC methods.\n\nHyperFuel is HyperSync adapted for the Fuel Network and is exposed as a low-level API for developers and data analysts to create flexible, high-speed queries for all fuel data.\n\nUsers can interact with the HyperFuel in Rust, Python, NodeJS clients, or directly via the JSON API to extract data into parquet files, arrow format, or as typed data. Client examples are listed furhter below.\n\nUsing HyperFuel, application developers can easily sync and search large datasets in a few minutes. HyperFuel is an ideal solution for indexers, block explorers, data analysts, bridges, and other applications or use cases focused on performance.\n\nYou can integrate with HyperFuel using any of our clients:\n\n- Rust: [https://github.com/enviodev/hyperfuel-client-rust](https://github.com/enviodev/hyperfuel-client-rust)\n- Python: [https://github.com/enviodev/hyperfuel-client-python](https://github.com/enviodev/hyperfuel-client-python)\n- Nodejs: [https://github.com/enviodev/hyperfuel-client-node](https://github.com/enviodev/hyperfuel-client-node)\n- JSON API: [https://github.com/enviodev/hyperfuel-json-api](https://github.com/enviodev/hyperfuel-json-api)\n\ninfo\n\nHyperFuel supports Fuel mainnet and testnet:\nMainnet: [https://fuel.hypersync.xyz](https://fuel.hypersync.xyz/)\nTestnet: [https://fuel-testnet.hypersync.xyz](https://fuel-testnet.hypersync.xyz/)\n\n## Example usage [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#example-usage \"Direct link to Example usage\")\n\nBelow is an example of a Hyperfuel query in each of our clients searching the first 1,300,000 blocks for all `input` objects of a specific `asset-id`. This example returns 10,543 inputs in around 100ms - not including latency.\n\n## Rust (repo) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#rust-repo \"Direct link to Rust (repo)\")\n\n```codeBlockLines_e6Vv\nuse std::num::NonZeroU64;\n\nuse hyperfuel_client::{Client, Config};\nuse hyperfuel_net_types::Query;\nuse url::Url;\n\n#[tokio::main]\nasync fn main() {\n    let client_config = Config {\n        url: Url::parse(\"https://fuel-testnet.hypersync.xyz\").unwrap(),\n        bearer_token: None,\n        http_req_timeout_millis: NonZeroU64::new(30000).unwrap(),\n    };\n    let client = Client::new(client_config).unwrap();\n\n    // Construct query in json.  Can also construct it as a typed struct (see predicate-root example)\n    let query: Query = serde_json::from_value(serde_json::json!({\n        // start query from block 0\n        \"from_block\": 0,\n        // if to_block is not set, query runs to the end of the chain\n        \"to_block\":   1300000,\n        // load inputs that have `asset_id` = 0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\n        \"inputs\": [\\\n            {\\\n            \"asset_id\": [\"0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\"]\\\n            }\\\n        ],\n        // fields we want returned from loaded inputs\n        \"field_selection\": {\n            \"input\": [\\\n                \"tx_id\",\\\n                \"block_height\",\\\n                \"input_type\",\\\n                \"utxo_id\",\\\n                \"owner\",\\\n                \"amount\",\\\n                \"asset_id\"\\\n            ]\n        }\n    }))\n    .unwrap();\n\n    let res = client.get_selected_data(&query).await.unwrap();\n\n    println!(\"inputs: {:?}\", res.data.inputs);\n}\n\n```\n\n## Python (repo) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#python-repo \"Direct link to Python (repo)\")\n\n```codeBlockLines_e6Vv\nimport hyperfuel\nfrom hyperfuel import InputField\nimport asyncio\n\nasync def main():\n    client = hyperfuel.HyperfuelClient()\n\n    query = hyperfuel.Query(\n        # start query from block 0\n        from_block=0,\n        # if to_block is not set, query runs to the end of the chain\n        to_block = 1300000,\n        # load inputs that have `asset_id` = 0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\n        inputs=[\\\n            hyperfuel.InputSelection(\\\n                asset_id=[\"0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\"]\\\n            )\\\n        ],\n        # what data we want returned from the inputs we loaded\n        field_selection=hyperfuel.FieldSelection(\n            input=[\\\n                InputField.TX_ID,\\\n                InputField.BLOCK_HEIGHT,\\\n                InputField.INPUT_TYPE,\\\n                InputField.UTXO_ID,\\\n                InputField.OWNER,\\\n                InputField.AMOUNT,\\\n                InputField.ASSET_ID,\\\n            ]\n        )\n    )\n\n    res = await client.get_selected_data(query)\n\n    print(\"inputs: \" + str(res.data.inputs))\n\nasyncio.run(main())\n\n```\n\n## Node Js (repo) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#node-js-repo \"Direct link to Node Js (repo)\")\n\n```codeBlockLines_e6Vv\n\nasync function main() {\n  const client = HyperfuelClient.new({\n    url: \"https://fuel-testnet.hypersync.xyz\",\n  });\n\n  const query: Query = {\n    // start query from block 0\n    fromBlock: 0,\n    // if to_block is not set, query runs to the end of the chain\n    toBlock: 1300000,\n    // load inputs that have `asset_id` = 0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\n    inputs: [\\\n      {\\\n        assetId: [\\\n          \"0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\",\\\n        ],\\\n      },\\\n    ],\n    // fields we want returned from loaded inputs\n    fieldSelection: {\n      input: [\\\n        \"tx_id\",\\\n        \"block_height\",\\\n        \"input_type\",\\\n        \"utxo_id\",\\\n        \"owner\",\\\n        \"amount\",\\\n        \"asset_id\",\\\n      ],\n    },\n  };\n\n  const res = await client.getSelectedData(query);\n\n  console.log(`inputs: ${JSON.stringify(res.data.inputs)}`);\n}\n\nmain();\n\n```\n\n## Json Api (repo) [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#json-api-repo \"Direct link to Json Api (repo)\")\n\n```codeBlockLines_e6Vv\ncurl --request POST \\\n  --url https://fuel-testnet.hypersync.xyz/query \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n        \"from_block\": 0,\n        \"to_block\":   1300000,\n        \"inputs\": [\\\n            {\\\n            \"asset_id\": [\"0x2a0d0ed9d2217ec7f32dcd9a1902ce2a66d68437aeff84e3a3cc8bebee0d2eea\"]\\\n            }\\\n        ],\n        \"field_selection\": {\n            \"input\": [\\\n                \"tx_id\",\\\n                \"block_height\",\\\n                \"input_type\",\\\n                \"utxo_id\",\\\n                \"owner\",\\\n                \"amount\",\\\n                \"asset_id\"\\\n            ]\n        }\n    }'\n\n```\n\n* * *\n\n## Query Structure [​](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete\\#query-structure-1 \"Direct link to Query Structure\")\n\n**File:** `HyperFuel/hyperfuel-query.md`\n\nThis section is dedicated to giving an exhaustive list of all the fields and query parameters of a HyperFuel query. HyperFuel is extremely powerful but learning how to craft queries can take some practice. It is recommended to look at the examples and reference this page. HyperFuel query structure is the same across clients.\n\n# Top-level query structure\n\nIllustrated as json\n\n```codeBlockLines_e6Vv\n{\n    // The block to start the query from\n    \"from_block\": Number,\n\n    // The block to end the query at. If not specified, the query will go until the\n    //  end of data. Exclusive, the returned range will be [from_block..to_block).\\\n    //\\\n    // The query will return before it reaches this target block if it hits the time limit\\\n    //  configured on the server. The user should continue their query by putting the\\\n    //  next_block field in the response into from_block field of their next query. This implements\\\n    //  pagination.\\\n    \"to_block\": Number, // Optional, defaults to latest block\\\n\\\n    // List of receipt selections, the query will return receipts that match any of these selections.\\\n    // All selections have an OR relationship with each other.\\\n    \"receipts\": [{ReceiptSelection}], // Optional\\\n\\\n    // List of input selections, the query will return inputs that match any of these selections.\\\n    // All selections have an OR relationship with each other.\\\n    \"inputs\": [{InputSelection}], // Optional\\\n\\\n    // List of output selections, the query will return outputs that match any of these selections.\\\n    // All selections have an OR relationship with each other.\\\n    \"outputs\": [{OutputSelection}], // Optional\\\n\\\n    // Whether to include all blocks regardless of whether they match a receipt, input, or output selection.  Normally\\\n    // The server will return only the blocks that are related to the receipts, inputs, or outputs in the response. But if this\\\n    //  is set to true, the server will return data for all blocks in the requested range from_block, to_block).\\\n    \"include_all_blocks\": bool, // Optional, defaults to false\\\n\\\n    // The user selects which fields they want returned. Requesting fewer fields will improve\\\n    //  query execution time and reduce the payload size so the user should always use a minimal number of fields.\\\n    \"field_selection\": {FieldSelection},\\\n\\\n    // Maximum number of blocks that should be returned, the server might return more blocks than this number but\\\n    //It won't overshoot by too much.\\\n    \"max_num_blocks\": Number, // Optional, defaults to no maximum\\\n}\\\n\\\n```\\\n\\\n# ReceiptSelection\\\n\\\nThe query takes an array of ReceiptSelection objects and returns receipts that match any of the selections. All fields are optional.\\\nBelow is an exhaustive list of all fields in a ReceiptSelection JSON object. Reference the \\[Fuel docs on receipts for field explanations.\\\n\\\n```codeBlockLines_e6Vv\\\n{\\\n    // address that emitted the receipt\\\n    \"root_contract_id\": [String],\\\n\\\n    // The recipient address\\\n    \"to_address\": [String],\\\n\\\n    // The asset id of the coins transferred.\\\n    \"asset_id\": [String],\\\n\\\n    // the type of receipt\\\n    // 0 = Call\\\n    // 1 = Return,\\\n    // 2 = ReturnData,\\\n    // 3 = Panic,\\\n    // 4 = Revert,\\\n    // 5 = Log,\\\n    // 6 = LogData,\\\n    // 7 = Transfer,\\\n    // 8 = TransferOut,\\\n    // 9 = ScriptResult,\\\n    // 10 = MessageOut,\\\n    // 11 = Mint,\\\n    // 12 = Burn,\\\n    \"receipt_type\": [Number],\\\n\\\n    // The address of the message sender.\\\n    \"sender\": [String],\\\n\\\n    // The address of the message recipient.\\\n    \"recipient\": [String],\\\n\\\n    // The contract id of the current context is in an internal context. null otherwise\\\n    \"contract_id\": [String],\\\n\\\n    // receipt register values.\\\n    \"ra\": [Number],\\\n    \"rb\": [Number],\\\n    \"rc\": [Number],\\\n    \"rd\": [Number],\\\n\\\n    // the status of the transaction that the receipt originated from\\\n    // 1 = Success\\\n    // 3 = Failure\\\n    \"tx_status\": [Number],\\\n\\\n    // the type of the transaction that the receipt originated from\\\n    // 0 = script\\\n    // 1 = create\\\n    // 2 = mint\\\n    // 3 = upgrade\\\n    // 4 = upload\\\n    \"tx_type\": [Number]\\\n}\\\n\\\n```\\\n\\\n# InputSelection\\\n\\\nThe query takes an array of InputSelection objects and returns inputs that match any of the selections. All fields are optional.\\\nBelow is an exhaustive list of all fields in an InputSelection JSON object. Reference the Fuel docs on inputs for field explanations.\\\n\\\n```codeBlockLines_e6Vv\\\n{\\\n    // The owning address or predicate root.\\\n    \"owner\": [String],\\\n\\\n    // The asset ID of the coins.\\\n    \"asset_id\": [String],\\\n\\\n    // The input contract.\\\n    \"contract\": [String],\\\n\\\n    // The sender address of the message.\\\n    \"sender\": [String],\\\n\\\n    // The recipient address of the message.\\\n    \"recipient\": [String],\\\n\\\n    // The type of input\\\n    // 0 = InputCoin,\\\n    // 1 = InputContract,\\\n    // 2 = InputMessage,\\\n    \"input_type\": [Number],\\\n\\\n    // the status of the transaction that the input originated from\\\n    // 1 = Success\\\n    // 3 = Failure\\\n    \"tx_status\": [Number],\\\n\\\n    // the type of the transaction that the input originated from\\\n    // 0 = script\\\n    // 1 = create\\\n    // 2 = mint\\\n    // 3 = upgrade\\\n    // 4 = upload\\\n    \"tx_type\": [Number]\\\n}\\\n\\\n```\\\n\\\n# OutputSelection\\\n\\\nThe query takes an array of OutputSelection objects and returns outputs that match any of the selections. All fields are optional.\\\nBelow is an exhaustive list of all fields in an OutputSelection JSON object. Reference the Fuel docs on outputs for field explanations.\\\n\\\n```codeBlockLines_e6Vv\\\n{\\\n    // The address the coins were sent to.\\\n    \"to\": [String],\\\n\\\n    // The asset id for the coins sent.\\\n    \"asset_id\": [String],\\\n\\\n    // The contract that was created.\\\n    \"contract\": [String],\\\n\\\n    // the type of output\\\n    // 0 = CoinOutput,\\\n    // 1 = ContractOutput,\\\n    // 2 = ChangeOutput,\\\n    // 3 = VariableOutput,\\\n    // 4 = ContractCreated,\\\n    \"output_type\": [Number],\\\n\\\n    // the status of the transaction that the input originated from\\\n    // 1 = Success\\\n    // 3 = Failure\\\n    \"tx_status\": [Number],\\\n\\\n    // the type of the transaction that the input originated from\\\n    // 0 = script\\\n    // 1 = create\\\n    // 2 = mint\\\n    // 3 = upgrade\\\n    // 4 = upload\\\n    \"tx_type\": [Number]\\\n}\\\n\\\n```\\\n\\\n# FieldSelection\\\n\\\nThe query takes a FieldSelection JSON object where the user specifies what they want returned from data matched by their `ReceiptSelection`, `OutputSelection`, and `InputSelection`. There is no `BlockSelection` or `TransactionSelection` because the query returns all blocks and transactions that include the data you specified in your `ReceiptSelection`, `OutputSelection`, or `InputSelection`.\\\n\\\nFor best performance, select a minimal amount of fields.\\\n\\\n_Important note:_ all fields draw inspiration from Fuel's graphql schema. Mainly Blocks, Transactions, Receipts, Inputs, and Outputs. Enums of each type (ex: Receipt has 12 different types, two of which are Log and LogData, Input has 3: InputCoin, InputContract, InputMessage, and Output has 5: CoinOutput, ContractOutput, ChangeOutput, VariableOutput, ContractCreated) are flattened into the parent type. This is why multiple fields on any returned Receipt, Input, or Output might be null; it's not a field on all possible enums of that type, so null is inserted.\\\n\\\nAll fields are optional. Below is an exhaustive list of all fields in a FieldSelection JSON object.\\\n\\\n```codeBlockLines_e6Vv\\\n{\\\n    \"block\": [\\\n        \"id\",\\\n        \"da_height\",\\\n        \"consensus_parameters_version\",\\\n        \"state_transition_bytecode_version\",\\\n        \"transactions_count\",\\\n        \"message_receipt_count\",\\\n        \"transactions_root\",\\\n        \"message_outbox_root\",\\\n        \"event_inbox_root\",\\\n        \"height\",\\\n        \"prev_root\",\\\n        \"time\",\\\n        \"application_hash\"\\\n    ],\\\n    \"transaction\": [\\\n        \"block_height\",\\\n        \"id\",\\\n        \"input_asset_ids\",\\\n        \"input_contracts\",\\\n        \"input_contract_utxo_id\",\\\n        \"input_contract_balance_root\",\\\n        \"input_contract_state_root\",\\\n        \"input_contract_tx_pointer_tx_index\",\\\n        \"input_contract\",\\\n        \"policies_tip\",\\\n        \"policies_witness_limit\",\\\n        \"policies_maturity\",\\\n        \"policies_max_fee\",\\\n        \"script_gas_limit\",\\\n        \"maturity\",\\\n        \"mint_amount\",\\\n        \"mint_asset_id\",\\\n        \"mint_gas_price\",\\\n        \"tx_pointer_block_height\",\\\n        \"tx_pointer_tx_index\",\\\n        \"tx_type\",\\\n        \"output_contract_input_index\",\\\n        \"output_contract_balance_root\",\\\n        \"output_contract_state_root\",\\\n        \"witnesses\",\\\n        \"receipts_root\",\\\n        \"status\",\\\n        \"time\",\\\n        \"reason\",\\\n        \"script\",\\\n        \"script_data\",\\\n        \"bytecode_witness_index\",\\\n        \"bytecode_root\",\\\n        \"subsection_index\",\\\n        \"subsections_number\",\\\n        \"proof_set\",\\\n        \"consensus_parameters_upgrade_purpose_witness_index\",\\\n        \"consensus_parameters_upgrade_purpose_checksum\",\\\n        \"state_transition_upgrade_purpose_root\",\\\n        \"salt\"\\\n    ],\\\n    \"receipt\": [\\\n        \"receipt_index\",\\\n        \"root_contract_id\",\\\n        \"tx_id\",\\\n        \"tx_status\",\\\n        \"tx_type\",\\\n        \"block_height\",\\\n        \"pc\",\\\n        \"is\",\\\n        \"to\",\\\n        \"to_address\",\\\n        \"amount\",\\\n        \"asset_id\",\\\n        \"gas\",\\\n        \"param1\",\\\n        \"param2\",\\\n        \"val\",\\\n        \"ptr\",\\\n        \"digest\",\\\n        \"reason\",\\\n        \"ra\",\\\n        \"rb\",\\\n        \"rc\",\\\n        \"rd\",\\\n        \"len\",\\\n        \"receipt_type\",\\\n        \"result\",\\\n        \"gas_used\",\\\n        \"data\",\\\n        \"sender\",\\\n        \"recipient\",\\\n        \"nonce\",\\\n        \"contract_id\",\\\n        \"sub_id\"\\\n    ],\\\n    \"input\": [\\\n        \"tx_id\",\\\n        \"tx_status\",\\\n        \"tx_type\",\\\n        \"block_height\",\\\n        \"input_type\",\\\n        \"utxo_id\",\\\n        \"owner\",\\\n        \"amount\",\\\n        \"asset_id\",\\\n        \"tx_pointer_block_height\",\\\n        \"tx_pointer_tx_index\",\\\n        \"witness_index\",\\\n        \"predicate_gas_used\",\\\n        \"predicate\",\\\n        \"predicate_data\",\\\n        \"balance_root\",\\\n        \"state_root\",\\\n        \"contract\",\\\n        \"sender\",\\\n        \"recipient\",\\\n        \"nonce\",\\\n        \"data\"\\\n    ],\\\n    \"output\": [\\\n        \"tx_id\",\\\n        \"tx_status\",\\\n        \"tx_type\",\\\n        \"block_height\",\\\n        \"output_type\",\\\n        \"to\",\\\n        \"amount\",\\\n        \"asset_id\",\\\n        \"input_index\",\\\n        \"balance_root\",\\\n        \"state_root\",\\\n        \"contract\",\\\n    ]\\\n}\\\n\\\n```\\\n\\\n* * *\\\n\\\n**Is this page useful?**\\\n\\\n[Edit this page](https://github.com/enviodev/docs/edit/main/docs/HyperSync-LLM/hypersync-complete.mdx)\\\n\\\n- [HyperSync: Ultra-Fast & Flexible Data API](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-ultra-fast--flexible-data-api)\\\n- [What is HyperSync?](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#what-is-hypersync)\\\n- [The Problem HyperSync Solves](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#the-problem-hypersync-solves)\\\n- [Key Benefits](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#key-benefits)\\\n- [Performance Benchmarks](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#performance-benchmarks)\\\n- [Use Cases](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#use-cases)\\\n  - [General Applications](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#general-applications)\\\n  - [Powered by HyperSync](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#powered-by-hypersync)\\\n- [See HyperSync in Action](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#see-hypersync-in-action)\\\n- [Next Steps](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#next-steps)\\\n- [HyperSync Quickstart](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-quickstart)\\\n- [Quickest Start: Try LogTUI](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#quickest-start-try-logtui)\\\n- [Clone the Quickstart Repository](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#clone-the-quickstart-repository)\\\n- [Install Dependencies](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#install-dependencies)\\\n- [Choose Your Adventure](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#choose-your-adventure)\\\n- [Understanding the Code](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#understanding-the-code)\\\n  - [1\\. Initialize the Client](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#1-initialize-the-client)\\\n  - [2\\. Build Your Query](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#2-build-your-query)\\\n  - [3\\. Stream and Process Results](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#3-stream-and-process-results)\\\n- [Key Concepts for Building Queries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#key-concepts-for-building-queries)\\\n  - [Filtering Data](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#filtering-data)\\\n  - [Field Selection](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#field-selection)\\\n  - [Join Modes](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#join-modes)\\\n- [Examples](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#examples)\\\n  - [Finding Uniswap V3 Events](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#finding-uniswap-v3-events)\\\n- [Supported Networks](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#supported-networks)\\\n- [Using LogTUI](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#using-logtui)\\\n- [Next Steps](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#next-steps-1)\\\n- [API Token for Production Use](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#api-token-for-production-use)\\\n- [Getting Started with HyperSync](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#getting-started-with-hypersync)\\\n- [Quick Start Video](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#quick-start-video)\\\n- [Core Concepts](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#core-concepts)\\\n- [Building Effective Queries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#building-effective-queries)\\\n  - [Query Structure](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#query-structure)\\\n  - [Field Selection](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#field-selection-1)\\\n  - [Filtering for Specific Data](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#filtering-for-specific-data)\\\n- [Processing the Results](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#processing-the-results)\\\n  - [Stream to Parquet Files](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#stream-to-parquet-files)\\\n  - [Stream to JSON Files](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#stream-to-json-files)\\\n  - [Process Data in Memory](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#process-data-in-memory)\\\n- [Tips and Best Practices](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#tips-and-best-practices)\\\n  - [Performance Optimization](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#performance-optimization)\\\n  - [Network-Specific Considerations](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#network-specific-considerations)\\\n- [Complete Example](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#complete-example)\\\n- [Decoding Event Logs](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#decoding-event-logs)\\\n  - [Understanding Log Structure](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#understanding-log-structure)\\\n  - [Using the Decoder](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#using-the-decoder)\\\n  - [Single vs. Multiple Event Types](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#single-vs-multiple-event-types)\\\n  - [Working with Decoded Data](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#working-with-decoded-data)\\\n  - [Benefits of Using the Decoder](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#benefits-of-using-the-decoder)\\\n- [Next Steps](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#next-steps-2)\\\n- [HyperSync Client Libraries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-client-libraries)\\\n- [Quick Links](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#quick-links)\\\n- [Client Overview](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#client-overview)\\\n- [Node.js Client](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#nodejs-client)\\\n  - [Installation](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#installation)\\\n- [Python Client](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#python-client)\\\n  - [Installation](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#installation-1)\\\n- [Rust Client](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#rust-client)\\\n  - [Installation](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#installation-2)\\\n- [Go Client](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#go-client)\\\n  - [Installation](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#installation-3)\\\n- [Using API Tokens](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#using-api-tokens)\\\n- [Client Selection Guide](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#client-selection-guide)\\\n- [Additional Resources](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#additional-resources)\\\n- [Support](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#support)\\\n- [HyperSync Query](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-query)\\\n- [Client Examples](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#client-examples)\\\n- [Table of Contents](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#table-of-contents)\\\n- [Understanding HyperSync Queries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#understanding-hypersync-queries)\\\n  - [Core Concepts](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#core-concepts-1)\\\n- [Query Execution Process](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#query-execution-process)\\\n  - [How Data is Organized](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#how-data-is-organized)\\\n  - [Query Limits](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#query-limits)\\\n  - [Execution Steps](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#execution-steps)\\\n  - [Understanding Pagination](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#understanding-pagination)\\\n  - [Reverse Search](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#reverse-search)\\\n- [Query Structure Reference](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#query-structure-reference)\\\n  - [Core Query Parameters](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#core-query-parameters)\\\n  - [Selection Types](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#selection-types)\\\n- [Data Schema](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#data-schema)\\\n  - [Block Fields](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#block-fields)\\\n  - [Transaction Fields](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#transaction-fields)\\\n  - [Log Fields](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#log-fields)\\\n  - [Trace Fields](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#trace-fields)\\\n- [Response Structure](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#response-structure)\\\n  - [Rollback Guard](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#rollback-guard)\\\n- [Stream and Collect Functions](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#stream-and-collect-functions)\\\n  - [Stream Function](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#stream-function)\\\n  - [Collect Functions](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#collect-functions)\\\n- [Working with Join Modes](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#working-with-join-modes)\\\n  - [Default Join Mode (logs → transactions → traces → blocks)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#default-join-mode-logs--transactions--traces--blocks)\\\n  - [JoinAll Mode](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#joinall-mode)\\\n  - [JoinNothing Mode](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#joinnothing-mode)\\\n- [Best Practices](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#best-practices)\\\n- [HyperSync Preset Queries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-preset-queries)\\\n- [Available Presets](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#available-presets)\\\n  - [`preset_query_blocks_and_transactions(from_block, to_block)`](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#preset_query_blocks_and_transactionsfrom_block-to_block)\\\n  - [`preset_query_blocks_and_transaction_hashes(from_block, to_block)`](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#preset_query_blocks_and_transaction_hashesfrom_block-to_block)\\\n  - [`preset_query_get_logs(addresses, from_block, to_block)`](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#preset_query_get_logsaddresses-from_block-to_block)\\\n  - [`preset_query_logs(from_block, to_block)`](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#preset_query_logsfrom_block-to_block)\\\n  - [`preset_query_logs_of_event(event_signature, from_block, to_block)`](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#preset_query_logs_of_eventevent_signature-from_block-to_block)\\\n- [Using curl with HyperSync](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#using-curl-with-hypersync)\\\n- [Table of Contents](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#table-of-contents-1)\\\n- [Curl vs. Client Libraries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#curl-vs-client-libraries)\\\n  - [When to Use curl (JSON API)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#when-to-use-curl-json-api)\\\n  - [When to Use Client Libraries](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#when-to-use-client-libraries)\\\n- [Common Use Cases](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#common-use-cases)\\\n  - [Get All ERC-20 Transfers for an Address](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-all-erc-20-transfers-for-an-address)\\\n  - [Get All Logs for a Smart Contract](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-all-logs-for-a-smart-contract)\\\n  - [Get Blob Data for the Optimism Chain](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-blob-data-for-the-optimism-chain)\\\n  - [Get Mint USDC Events](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-mint-usdc-events)\\\n  - [Get All Transactions for an Address](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-all-transactions-for-an-address)\\\n  - [Get Successful or Failed Transactions](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#get-successful-or-failed-transactions)\\\n- [Api Tokens](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#api-tokens)\\\n- [Overview](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#overview)\\\n- [Table of Contents](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#table-of-contents-2)\\\n- [Generating API Tokens](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#generating-api-tokens)\\\n- [Implementation Guide](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#implementation-guide)\\\n- [Understanding Usage](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#understanding-usage)\\\n- [Security Best Practices](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#security-best-practices)\\\n- [Hypersync Supported Networks](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hypersync-supported-networks)\\\n- [Analyzing All Transactions To and From an Address](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#analyzing-all-transactions-to-and-from-an-address)\\\n- [Introduction](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#introduction)\\\n- [About evm-address-summary](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#about-evm-address-summary)\\\n- [Available Scripts](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#available-scripts)\\\n- [Quick Start Guide](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#quick-start-guide)\\\n  - [Prerequisites](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#prerequisites)\\\n  - [Basic Setup](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#basic-setup)\\\n- [Customizing Network Endpoints](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#customizing-network-endpoints)\\\n- [Practical Use Cases](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#practical-use-cases)\\\n- [Next Steps](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#next-steps-3)\\\n- [Hyperfuel](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#hyperfuel)\\\n- [Example usage](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#example-usage)\\\n- [Rust (repo)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#rust-repo)\\\n- [Python (repo)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#python-repo)\\\n- [Node Js (repo)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#node-js-repo)\\\n- [Json Api (repo)](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#json-api-repo)\\\n- [Query Structure](https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete#query-structure-1)\\\n\\\nCommunity\\\n\\\n- [Discord](https://discord.gg/Q9qt8gZ2fX)\\\n- [Twitter](https://twitter.com/envio_indexer)\\\n- [Lens](https://lenster.xyz/u/envio.lens)\\\n\\\nMore\\\n\\\n- [Blog](https://docs.envio.dev/blog)\\\n- [GitHub](https://github.com/enviodev)\\\n\\\nCopyright © 2025 Envio",
    "metadata": {
      "docsearch:language": "en",
      "ogLocale": "en",
      "generator": "Docusaurus v3.4.0",
      "title": "HyperSync Complete Documentation | Envio",
      "ogTitle": "HyperSync Complete Documentation | Envio",
      "docusaurus_version": "current",
      "og:url": "https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete",
      "twitter:card": "summary_large_image",
      "og:title": "HyperSync Complete Documentation | Envio",
      "description": "This document contains all HyperSync documentation consolidated into a single file for LLM consumption.",
      "twitter:image": "https://docs.envio.dev/img/preview-banner.png",
      "twitter:site": "@envio_indexer",
      "viewport": "width=device-width, initial-scale=1.0",
      "position": "1",
      "docusaurus_locale": "en",
      "docsearch:version": "current",
      "og:description": "This document contains all HyperSync documentation consolidated into a single file for LLM consumption.",
      "ogImage": "https://docs.envio.dev/img/preview-banner.png",
      "ogDescription": "This document contains all HyperSync documentation consolidated into a single file for LLM consumption.",
      "docusaurus_tag": "docs-HyperSync-LLM-current",
      "og:type": "website",
      "docsearch:docusaurus_tag": "docs-HyperSync-LLM-current",
      "language": "en",
      "ogUrl": "https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete",
      "favicon": "https://docs.envio.dev/img/favicon.ico",
      "og:image": "https://docs.envio.dev/img/preview-banner.png",
      "og:locale": "en",
      "scrapeId": "d2b55155-512b-49ec-aae7-693ce783d17b",
      "sourceURL": "https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete",
      "url": "https://docs.envio.dev/docs/HyperSync-LLM/hypersync-complete",
      "statusCode": 200,
      "contentType": "text/html; charset=utf-8",
      "proxyUsed": "basic",
      "cacheState": "miss",
      "indexId": "b99ef9e3-2d08-47c6-b2ed-676909ac564e",
      "creditsUsed": 1
    }
  },
  "scrape_id": "d2b55155-512b-49ec-aae7-693ce783d17b",
  "id": "cTmrpLKzY9DN-pA4jk-rA",
  "startedAt": "2025-10-19T07:47:56.617Z",
  "endedAt": "2025-10-19T07:48:05.575Z",
  "endpoint": "scrape",
  "formState": {
    "extractSetupCompleted": false,
    "urls": [],
    "extractSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "company_mission": {
          "type": "string"
        },
        "supports_sso": {
          "type": "boolean"
        },
        "is_open_source": {
          "type": "boolean"
        },
        "is_in_yc": {
          "type": "boolean"
        }
      }
    },
    "extractPrompt": "Extract the company details, following the schema.",
    "enableWebSearch": false,
    "options": {
      "onlyMainContent": false,
      "parsePDF": true,
      "stealthMode": false,
      "excludeTags": [],
      "includeTags": [],
      "waitFor": "",
      "timeout": "",
      "maxAge": "2 days",
      "ignoreSitemap": false,
      "crawlEntireDomain": false,
      "sitemap": "include",
      "limit": "10",
      "maxDepth": "",
      "excludePaths": [],
      "includePaths": [],
      "includeSubdomains": false,
      "search": "",
      "scrapeContentFromSearchResults": true,
      "timeBasedSearch": "",
      "location": "",
      "prompt": ""
    },
    "formats": [
      "markdown"
    ],
    "sources": [
      "web"
    ],
    "categories": [],
    "jsonSchema": {
      "type": "object",
      "required": [],
      "properties": {
        "company_name": {
          "type": "string"
        },
        "company_description": {
          "type": "string"
        }
      }
    },
    "agent": {},
    "url": "docs.envio.dev/docs/HyperSync-LLM/hypersync-complete",
    "endpoint": "scrape"
  },
  "status": "success",
  "version": "ch8aw5SsR8qMlQv_4hmZ3"
}
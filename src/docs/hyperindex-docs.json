{
  "markdown": "[Skip to main content](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#__docusaurus_skipToContent_fallback)\n\nHyperSync API tokens required from **3 November 2025**. Ensure you are using one to keep uninterrupted HyperSync access. [Learn more →](https://docs.envio.dev/docs/HyperSync/api-tokens)\n\n[![Envio Logo](https://docs.envio.dev/img/envio-logo.png)](https://envio.dev/)[HyperIndex Docs](https://docs.envio.dev/docs/HyperIndex/overview) [HyperSync Docs](https://docs.envio.dev/docs/HyperSync/overview) [HyperRPC Docs](https://docs.envio.dev/docs/HyperRPC/overview-hyperrpc) [Showcase](https://docs.envio.dev/showcase) [Blog](https://docs.envio.dev/blog)\n\n[GitHub](https://github.com/enviodev)\n\n![Cookbook.dev](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Ask Envio AIExplain\n\n![Ask Envio AI](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Ask Envio AI\n\nLanguage**English**\n\nAsk Envio AI\n\nSearch Contracts\n\nABI\n\nBytecode\n\n1\n\nNo-Code Actions\n\nCompile\n\n![avatar](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)Welcome to AI Onboard\n\nOne stop shop for all your smart contract needs. Pick a contract from our library, customize it to your needs, and deploy right away. Or export for Foundry, Remix, ChainIDE, Hardhat or Scaffold ETH and continue working there.\n\nTrending Now\n\nReady to get started? Here are some of the most popular contracts in our library.\n\nSimple ERC20 Token\n\nSOpenZeppelin\n\n14944\n\nERC20 token with the following features: - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token.\n\nOpen\n\nAudited\n\nFlash loan Attacker\n\nFAave\n\n8979\n\nThis contract is an attacker contract that utilizes flash loans to borrow assets from a lending pool, supply assets to the pool, and execute operations to mint and return tokens with a premium.\n\nOpen\n\nDividend Paying Token with Buy/Sell Fee\n\n![](https://pbs.twimg.com/profile_images/1511939100303142912/4iT-NXVI_400x400.jpg)SatoshiViral\n\n3310\n\nToken that pays dividends, and has a fee on buys and sells. Users hold the token, and they receive LP over time that they can claim from the contract. Used in the VIRAL project.\n\nOpen\n\nAudited\n\nUSDT (Tether)\n\n![](https://pbs.twimg.com/profile_images/1792114402864640002/yR72EOJ7_400x400.png)Tether\n\n2810\n\nTether tokens are the most widely adopted stablecoins, having pioneered the concept in the digital token space. A disruptor to the conventional financial system and a trailblazer in the digital use of traditional currencies, Tether Tokens support and empower growing ventures and innovation throughout the blockchain space. Tether Tokens exist as a digital token built on multiple blockchains.\n\nOpen\n\nAudited\n\nBurnable ERC20 Token\n\nBOpenZeppelin\n\n2200\n\nERC20 token with the following features: - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token. - Methods that allow users to burn their tokens. This directly decreases total supply. Used to burn tokens from the supply.\n\nOpen\n\nAudited\n\nBuyback Token with Fees\n\nBCookbook\n\n2093\n\nA premium token with most of the modern smart contract features that developers look for. With the Fully Baked token base, developers have the option of customizing to include additional tax features such as Salary Tax and Buyback Tax. Great if you plan on offering staking as a utility or you're creating a Play-to-Earn (P2E) project.\n\nThis contract is commonly found on launchpads like pinksale.finance, apesale.finance, mofoLabs etc.\n\nOpen\n\nMintable ERC20 Token\n\nMOpenZeppelin\n\n1968\n\nERC20 token with the following features: - Premint your initial supply. - Mint as many tokens as you want with no cap. - Only the contract owner can mint new tokens.\n\nOpen\n\nAudited\n\nAzuki ERC721A NFT Sale Basic\n\n![](https://pbs.twimg.com/profile_images/1514324107881431045/vsF28_QV_400x400.jpg)Chiru-Labs\n\n1478\n\nThis smart contract is an implementation of the ERC721A standard. It allows users to purchase and mint NFTs, with the sale being active and limited to a maximum supply. The owner can reserve NFTs, withdraw proceeds from the sale, and set the sale status, price, and base URI for metadata retrieval.\n\nOpen\n\nToken Staking\n\n![](https://pbs.twimg.com/profile_images/1315664565917581312/9da1QkqP_400x400.png)oiler.network\n\n1355\n\nStaking contract where users deposit tokens and receive a reward based on the amount of time their tokens are staked. Users decide how long they want to stake their tokens for, and earn a bonus depending on the length of time. They can withdraw early, but are penalized.\n\nOpen\n\nAudited\n\nBasic DAO\n\nBCookbook\n\n1118\n\nA very simple implementation of a DAO. Voting period is locked in at 1 week, and the voting delay is 1 block. There is no delay on approved proposals.\n\nOpen\n\nLottery Contract\n\nLBraverElliot\n\n1046\n\nA lottery that uses a TRUELY random number.\n\nWatch my yt tutorial for the midpoint side.\n\nhttps://www.youtube.com/watch?v=QLbcAaYqh4I\n\nOpen\n\nVoting ERC20 Token\n\nVOpenZeppelin\n\n938\n\nERC20 token with the following features: - Token owners can vote on Governance/DAO proposals. - Premint your total supply. - No minting function. This allows users to comfortably know the future supply of the token. Used with Governance/DAO contracts for voting.\n\nOpen\n\nAudited\n\nReflection Token supporting 3 wallets\n\n![](https://pbs.twimg.com/profile_images/1383133626431332353/6T-NQTxr_400x400.jpg)MediToken\n\n888\n\nA Reflection Token supporting 3 reflection recipients. Each transfer has a fee which is split between the liquidity pool, and 3 additional wallets. The 3 additional wallet are exempted from transfer fees and can be given specific purposes. (Treasury, Developer, Community, etc)\n\nOpen\n\nAudited\n\nSoulbound NFT\n\nSCookbook\n\n834\n\nSoulbound Token: ERC721 Soulbound NFT with the following features: - Deployer can mint to recipients. - No transfer capability.\n\nOpen\n\nCircle USDC\n\nCCircle-USDC\n\n808\n\nThis smart contract is an upgraded version of a fiat token. It introduces new features such as initializing the token with a new name, increasing/decreasing the allowance, executing transfers with signed authorizations, canceling authorizations, and updating allowances with signed permits.\n\nOpen\n\nAzuki ERC721A NFT Sale\n\n![](https://pbs.twimg.com/profile_images/1514324107881431045/vsF28_QV_400x400.jpg)Chiru-Labs\n\n771\n\nThis smart contract is an extension of the ERC721A standard. It allows users to purchase and mint NFTs, with a maximum supply and wallet limit. The owner can reserve NFTs, withdraw proceeds, and control the sale's activity, price, and wallet limit. It also enables the owner to update the base URI for NFT metadata.\n\nOpen\n\nERC721 NFT Staking with Infinite Rewards\n\nECookbook\n\n760\n\nNFT staking contract that rewards stakers with an exact number of ERC20 tokens per day. On deployment, the owner specifies a daily reward rate, and an address that tokens will be pulled from. Neither of these can be changed. Each staked NFT receives the same number of tokens every day. The per NFT rate stays the same even when the number of staked NFTs increases/decreases. A common usecase is for blockchain-based games, where each NFT rewards a certain number of lives per day.\n\nOpen\n\nOn-Chain income splitter and distributor\n\n![](https://pbs.twimg.com/profile_images/1570085369907138561/3CM7z929_400x400.jpg)0xSplits\n\n691\n\nSet and perform payment splits in either ETH or Tokens. Can be used for royalty splits or automated payment splits. Accepts both ETH and ERC20 tokens. Splits can be updated and transferred. Whenever a Split receives income, each recipient gets their share.\n\nOpen\n\nAudited\n\nERC20 Token with Automatic Vesting\n\n![](https://pbs.twimg.com/profile_images/1506907877134544897/_zWnXOgM_400x400.jpg)Aurox\n\n683\n\nWhen this contract is deployed, vesting contracts are automatically deployed, and tokens are automatically vested in those contracts. This allows the owner to immediately vest marketing/developer/admin tokens, without any manual work.\n\nOpen\n\nAudited\n\nAntiBot ERC20\n\n![](https://smart-contract-recipes.s3.amazonaws.com/0x7Ff38964ae5aC947FAfD86BaA44D347241ceE013/profile-pic.png)Hargobind-Gupta\n\n612\n\nThe Antibot ERC20 token is designed to protect against frontrunner sandwich bots on the blockchain network. Implementing a unique logic, it adds an extra layer of vulnerability for bots. The token includes a mapping called \\_buyBlock that stores the block number when a buy transaction occurs. During token transfers, the \\_beforeTokenTransfer function is triggered, and it checks if the from address has the same block number stored in \\_buyBlock. If it does, the transfer is flagged as a \"Bad bot!\" and blocked. The checkBot variable can be toggled by the contract owner to enable or disable the bot-checking functionality. Overall, this Antibot ERC20 token aims to deter and trap frontrunner bots by utilizing block number comparisons. This contract is inspired by an Ethereum Stackexchange discussion linked below.\nhttps://ethereum.stackexchange.com/questions/116857/stop-frontrunner-bots-by-comparing-block-number-of-buy-tx-versus-sell-and-transf\n\nOpen\n\nMoonbirds NFT\n\n![](https://pbs.twimg.com/profile_images/1595478138716184577/g620V8sF_400x400.jpg)Moonbirds\n\n570\n\nA collection of 10,000 utility-enabled PFPs that feature a richly diverse and unique pool of rarity-powered traits.\n\nOpen\n\nERC721A\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n567\n\nThis smart contract is an implementation of the ERC721A standard. It allows for the creation, ownership, and transfer of non-fungible tokens (NFTs). The contract keeps track of token ownership, token metadata, and token counts. It also includes functions for minting, burning, and querying token information.\n\nOpen\n\nSimple ERC721 NFT Sale\n\nSCookbook\n\n516\n\nERC721 NFT with the following features: - Built-in sale with an adjustable price. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nRoyalty Splitter\n\nROpenZeppelin\n\n475\n\nThis contract allows payments to be split among a group of accounts. The split can be in equal parts or set in percentages. The way this is specified is by assigning each account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set when you deploy the contract and can't be updated afterwards. Payments must be claimed from the contract by each user. NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you to run tests before sending real value to this contract.\n\nOpen\n\nAudited\n\nERC1155 with burnable NFTs and pausable transfers\n\nECookbook\n\n438\n\nERC 1155 NFT, the basic standard multi-token, with the following features: - Burn feature that allow users to burn their NFTs. This directly decreases total supply. - Owner can pause or unpause NFT transfers. - Adjustable metadata. - Create multiple NFT collections with the same contract.\n\nOpen\n\nERC721 Limited Sale\n\nECookbook\n\n418\n\nERC721 NFT, including: - Built-in sale mechanism with an adjustable price. - Wallets can only purchase a limited number of NFTs during the sale. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nAudited\n\nERC721ABurnable\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n400\n\nThis contract extends ERC721A and IERC721ABurnable, allowing the owner or approved operators to burn a specific token by calling the \"burn\" function.\n\nOpen\n\nERC721ABurnableMock\n\n![](https://pbs.twimg.com/profile_images/1626300152746217472/b5KdCxM__400x400.jpg)Chiru-Labs\n\n400\n\nThe ERC721ABurnableMock contract is an implementation of the ERC721A and ERC721ABurnable interfaces. It allows for the creation and management of non-fungible tokens (NFTs) that can be burned. It provides functions to check token existence, mint new tokens, retrieve ownership information, and get statistics on minted and burned tokens.\n\nOpen\n\nERC721 NFT Sale with wallet cap\n\nECookbook\n\n399\n\nERC721 NFT with the following features: - Built-in sale with an adjustable price. - Wallets can only purchase a limited number of NFTs during the sale. - Reserve function for the owner to mint free NFTs. - Fixed maximum supply.\n\nOpen\n\nNFT Sale (ERC20) with Distributed Royalties\n\nNCookbook\n\n395\n\nERC721 NFT with the following features: \\* \\* -Built-in sale with an adjustable price. Payment in Tokens \\* -Wallets can only purchase a limited number of NFTs during the sale. \\* -Reserve function for the owner to mint free NFTs. \\* -Fixed maximum supply. \\* -Methods that allow users to burn their NFTs. This directly decreases total supply. \\* -Proceeds can be divided across 5 wallets\n\nOpen\n\nHistory\n\nEnable notificationsDetailed Mode\n\nStart New Chat\n\n[Integrate Cookbook AI](https://ai.cookbook.dev/)\n\n![](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)\n\nAsk me anything about Envio!\n\nWhat's Envio?How do I get started with Envio?\n\nHistory\n\nEnable notificationsDetailed Mode\n\nStart New Chat\n\n[Integrate Cookbook AI](https://ai.cookbook.dev/)\n\n![](https://d2j9klt7rsw34c.cloudfront.net/frontend/cms/logo/74984a91-0d31-4ac9-8580-21096623fff7.png)\n\nAsk me anything about Envio!\n\nWhat's Envio?How do I get started with Envio?\n\nSearch`` `K`\n\n- [HyperIndex Complete Documentation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete)\n\n- [Home page](https://docs.envio.dev/)\n- HyperIndex Complete Documentation\n\nOn this page\n\n# HyperIndex Complete Documentation\n\nThis document contains all HyperIndex documentation consolidated into a single file for LLM consumption.\n\n* * *\n\n## Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview \"Direct link to Overview\")\n\n**File:** `overview.md`\n\n# HyperIndex: Fast Multichain Indexer\n\n**HyperIndex** is a blazing-fast, developer-friendly multichain indexer, optimized for both local development and reliable hosted deployment. It empowers developers to effortlessly build robust backends for blockchain applications.\n\n!Sync Process\n\nHyperIndex & HyperSync\n\n**HyperIndex** is Envio's full-featured blockchain indexing framework that transforms on-chain events into structured, queryable databases with GraphQL APIs.\n\n**HyperSync** is the high-performance data engine that powers HyperIndex. It provides the raw blockchain data access layer, delivering up to 2000x faster performance than traditional RPC endpoints.\n\nWhile HyperIndex gives you a complete indexing solution with schema management and event handling, HyperSync can be used directly for custom data pipelines and specialized applications.\n\n## HyperSync API Token Requirements [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hypersync-api-token-requirements \"Direct link to HyperSync API Token Requirements\")\n\nHyperSync (the data engine powering HyperIndex) implements rate limits for requests without API tokens. API tokens will be required from **3 November 2025**. Here's what you need to know:\n\n- **Local Development**: An API token will be required. An automatic login feature from the CLI will be available to make this smoother.\n- **Self-Hosted Deployments**: API tokens are required for HyperSync access in self-hosted deployments. The token can be set via the `ENVIO_API_TOKEN` environment variable in your indexer configuration. This can be read from the `.env` file in the root of your HyperIndex project.\n- **Hosted Service**: Indexers deployed to our hosted service will have special access that doesn't require a custom API token.\n- **Future Pricing**: From mid-November 2025 onwards, we will introduce tiered packages for those self-hosting hyperindex and wishing to use hypersync. For preferred introductory pricing based on your specific use case, reach out to us on Discord.\n\nFor more details about API tokens, including how to generate and implement them, see our API Tokens documentation.\n\n## 🔗 Quick Links [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#-quick-links \"Direct link to 🔗 Quick Links\")\n\n- GitHub Repository ⭐\n- Join our Discord Community\n\n* * *\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started \"Direct link to Getting Started\")\n\n**File:** `getting-started.md`\n\n## Indexer Initialization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexer-initialization \"Direct link to Indexer Initialization\")\n\n### Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites \"Direct link to Prerequisites\")\n\n- **Node.js** _(v22 or newer recommended)_\n- **pnpm** _(v8 or newer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n\n> **Note:** Docker is required only if you plan to run your indexer locally. You can skip installing Docker if you'll only be using Envio's hosted service.\n\n#### Additionally for Windows Users: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#additionally-for-windows-users \"Direct link to Additionally for Windows Users:\")\n\n- **WSL** _Windows Subsystem for Linux_\n\n## Essential Files [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#essential-files \"Direct link to Essential Files\")\n\nAfter initialization, your indexer will contain three main files that are essential for its operation:\n\n1. **`config.yaml`** – Defines indexing settings such as blockchain endpoints, events to index, and advanced behaviors.\n2. **`schema.graphql`** – Defines the GraphQL schema for indexed data and its structure for efficient querying.\n3. **`src/EventHandlers.*`** – Contains the logic for processing blockchain events.\n\n> **Note:** The file extension for Event Handlers ( `*.ts`, `*.js`, or `*.res`) depends on the programming language chosen (TypeScript, JavaScript, or ReScript).\n\nYou can customize your indexer by modifying these files to meet your specific requirements.\n\nFor a complete walkthrough of the process, refer to the Quickstart guide.\n\n* * *\n\n## Contract Import [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-import \"Direct link to Contract Import\")\n\n**File:** `contract-import.md`\n\nThe **Quickstart** enables you to instantly autogenerate a powerful indexer and start querying blockchain data in minutes. This is the fastest and easiest way to begin using HyperIndex.\n\n**Example:** Autogenerate an indexer for the Eigenlayer contract and index its entire history in less than 5 minutes by simply running `pnpx envio init` and providing the contract address from Etherscan.\n\n### Video Tutorials [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#video-tutorials \"Direct link to Video Tutorials\")\n\n## Contract Import Methods [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-import-methods \"Direct link to Contract Import Methods\")\n\nThere are two convenient methods to import your contract:\n\n- **Block Explorer** _(verified contracts on supported explorers like Etherscan and Blockscout)_\n- **Local ABI** _(custom or unverified contracts)_\n\n### 1\\. Block Explorer Import [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-block-explorer-import \"Direct link to 1. Block Explorer Import\")\n\nThis method uses a verified contract's address from a supported blockchain explorer (Etherscan, Routescan, etc.) to automatically fetch the ABI.\n\n#### Steps: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#steps \"Direct link to Steps:\")\n\n**a. Select the blockchain**\n\n```codeBlockLines_e6Vv\n? Which blockchain would you like to import a contract from?\n> ethereum-mainnet\n  goerli\n  optimism\n  base\n  bsc\n  gnosis\n  polygon\n[↑↓ to move, enter to select]\n\n```\n\nnote\n\nHyperIndex supports all EVM-compatible chains. If your desired chain is not listed, you can import via the local ABI method or manually adjust the `config.yaml` file after initialization.\n\n**b. Enter the contract address**\n\n```codeBlockLines_e6Vv\n? What is the address of the contract?\n[Use proxy address if ABI is for a proxy implementation]\n\n```\n\ntip\n\nIf using a proxy contract, always specify the **proxy address**, not the implementation address.\n\n**c. Select events to index**\n\n```codeBlockLines_e6Vv\n? Which events would you like to index?\n> [x] ClaimRewards(address indexed from, address indexed reward, uint256 amount)\n  [x] Deposit(address indexed from, uint256 indexed tokenId, uint256 amount)\n  [x] NotifyReward(address indexed from, address indexed reward, uint256 indexed epoch, uint256 amount)\n  [x] Withdraw(address indexed from, uint256 indexed tokenId, uint256 amount)\n[space to select, → to select all, ← to deselect all]\n\n```\n\n**d. Finish or add more contracts**\n\nYou'll be prompted to continue adding more contracts or to complete the setup:\n\n```codeBlockLines_e6Vv\n? Would you like to add another contract?\n> I'm finished\n  Add a new address for same contract on same network\n  Add a new network for same contract\n  Add a new contract (with a different ABI)\n\n```\n\n## Generated Files & Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#generated-files--configuration \"Direct link to Generated Files & Configuration\")\n\nThe Quickstart automatically generates key files:\n\n### 1\\. `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-configyaml \"Direct link to 1-configyaml\")\n\nAutomatically configured parameters include:\n\n- **Network ID**\n- **Start Block**\n- **Contract Name**\n- **Contract Address**\n- **Event Signatures**\n\nBy default, all selected events are included, but you can manually adjust the file if needed. See the detailed guide on `config.yaml`.\n\n### 2\\. GraphQL Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-graphql-schema \"Direct link to 2. GraphQL Schema\")\n\n- Entities are automatically generated for each selected event.\n- Fields match the event parameters emitted.\n\nSee more details in the schema file guide.\n\n### 3\\. Event Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-event-handlers \"Direct link to 3. Event Handlers\")\n\n- Handlers are autogenerated for each event.\n- Handlers create event-specific entities.\n\nLearn more in the event handlers guide.\n\n* * *\n\n## HyperIndex Performance Benchmarks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperindex-performance-benchmarks \"Direct link to HyperIndex Performance Benchmarks\")\n\n**File:** `benchmarks.md`\n\n## Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-1 \"Direct link to Overview\")\n\nHyperIndex delivers industry-leading performance for blockchain data indexing. Independent benchmarks have consistently shown Envio's HyperIndex to be the fastest indexing solution available, with dramatic performance advantages over competitive offerings.\n\n## Recent Independent Benchmarks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#recent-independent-benchmarks \"Direct link to Recent Independent Benchmarks\")\n\nThe most comprehensive and up-to-date benchmarks were conducted by Sentio in April 2025 and are available in the sentio-benchmark repository. These benchmarks compare Envio's HyperIndex against other popular indexers across multiple real-world scenarios:\n\n### Key Performance Highlights [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-performance-highlights \"Direct link to Key Performance Highlights\")\n\n| Case | Description | Envio | Nearest Competitor | TheGraph | Ponder |\n| --- | --- | --- | --- | --- | --- |\n| LBTC Token Transfers | Event handling, No RPC calls, Write-only | 3m | 8m - 2.6x slower (Sentio) | 3h9m - 3780x slower | 1h40m - 2000x slower |\n| LBTC Token with RPC calls | Event handling, RPC calls, Read-after-write | 1m | 6m - 6x slower (Sentio) | 1h3m - 63x slower | 45m - 45x slower |\n| Ethereum Block Processing | 100K blocks with Metadata extraction | 7.9s | 1m - 7.5x slower (Subsquid) | 10m - 75x slower | 33m - 250x slower |\n| Ethereum Transaction Gas Usage | Transaction handling, Gas calculations | 1m 26s | 7m - 4.8x slower (Subsquid) | N/A | 33m - 23x slower |\n| Uniswap V2 Swap Trace Analysis | Transaction trace handling, Swap decoding | 41s | 2m - 3x slower (Subsquid) | 8m - 11x slower | N/A |\n| Uniswap V2 Factory | Event handling, Pair and swap analysis | 8s | 2m - 15x slower (Subsquid) | 19m - 142x slower | 21m - 157x slower |\n\nThe independent benchmark results demonstrate that HyperIndex consistently outperforms all competitors across every tested scenario. This includes the most realistic real-world indexing scenario LBTC Token with RPC calls - where HyperIndex was up to 6x faster than the nearest competitor and over 63x faster than TheGraph.\n\n## Historical Benchmarking Results [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#historical-benchmarking-results \"Direct link to Historical Benchmarking Results\")\n\nOur internal benchmarking from October 2023 showed similar performance advantages. When indexing the Uniswap V3 ETH-USDC pool contract on Ethereum Mainnet, HyperIndex achieved:\n\n- 2.1x faster indexing than the nearest competitor\n- Over 100x faster indexing than some popular alternatives\n\nYou can read the full details in our Indexer Benchmarking Results blog post.\n\n## Verify For Yourself [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#verify-for-yourself \"Direct link to Verify For Yourself\")\n\nWe encourage developers to run their own benchmarks. You can use the templates provided in the Sentio benchmark repository or our sample indexer implementations for various scenarios.\n\n* * *\n\n## Migrate from TheGraph to HyperIndex [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#migrate-from-thegraph-to-hyperindex \"Direct link to Migrate from TheGraph to HyperIndex\")\n\n**File:** `migration-guide.md`\n\ninfo\n\nPlease reach out to our team on Discord for personalized migration assistance.\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction \"Direct link to Introduction\")\n\nMigrating from a subgraph to HyperIndex is designed to be a developer-friendly process. HyperIndex draws strong inspiration from TheGraph’s subgraph architecture, which makes the migration simple, especially with the help of coding assistants like Cursor and AI tools (don't forget to use our ai friendly docs).\n\nThe process is simple but requires a good understanding of the underlying concepts. If you are new to HyperIndex, we recommend starting with the Getting Started guide.\n\n## Why Migrate to HyperIndex? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-migrate-to-hyperindex \"Direct link to Why Migrate to HyperIndex?\")\n\n- **Superior Performance**: Up to 100x faster indexing speeds\n- **Lower Costs**: Reduced infrastructure requirements and operational expenses\n- **Better Developer Experience**: Simplified configuration and deployment\n- **Advanced Features**: Access to capabilities not available in other indexing solutions\n- **Seamless Integration**: Easy integration with existing GraphQL APIs and applications\n\n## Subgraph to HyperIndex Migration Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subgraph-to-hyperindex-migration-overview \"Direct link to Subgraph to HyperIndex Migration Overview\")\n\nMigration consists of three major steps:\n\n1. Subgraph.yaml migration\n2. Schema migration - near copy paste\n3. Event handler migration\n\nAt any point in the migration run\n\n`pnpm envio codegen`\n\nto verify the `config.yaml` and `schema.graphql` files are valid.\n\nor run\n\n`pnpm dev`\n\nto verify the indexer is running and indexing correctly.\n\n### 0.5 Use `npx envio init` to generate a boilerplate [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#05-use-npx-envio-init-to-generate-a-boilerplate \"Direct link to 05-use-npx-envio-init-to-generate-a-boilerplate\")\n\nAs a first step, we recommend using `npx envio init` to generate a boilerplate for your project. This will handle the creation of the `config.yaml` file and a basic `schema.graphql` file with generic handler functions.\n\n### 1\\. `subgraph.yaml` → `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-subgraphyaml--configyaml \"Direct link to 1-subgraphyaml--configyaml\")\n\n`npx envio init` will generate this for you. It's a simple configuration file conversion. Effectively specifying which contracts to index, which networks to index (multiple networks can be specified with envio) and which events from those contracts to index.\n\nTake the following conversion as an example, where the `subgraph.yaml` file is converted to `config.yaml` the below comparisons is for the Uniswap v4 pool manager subgraph.\n\ntheGraph - `subgraph.yaml`\n\n```codeBlockLines_e6Vv\nspecVersion: 0.0.4\ndescription: Uniswap is a decentralized protocol for automated token exchange on Ethereum.\nrepository: https://github.com/Uniswap/v4-subgraph\nschema:\n  file: ./schema.graphql\nfeatures:\n  - nonFatalErrors\n  - grafting\n  - kind: ethereum/contract\n    name: PositionManager\n    network: mainnet\n    source:\n      abi: PositionManager\n      address: \"0xbD216513d74C8cf14cf4747E6AaA6420FF64ee9e\"\n      startBlock: 21689089\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      file: ./src/mappings/index.ts\n      entities:\n        - Position\n      abis:\n        - name: PositionManager\n          file: ./abis/PositionManager.json\n      eventHandlers:\n        - event: Subscription(indexed uint256,indexed address)\n          handler: handleSubscription\n        - event: Unsubscription(indexed uint256,indexed address)\n          handler: handleUnsubscription\n        - event: Transfer(indexed address,indexed address,indexed uint256)\n          handler: handleTransfer\n\n```\n\nHyperIndex - `config.yaml`\n\n```codeBlockLines_e6Vv\n# yaml-language-server: $schema=./node_modules/envio/evm.schema.json\nname: uni-v4-indexer\nnetworks:\n  - id: 1\n    start_block: 21689089\n    contracts:\n      - name: PositionManager\n        address: 0xbD216513d74C8cf14cf4747E6AaA6420FF64ee9e\n        handler: src/EventHandlers.ts\n        events:\n        - event: Subscription(uint256 indexed tokenId, address indexed subscriber)\n        - event: Unsubscription(uint256 indexed tokenId, address indexed subscriber)\n        - event: Transfer(address indexed from, address indexed to, uint256 indexed id)\n\n```\n\nFor any potential hurdles, please refer to the Configuration File documentation.\n\n## 2\\. Schema migration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-schema-migration \"Direct link to 2. Schema migration\")\n\n`copy` & `paste` the schema from the subgraph to the HyperIndex config file.\n\nSmall nuance differences:\n\n- You can remove the `@entity` directive\n- Enums\n- BigDecimals\n\n## 3\\. Event handler migration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-event-handler-migration \"Direct link to 3. Event handler migration\")\n\nThis consists of two parts\n\n1. Converting assemblyscript to typescript\n2. Converting the subgraph syntax to HyperIndex syntax\n\n### 3.1 Converting Assemblyscript to Typescript [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#31-converting-assemblyscript-to-typescript \"Direct link to 3.1 Converting Assemblyscript to Typescript\")\n\nThe subgraph uses assemblyscript to write event handlers. The HyperIndex syntax is usually in typescript. Since assemblyscript is a subset of typescript, it's quite simple to copy and paste the code, especially so for pure functions.\n\n### 3.2 Converting the subgraph syntax to HyperIndex syntax [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#32-converting-the-subgraph-syntax-to-hyperindex-syntax \"Direct link to 3.2 Converting the subgraph syntax to HyperIndex syntax\")\n\nThere are some subtle differences in the syntax of the subgraph and HyperIndex. Including but not limited to the following:\n\n- Replace Entity.save() with context.Entity.set()\n- Convert to async handler functions\n- Use `await` for loading entities `const x = await context.Entity.get(id)`\n- Use dynamic contract registration to register contracts\n\nThe below code snippets can give you a basic idea of what this difference might look like.\n\ntheGraph - `eventHandler.ts`\n\n```codeBlockLines_e6Vv\nexport function handleSubscription(event: SubscriptionEvent): void {\n  const subscription = new Subscribe(event.transaction.hash + event.logIndex);\n\n  subscription.tokenId = event.params.tokenId;\n  subscription.address = event.params.subscriber.toHexString();\n  subscription.logIndex = event.logIndex;\n  subscription.blockNumber = event.block.number;\n  subscription.position = event.params.tokenId;\n\n  subscription.save();\n}\n\n```\n\nHyperIndex - `eventHandler.ts`\n\n```codeBlockLines_e6Vv\nPoolManager.Subscription.handler( async (event, context) => {\n  const entity = {\n    id: event.transaction.hash + event.logIndex,\n    tokenId: event.params.tokenId,\n    address: event.params.subscriber,\n    blockNumber: event.block.number,\n    logIndex: event.logIndex,\n    position: event.params.tokenId\n  }\n\ncontext.Subscription.set(entity);\n})\n\n```\n\n## Extra tips [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#extra-tips \"Direct link to Extra tips\")\n\nHyperIndex is a powerful tool that can be used to index any contract. There are some features that are especially powerful that go above subgraph implementations and so in some cases you may want to optimise your migration to HyperIndex further to take advantage of these features. Here are some useful tips:\n\n- Use the `field_selection` option to add additional fields to your index. Doc here: field selection\n- Use the `unordered_multichain_mode` option to enable unordered multichain mode, this is the most common need for multichain indexing. However comes with tradeoffs worth understanding. Doc here: unordered multichain mode\n- Use wildcard indexing to index by event signatures rather than by contract address.\n- HyperIndex uses the standard graphql query language, where as the subgraph uses a custom query language. You can read about the slight nuances here. (We are working on a basic tool to help with backwards compatibility, please check in with us on discord for it's current status).\n- Loaders are a powerful feature to optimize historical sync performance. You can read more about them here.\n- HyperIndex is very flexible and can be used to index offchain data too or send messages to a queue etc for fetching external data, you can further optimise the fetching by using the effects api\n\n## Share Your Learnings [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#share-your-learnings \"Direct link to Share Your Learnings\")\n\nIf you discover helpful tips during your migration, we’d love contributions! Open a PR to this guide and help future developers.\n\n## Getting Help [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-help \"Direct link to Getting Help\")\n\n**Join Our Discord**: The fastest way to get personalized help is through our Discord community.\n\n````codeBlockLines_e6Vv\n\n---\n\n## Configuration File\n\n**File:** `Guides/configuration-file.mdx`\n\nThe `config.yaml` file defines your indexer's behavior, including which blockchain events to index, contract addresses, which networks to index, and various advanced indexing options. It is a crucial step in configuring your HyperIndex setup.\n\nAfter any changes to your `config.yaml` and the schema, run:\n\n```bash\npnpm codegen\n\n````\n\nThis command generates necessary types and code for your event handlers.\n\n## Key Configuration Options [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-configuration-options \"Direct link to Key Configuration Options\")\n\n### Contract Addresses [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-addresses \"Direct link to Contract Addresses\")\n\nSet the address of the smart contract you're indexing.\n\nnote\n\nAddresses can be provided in **checksum** format or in **lowercase**.\nEnvio accepts both and normalizes them internally.\n\n**Single address:**\n\n```codeBlockLines_e6Vv\naddress: 0xContractAddress\n\n```\n\n**Multiple addresses for the same contract:**\n\n```codeBlockLines_e6Vv\ncontracts:\n    - name: MyContract\n      address:\n          - 0xAddress1\n          - 0xAddress2\n\n```\n\ntip\n\nIf using a **proxy contract**, always use the **proxy address**, not the implementation address.\n\n**Global definitions:**\n\nYou can also avoid repeating addresses by using global contract definitions:\n\n```codeBlockLines_e6Vv\ncontracts:\n    - name: Greeter\n      abi: greeter.json\n\nnetworks:\n    - id: ethereum-mainnet\n      contracts:\n          - name: Greeter\n            address: 0xProxyAddressHere\n\n```\n\n### Events Selection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#events-selection \"Direct link to Events Selection\")\n\nDefine specific events to index in a human-readable format:\n\n```codeBlockLines_e6Vv\nevents:\n    - event: \"NewGreeting(address user, string greeting)\"\n    - event: \"ClearGreeting(address user)\"\n\n```\n\nBy default, all events defined in the contract are indexed, but you can selectively disable them by removing them from this list.\n\n#### Custom Event Names [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#custom-event-names \"Direct link to Custom Event Names\")\n\nYou can assign custom names to events in `config.yaml`. This is handy when\ntwo events share the same name but have different signatures, or when you want\na more descriptive name in your Envio project.\n\n```codeBlockLines_e6Vv\nevents:\n    - event: Assigned(address indexed recipientId, uint256 amount, address token)\n    - event: Assigned(address indexed recipientId, uint256 amount, address token, address sender)\n      name: AssignedWithSender\n\n```\n\n### Field Selection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#field-selection \"Direct link to Field Selection\")\n\nTo improve indexing performance and reduce credits usage, the `block` and `transaction` fields on events contain only a subset of the fields available on the blockchain.\n\nTo access fields that are not provided by default, specify them using the `field_selection` option for your event:\n\n```codeBlockLines_e6Vv\nevents:\n    - event: \"Assigned(address indexed user, uint256 amount)\"\n      field_selection:\n          transaction_fields:\n              - transactionIndex\n          block_fields:\n              - timestamp\n\n```\n\nSee all possible options in the Config File Reference or use IDE autocomplete for your help.\n\n#### Global Field Selection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#global-field-selection \"Direct link to Global Field Selection\")\n\nYou can also specify fields globally for all events in the root of the config file:\n\n```codeBlockLines_e6Vv\nfield_selection:\n    transaction_fields:\n        - hash\n        - gasUsed\n    block_fields:\n        - parentHash\n\n```\n\nTry to use this option sparingly as it can cause redundant Data Source calls and increased credits usage.\n\nnote\n\nField Selection per Event is available from `envio@2.11.0` and above. Please, upgrade your indexer to access this feature.\n\n### Rollback on Reorg [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rollback-on-reorg \"Direct link to Rollback on Reorg\")\n\nHyperIndex automatically handles blockchain reorganizations by default. To disable or customize this behavior, set the `rollback_on_reorg` flag in your `config.yaml`:\n\n```codeBlockLines_e6Vv\nrollback_on_reorg: true # default is true\n\n```\n\nSee detailed configuration options here.\n\n### Environment Variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-variables \"Direct link to Environment Variables\")\n\nSince `envio@2.9.0`, environment variable interpolation is supported for flexibility and security:\n\n```codeBlockLines_e6Vv\nnetworks:\n    - id: ${ENVIO_CHAIN_ID:-ethereum-mainnet}\n      contracts:\n          - name: Greeter\n            address: ${ENVIO_GREETER_ADDRESS}\n\n```\n\nRun your indexer with custom environment variables:\n\n```codeBlockLines_e6Vv\nENVIO_CHAIN_ID=optimism ENVIO_GREETER_ADDRESS=0xYourContractAddress pnpm dev\n\n```\n\n**Interpolation syntax:**\n\n- `${ENVIO_VAR}` – Use the value of `ENVIO_VAR`\n- `${ENVIO_VAR:-default}` – Use `ENVIO_VAR` if set, otherwise use `default`\n\nFor more detailed information about environment variables, see our Environment Variables Guide.\n\n### Output Directory Path [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#output-directory-path \"Direct link to Output Directory Path\")\n\nYou can customize the path where the generated directory will be placed using the `output` option:\n\n```codeBlockLines_e6Vv\noutput: ./custom/generated/path\n\n```\n\nBy default, the generated directory is placed in `generated` relative to the current working directory. If set, it will be a path relative to the config file location.\n\nAdvanced Configuration\n\nThis is an advanced configuration option. When using a custom output directory, you'll need to manually adjust your `.gitignore` file and project structure to match the new configuration.\n\n## Configuration Schema Reference [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-schema-reference \"Direct link to Configuration Schema Reference\")\n\nExplore detailed configuration schema parameters here:\n\n- See the full, deep-linkable reference: Config Schema Reference\n\nFor AI/LLM Systems\n\n**Recommended**: Use the Config Schema Reference for programmatic access to schema information. The interactive viewer below is optimized for human users.\n\n📋 Hierarchical Interactive Schema Explorer (Click to expand - For human reference only)\n\n* * *\n\n## Schema File [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schema-file \"Direct link to Schema File\")\n\n**File:** `Guides/schema-file.md`\n\nThe **`schema.graphql`** file defines the data model for your HyperIndex indexer. Each entity type defined in this schema corresponds directly to a database table, with your event handlers responsible for creating and updating the records. HyperIndex automatically generates a GraphQL API based on these entity types, allowing easy access to the indexed data.\n\n## Scalar Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#scalar-types \"Direct link to Scalar Types\")\n\nScalar types represent basic data types and map directly to JavaScript, TypeScript, or ReScript types.\n\n| **GraphQL Scalar** | **Description** | **JavaScript/TypeScript** | **ReScript** |\n| --- | --- | --- | --- |\n| `ID` | Unique identifier | `string` | `string` |\n| `String` | UTF-8 character sequence | `string` | `string` |\n| `Int` | Signed 32-bit integer | `number` | `int` |\n| `Float` | Signed floating-point number | `number` | `float` |\n| `Boolean` | `true` or `false` | `boolean` | `bool` |\n| `Bytes` | UTF-8 character sequence (hex prefixed `0x`) | `string` | `string` |\n| `BigInt` | Signed integer ( `int256` in Solidity) | `bigint` | `bigint` |\n| `BigDecimal` | Arbitrary-size floating-point | `BigDecimal` (imported) | `BigDecimal.t` |\n| `Timestamp` | Timestamp with timezone | `Date` | `Js.Date.t` |\n| `Json` | JSON object (from envio@2.20) | `Json` | `Js.Json.t` |\n\nLearn more about GraphQL scalars here.\n\n## Enum Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#enum-types \"Direct link to Enum Types\")\n\nEnums allow fields to accept only a predefined set of values.\n\n**Example:**\n\n```codeBlockLines_e6Vv\nenum AccountType {\nADMIN\nUSER\n}\n\ntype User {\nid: ID!\nbalance: Int!\naccountType: AccountType!\n}\n\n```\n\nEnums translate to string unions (TypeScript/JavaScript) or polymorphic variants (ReScript):\n\n**TypeScript Example:**\n\n```codeBlockLines_e6Vv\n\nlet user = {\nid: event.params.id,\nbalance: event.params.balance,\naccountType: \"USER\", // enum as string\n};\n\n```\n\n**ReScript Example:**\n\n```codeBlockLines_e6Vv\nlet user: Types.userEntity = {\nid: event.params.id,\nbalance: event.params.balance,\naccountType: #USER, // polymorphic variant\n};\n\n```\n\n## Field Indexing ( `@index`) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#field-indexing-index \"Direct link to field-indexing-index\")\n\nAdd an index to a field for optimized queries and loader performance:\n\n```codeBlockLines_e6Vv\ntype Token {\nid: ID!\ntokenId: BigInt!\ncollection: NftCollection!\nowner: User! @index\n}\n\n```\n\n- All `id` fields and fields referenced via `@derivedFrom` are indexed automatically.\n\n## Generating Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#generating-types \"Direct link to Generating Types\")\n\nOnce you've defined your schema, run this command to generate these entity types that can be accessed in your event handlers:\n\n```codeBlockLines_e6Vv\npnpm envio codegen\n\n```\n\nYou're now ready to define powerful schemas and efficiently query your indexed data with HyperIndex!\n\n* * *\n\n## Event Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-handlers \"Direct link to Event Handlers\")\n\n**File:** `Guides/event-handlers.mdx`\n\n# Event Handlers\n\n## Registration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#registration \"Direct link to Registration\")\n\nA handler is a function that receives blockchain data, processes it, and inserts it into the database. You can register handlers in the file defined in the `handler` field in your `config.yaml` file. By default this is `src/EventHandlers.*` file.\n\n```codeBlockLines_e6Vv\n\n..handler(async ({ event, context }) => {\n// Your logic here\n});\n\n```\n\n```codeBlockLines_e6Vv\nconst {  } = require(\"generated\");\n\n..handler(async ({ event, context }) => {\n// Your logic here\n});\n\n```\n\n```codeBlockLines_e6Vv\nHandlers...handler(async ({ event, context }) => {\n// Your logic here\n});\n\n```\n\nnote\n\nThe `generated` module contains code and types based on `config.yaml` and `schema.graphql` files. Update it by running **`pnpm codegen`** command whenever you change these files.\n\n### Basic Example [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#basic-example \"Direct link to Basic Example\")\n\nHere's a handler example for the `NewGreeting` event. It belongs to the `Greeter` contract from our beginners Greeter Tutorial:\n\n```codeBlockLines_e6Vv\n\n// Handler for the NewGreeting event\nGreeter.NewGreeting.handler(async ({ event, context }) => {\nconst userId = event.params.user; // The id for the User entity\nconst latestGreeting = event.params.greeting; // The greeting string that was added\nconst currentUserEntity = await context.User.get(userId); // Optional user entity that may already exist\n\n// Update or create a new User entity\nconst userEntity: User = currentUserEntity\n    ? {\n        id: userId,\n        latestGreeting,\n        numberOfGreetings: currentUserEntity.numberOfGreetings + 1,\n        greetings: [...currentUserEntity.greetings, latestGreeting],\n      }\n    : {\n        id: userId,\n        latestGreeting,\n        numberOfGreetings: 1,\n        greetings: [latestGreeting],\n      };\n\ncontext.User.set(userEntity); // Set the User entity in the DB\n});\n\n```\n\n```codeBlockLines_e6Vv\nconst { Greeter } = require(\"generated\");\n\n// Handler for the NewGreeting event\nGreeter.NewGreeting.handler(async ({ event, context }) => {\nconst userId = event.params.user; // The id for the User entity\nconst latestGreeting = event.params.greeting; // The greeting string that was added\nconst currentUserEntity = await context.User.get(userId); // Optional user entity that may already exist\n\n// Update or create a new User entity\nconst userEntity = currentUserEntity\n    ? {\n        id: userId,\n        latestGreeting,\n        numberOfGreetings: currentUserEntity.numberOfGreetings + 1,\n        greetings: [...currentUserEntity.greetings, latestGreeting],\n      }\n    : {\n        id: userId,\n        latestGreeting,\n        numberOfGreetings: 1,\n        greetings: [latestGreeting],\n      };\n\ncontext.User.set(userEntity); // Set the User entity in the DB\n});\n\n```\n\n```codeBlockLines_e6Vv\nopen Types\n\n// Handler for the NewGreeting event\nHandlers.Greeter.NewGreeting.handler(async ({event, context}) => {\nlet userId = event.params.user->Address.toString // The id for the User entity\nlet latestGreeting = event.params.greeting // The greeting string that was added\nlet maybeCurrentUserEntity = await context.user.get(userId) // Optional User entity that may already exist\n\n// Update or create a new User entity\nlet userEntity: Entities.User.t = switch maybeCurrentUserEntity {\n| Some(existingUserEntity) => {\n      id: userId,\n      latestGreeting,\n      numberOfGreetings: existingUserEntity.numberOfGreetings + 1,\n      greetings: existingUserEntity.greetings->Belt.Array.concat([latestGreeting]),\n    }\n| None => {\n      id: userId,\n      latestGreeting,\n      numberOfGreetings: 1,\n      greetings: [latestGreeting],\n    }\n}\n\ncontext.user.set(userEntity) // Set the User entity in the DB\n})\n\n```\n\n### Preload Optimization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#preload-optimization \"Direct link to Preload Optimization\")\n\n> **Important!** Preload optimization makes your handlers run **twice**.\n\nStarting from `envio@2.27` all new indexers are created with preload optimization pre-configured by default.\n\nThis optimization enables HyperIndex to efficiently preload entities used by handlers through batched database queries, while ensuring events are processed synchronously in their original order. When combined with the Effect API for external calls, this feature delivers performance improvements of multiple orders of magnitude compared to other indexing solutions.\n\nRead more in the dedicated guides:\n\n- How Preload Optimization Works\n- Double-Run Footgun\n- Effect API\n- Migrating from Loaders (recommended)\n\n### Advanced Use Cases [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#advanced-use-cases \"Direct link to Advanced Use Cases\")\n\nHyperIndex provides many features to help you build more powerful and efficient indexers. There's definitely the one for you:\n\n- Handle Factory Contracts with Dynamic Contract Registration (with nested factories support)\n- Perform external calls to decide which contract address to register using Async Contract Register\n- Index all ERC20 token transfers with Wildcard Indexing\n- Use Topic Filtering to ignore irrelevant events\n  - With multiple filters for single event\n  - With different filters per network\n  - With filter by dynamicly registered contract addresses (eg Index all ERC20 transfers to/from your Contract)\n- Access Contract State directly from handlers\n- Perform external calls from handlers by following the IPFS Integration guide\n\n## Context Object [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#context-object \"Direct link to Context Object\")\n\nThe handler `context` provides methods to interact with entities stored in the database.\n\n### Retrieving Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#retrieving-entities \"Direct link to Retrieving Entities\")\n\nRetrieve entities from the database using `context.Entity.get` where `Entity` is the name of the entity you want to retrieve, which is defined in your schema.graphql file.\n\n```codeBlockLines_e6Vv\nawait context.Entity.get(entityId);\n\n```\n\nIt'll return `Entity` object or `undefined` if the entity doesn't exist.\n\nStarting from `envio@2.22.0` you can use `context.Entity.getOrThrow` to conveniently throw an error if the entity doesn't exist:\n\n```codeBlockLines_e6Vv\nconst pool = await context.Pool.getOrThrow(poolId);\n// Will throw: Entity 'Pool' with ID '...' is expected to exist.\n\n// Or you can pass a custom message as a second argument:\nconst pool = await context.Pool.getOrThrow(\npoolId,\n`Pool with ID ${poolId} is expected.`\n);\n\n```\n\nOr use `context.Entity.getOrCreate` to automatically create an entity with default values if it doesn't exist:\n\n```codeBlockLines_e6Vv\nconst pool = await context.Pool.getOrCreate({\nid: poolId,\ntotalValueLockedETH: 0n,\n});\n\n// Which is equivalent to:\nlet pool = await context.Pool.get(poolId);\nif (!pool) {\npool = {\n    id: poolId,\n    totalValueLockedETH: 0n,\n};\ncontext.Pool.set(pool);\n}\n\n```\n\n### Retrieving Entities by Field [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#retrieving-entities-by-field \"Direct link to Retrieving Entities by Field\")\n\n```codeBlockLines_e6Vv\nERC20.Approval.handler(async ({ event, context }) => {\n// Find all approvals for this specific owner\nconst currentOwnerApprovals = await context.Approval.getWhere.owner_id.eq(\n    event.params.owner\n);\n\n// Process all the owner's approvals efficiently\nfor (const approval of currentOwnerApprovals) {\n    // Process each approval\n}\n});\n\n```\n\nYou can also use `context..getWhere..gt` to get all entities where the field value is greater than the given value.\n\n**Important:**\n\n- This feature requires Preload Optimization to be enabled.\n  - Either by `preload_handlers: true` in your `config.yaml` file\n  - Or by using Loaders (Deprecated)\n- Works with any field that:\n  - Is used in a relationship with the `@derivedFrom` directive\n  - Has an `@index` directive\n- Potential Memory Issues: Very large `getWhere` queries might cause memory overflows.\n\n- Tip: Try to put the `getWhere` query to the top of the handler, to make sure it's being preloaded. Read more about how Preload Optimization works.\n\n\n### Modifying Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#modifying-entities \"Direct link to Modifying Entities\")\n\nUse `context.Entity.set` to create or update an entity:\n\n```codeBlockLines_e6Vv\ncontext.Entity.set({\nid: entityId,\n...otherEntityFields,\n});\n\n```\n\nnote\n\nBoth `context.Entity.set` and `context.Entity.deleteUnsafe` methods use the In-Memory Storage under the hood and don't require `await` in front of them.\n\n### Referencing Linked Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#referencing-linked-entities \"Direct link to Referencing Linked Entities\")\n\nWhen your schema defines a field that links to another entity type, set the relationship using `_id` with the referenced entity's `id`. You are storing the ID, not the full entity object.\n\n```codeBlockLines_e6Vv\ntype A {\nid: ID!\nb: B!\n}\n\ntype B {\nid: ID!\n}\n\n```\n\n```codeBlockLines_e6Vv\ncontext.A.set({\nid: aId,\nb_id: bId, // ID of the linked B entity\n});\n\n```\n\nHyperIndex automatically resolves `A.b` based on the stored `b_id` when querying the API.\n\n### Deleting Entities (Unsafe) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deleting-entities-unsafe \"Direct link to Deleting Entities (Unsafe)\")\n\nTo delete an entity:\n\n```codeBlockLines_e6Vv\ncontext.Entity.deleteUnsafe(entityId);\n\n```\n\nwarning\n\nThe `deleteUnsafe` method is experimental and **unsafe**. You need to manually handle all entity references after deletion to maintain database consistency.\n\n### Updating Specific Entity Fields [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#updating-specific-entity-fields \"Direct link to Updating Specific Entity Fields\")\n\nUse the following approach to update specific fields in an existing entity:\n\n```codeBlockLines_e6Vv\nconst pool = await context.Pool.get(poolId);\nif (pool) {\ncontext.Pool.set({\n    ...pool,\n    totalValueLockedETH: pool.totalValueLockedETH.plus(newDeposit),\n});\n}\n\n```\n\n```codeBlockLines_e6Vv\nconst pool = await context.Pool.get(poolId);\nif (pool) {\ncontext.Pool.set({\n    ...pool,\n    totalValueLockedETH: pool.totalValueLockedETH.plus(newDeposit),\n});\n}\n\n```\n\n```codeBlockLines_e6Vv\nlet pool = await context.pool.get(poolId);\npool->Option.forEach(pool => {\ncontext.pool.set({\n    ...pool,\n    totalValueLockedETH: pool.totalValueLockedETH.plus(newDeposit),\n});\n});\n\n```\n\n### `context.log` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contextlog \"Direct link to contextlog\")\n\nThe context object also provides a logger that you can use to log messages to the console. Compared to `console.log` calls, these logs will be displayed on our Hosted Service runtime logs page.\n\nRead more in the Logging Guide.\n\n### `context.isPreload` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contextispreload \"Direct link to contextispreload\")\n\nIf you need to skip the preload phase for CPU-intensive operations or to perform certain actions only once per event, you can use `context.isPreload`.\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\n// Load existing data efficiently\nconst [sender, receiver] = await Promise.all([\\\n    context.Account.getOrThrow(event.params.from),\\\n    context.Account.getOrThrow(event.params.to),\\\n]);\n\n// Skip expensive operations during preload\nif (context.isPreload) {\n    return;\n}\n\n// CPU-intensive calculations only happen once\nconst complexCalculation = performExpensiveOperation(event.params.value); // Placeholder function for demonstration\n\n// Create or update sender account\ncontext.Account.set({\n    id: event.params.from,\n    balance: sender.balance - event.params.value,\n    computedValue: complexCalculation,\n});\n// Create or update receiver account\ncontext.Account.set({\n    id: event.params.to,\n    balance: receiver.balance + event.params.value,\n});\n});\n\n```\n\n**Note:** While `context.isPreload` can be useful for bypassing double execution, it's recommended to use the Effect API for external calls instead, as it provides automatic batching and memoization benefits.\n\n## External Calls [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#external-calls \"Direct link to External Calls\")\n\nEnvio indexer runs using Node.js runtime. This means that you can use `fetch` or any other library like `viem` to perform external calls from your handlers.\n\nNote that with Preload Optimization all handlers run twice. But with Effect API this behavior makes your external calls run in parallel, while keeping the processing data consistent.\n\nCheck out our IPFS Integration, Accessing Contract State and Effect API guides for more information.\n\n### `context.effect` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contexteffect \"Direct link to contexteffect\")\n\nDefine an effect and use it in your handler with `context.effect`:\n\n```codeBlockLines_e6Vv\n\n// Define an effect that will be called from the handler.\nconst getMetadata = experimental_createEffect(\n{\n    name: \"getMetadata\",\n    input: S.string,\n    output: {\n      description: S.string,\n      value: S.bigint,\n    },\n    cache: true, // Optionally persist the results in the database\n},\n({ input }) => {\n    const response = await fetch(`https://api.example.com/metadata/${input}`);\n    const data = await response.json();\n    return {\n      description: data.description,\n      value: data.value,\n    };\n}\n);\n\nERC20.Transfer.handler(async ({ event, context }) => {\n// Load metadata for the token.\n// This will be executed in parallel for all events in the batch.\n// The call is automatically memoized, so you don't need to worry about duplicate requests.\nconst sender = await context.effect(getMetadata, event.params.from);\n\n// Process the transfer with the pre-loaded data\n});\n\n```\n\n## Performance Considerations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#performance-considerations \"Direct link to Performance Considerations\")\n\nFor performance optimization and best practices, refer to:\n\n- Benchmarking\n- Preload Optimization\n\nThese guides offer detailed recommendations on optimizing entity loading and indexing performance.\n\n* * *\n\n## Block Handlers (new in v2.29) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#block-handlers-new-in-v229 \"Direct link to Block Handlers (new in v2.29)\")\n\n**File:** `Guides/block-handlers.md`\n\nRun logic on every block or an interval.\n\n* * *\n\n## Multichain Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#multichain-indexing \"Direct link to Multichain Indexing\")\n\n**File:** `Advanced/multichain-indexing.mdx`\n\n# Understanding Multichain Indexing\n\nMultichain indexing allows you to monitor and process events from contracts deployed across multiple blockchain networks within a single indexer instance. This capability is essential for applications that:\n\n- Track the same contract deployed across multiple networks\n- Need to aggregate data from different chains into a unified view\n- Monitor cross-chain interactions or state\n\n## How It Works [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-it-works \"Direct link to How It Works\")\n\nWith multichain indexing, events from contracts deployed on multiple chains can be used to create and update entities defined in your schema file. Your indexer will process events from all configured networks, maintaining proper synchronization across chains.\n\n## Configuration Requirements [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-requirements \"Direct link to Configuration Requirements\")\n\nTo implement multichain indexing, you need to:\n\n1. Populate the `networks` section in your `config.yaml` file for each chain\n2. Specify contracts to index from each network\n3. Create event handlers for the specified contracts\n\n## Real-World Example: Uniswap V4 Multichain Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#real-world-example-uniswap-v4-multichain-indexer \"Direct link to Real-World Example: Uniswap V4 Multichain Indexer\")\n\nFor a comprehensive, production-ready example of multichain indexing, we recommend exploring our Uniswap V4 Multichain Indexer. This official reference implementation:\n\n- Indexes Uniswap V4 deployments across 10 different blockchain networks\n- Powers the official v4.xyz interface with real-time data\n- Demonstrates best practices for high-performance multichain indexing\n- Provides a complete, production-grade implementation you can study and adapt\n\n!V4 indexer\n\nThe Uniswap V4 indexer showcases how to effectively structure a multichain indexer for a complex DeFi protocol, handling high volumes of data across multiple networks while maintaining performance and reliability.\n\n## Config File Structure for Multichain Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#config-file-structure-for-multichain-indexing \"Direct link to Config File Structure for Multichain Indexing\")\n\nThe `config.yaml` file for multichain indexing contains three key sections:\n\n1. **Global contract definitions** \\- Define contracts, ABIs, and events once\n2. **Network-specific configurations** \\- Specify chain IDs and starting blocks\n3. **Contract instances** \\- Reference global contracts with network-specific addresses\n\n```codeBlockLines_e6Vv\n# Example structure (simplified)\ncontracts:\n  - name: ExampleContract\n    abi_file_path: ./abis/example-abi.json\n    handler: ./src/EventHandlers.js\n    events:\n      - event: ExampleEvent\n\nnetworks:\n  - id: 1 # Ethereum Mainnet\n    start_block: 0\n    contracts:\n      - name: ExampleContract\n        address: \"0x1234...\"\n  - id: 137 # Polygon\n    start_block: 0\n    contracts:\n      - name: ExampleContract\n        address: \"0x5678...\"\n\n```\n\n### Key Configuration Concepts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-configuration-concepts \"Direct link to Key Configuration Concepts\")\n\n- The global `contracts` section defines the contract interface, ABI, handlers, and events once\n- The `networks` section lists each blockchain network you want to index\n- Each network entry references the global contract and provides the network-specific address\n- This structure allows you to reuse the same handler functions and event definitions across networks\n\n> 📢 **Best Practice**: When developing multichain indexers, append the chain ID to entity IDs to avoid collisions. For example: `user-1` for Ethereum and `user-137` for Polygon.\n\n## Multichain Event Ordering [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#multichain-event-ordering \"Direct link to Multichain Event Ordering\")\n\nWhen indexing multiple chains, you have two approaches for handling event ordering:\n\n### Unordered Multichain Mode [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#unordered-multichain-mode \"Direct link to Unordered Multichain Mode\")\n\nnote\n\nUnordered mode is recommended for most applications.\n\nThe indexer processes events as soon as they're available from each chain, without waiting for other chains. This \"Unordered Multichain Mode\" provides better performance and lower latency.\n\n- Events will still be processed in order within each individual chain\n- Events across different chains may be processed out of order\n- Processing happens as soon as events are emitted, reducing latency\n- You avoid waiting for the slowest chain's block time\n\nThis mode is ideal for most applications, especially when:\n\n- Operations on your entities are commutative (order doesn't matter)\n- Entities from different networks never interact with each other\n- Processing speed is more important than guaranteed cross-chain ordering\n\n#### How to Enable Unordered Mode [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-to-enable-unordered-mode \"Direct link to How to Enable Unordered Mode\")\n\nIn your config.yaml:\n\n```codeBlockLines_e6Vv\nunordered_multichain_mode: true\nnetworks: ...\n\n```\n\n### Ordered Mode [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ordered-mode \"Direct link to Ordered Mode\")\n\nnote\n\nOrdered mode is currently the default mode. But it'll be changed to unordered mode in the future. If you don't need strict deterministic ordering of events across all chains, it's recommended to use unordered mode.\n\nIf your application requires strict deterministic ordering of events across all chains, you can enable \"Ordered Mode\". In this mode, the indexer synchronizes event processing across all chains, ensuring that events are processed in the exact same order in every indexer run, regardless of which chain they came from.\n\n#### When to Use Ordered Mode [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-use-ordered-mode \"Direct link to When to Use Ordered Mode\")\n\nUse ordered mode only when:\n\n- The exact ordering of operations across different chains is critical to your application logic\n- You need guaranteed deterministic results across all indexer runs\n- You're willing to accept higher latency for cross-chain consistency\n\nCross-chain ordering is particularly important for applications like:\n\n- **Bridge applications**: Where messages or assets must be processed on one chain before being processed on another chain\n- **Cross-chain governance**: Where decisions made on one chain affect operations on another chain\n- **Multi-chain financial applications**: Where the sequence of transactions across chains affects accounting or risk calculations\n- **Data consistency systems**: Where the state must be consistent across multiple chains in a specific order\n\n#### Technical Details [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#technical-details \"Direct link to Technical Details\")\n\nWith ordered mode enabled:\n\n- The indexer needs to wait for all blocks to increment from each network\n- There is increased latency between when an event is emitted and when it's processed\n- Processing speed is limited by the block interval of the slowest network\n- Events are guaranteed to be processed in the same order in every indexer run\n\n#### Cross-Chain Ordering Preservation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#cross-chain-ordering-preservation \"Direct link to Cross-Chain Ordering Preservation\")\n\nOrdered mode ensures that the temporal relationship between events on different chains is preserved. This is achieved by:\n\n1. **Global timestamp ordering**: Events are ordered based on their block timestamps across all chains\n2. **Deterministic processing**: The same sequence of events will be processed in the same order every time\n\nThe primary trade-off is increased latency at the head of the chain. Since the indexer must wait for blocks from all chains to determine the correct ordering, the processing of recent events is delayed by the slowest chain's block time. For example, if Chain A has 2-second blocks and Chain B has 15-second blocks, the indexer will process events at the slower 15-second rate to maintain proper ordering.\n\nThis latency is acceptable for applications where correct cross-chain ordering is more important than real-time updates. For bridge applications in particular, this ordering preservation can be critical for security and correctness, as it ensures that deposit events on one chain are always processed before the corresponding withdrawal events on another chain.\n\n## Best Practices for Multichain Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-for-multichain-indexing \"Direct link to Best Practices for Multichain Indexing\")\n\n### 1\\. Entity ID Namespacing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-entity-id-namespacing \"Direct link to 1. Entity ID Namespacing\")\n\nAlways namespace your entity IDs with the chain ID to prevent collisions between networks. This ensures that entities from different networks remain distinct.\n\n### 2\\. Error Handling [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-error-handling \"Direct link to 2. Error Handling\")\n\nImplement robust error handling for network-specific issues. A failure on one chain shouldn't prevent indexing from continuing on other chains.\n\n### 3\\. Testing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-testing \"Direct link to 3. Testing\")\n\n- Test your indexer with realistic scenarios across all networks\n- Use testnet deployments for initial validation\n- Verify entity updates work correctly across chains\n\n### 4\\. Performance Considerations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#4-performance-considerations \"Direct link to 4. Performance Considerations\")\n\n- Use unordered mode when appropriate for better performance\n- Consider your indexing frequency based on the block times of each chain\n- Monitor resource usage, as indexing multiple chains increases load\n\n## Troubleshooting Common Issues [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting-common-issues \"Direct link to Troubleshooting Common Issues\")\n\n1. **Different Network Speeds**: If one network is significantly slower than others, consider using unordered mode to prevent bottlenecks.\n\n2. **Entity Conflicts**: If you see unexpected entity updates, verify that your entity IDs are properly namespaced with chain IDs.\n\n3. **Memory Usage**: If your indexer uses excessive memory, consider optimizing your entity structure and implementing pagination in your queries.\n\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#next-steps \"Direct link to Next Steps\")\n\n- Explore our Uniswap V4 Multichain Indexer for a complete implementation\n- Review performance optimization techniques for your indexer\n\n* * *\n\n## Testing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#testing \"Direct link to Testing\")\n\n**File:** `Guides/testing.mdx`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-1 \"Direct link to Introduction\")\n\nEnvio comes with a built-in testing library that enables developers to thoroughly validate their indexer behavior without requiring deployment or interaction with actual blockchains. This library is specifically crafted to:\n\n- **Mock database states**: Create and manipulate in-memory representations of your database\n- **Simulate blockchain events**: Generate test events that mimic real blockchain activity\n- **Assert event handler logic**: Verify that your handlers correctly process events and update entities\n- **Test complete workflows**: Validate the entire process from event creation to database updates\n\nThe testing library provides helper functions that integrate with any JavaScript-based testing framework (like Mocha, Jest, or others), giving you flexibility in how you structure and run your tests.\n\n## Learn by doing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#learn-by-doing \"Direct link to Learn by doing\")\n\nIf you prefer to explore by example, the Greeter template includes complete tests that demonstrate best practices:\n\n1. Generate `greeter` template in TypeScript using Envio CLI\n\n```codeBlockLines_e6Vv\npnpx envio init template -l typescript -d greeter -t greeter -n greeter\n\n```\n\n2. Run tests\n\n```codeBlockLines_e6Vv\npnpm test\n\n```\n\n3. See the `test/test.ts` file to understand how the tests are written.\n\n## Writing tests [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#writing-tests \"Direct link to Writing tests\")\n\n### Test Library Design [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#test-library-design \"Direct link to Test Library Design\")\n\nThe testing library follows key design principles that make it effective for testing HyperIndex indexers:\n\n- **Immutable database**: The mock database is immutable, with each operation returning a new instance. This makes it robust and easy to test against previous states.\n- **Chainable operations**: Operations can be chained together to build complex test scenarios.\n- **Realistic simulations**: Mock events closely mirror real blockchain events, allowing you to test your handlers in conditions similar to production.\n\n### Typical Test Flow [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#typical-test-flow \"Direct link to Typical Test Flow\")\n\nMost tests will follow this general pattern:\n\n1. Initialize the mock database (empty or with predefined entities)\n2. Create a mock event with test parameters\n3. Process the mock event through your handler(s)\n4. Assert that the resulting database state matches your expectations\n\nThis flow allows you to verify that your event handlers correctly create, update, or modify entities in response to blockchain events.\n\n## Assertions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#assertions \"Direct link to Assertions\")\n\nThe testing library works with any JavaScript assertion library. In the examples, we use Node.js's built-in assert module, but you can also use popular alternatives like chai or expect.\n\nCommon assertion patterns include:\n\n- `assert.deepEqual(expectedEntity, actualEntity)` \\- Check that entire entities match\n- `assert.equal(expectedValue, actualEntity.property)` \\- Verify specific property values\n- `assert.ok(updatedMockDb.entities.Entity.get(id))` \\- Ensure an entity exists\n\n## Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting \"Direct link to Troubleshooting\")\n\nIf you encounter issues with your tests, check the following:\n\n### Environment and Setup [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-and-setup \"Direct link to Environment and Setup\")\n\n1. **Verify your Envio version**: The testing library is available in versions `v0.0.26` and above\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   pnpm envio -v\n\n   ```\n\n2. **Ensure you've generated testing code**: Always run codegen after updating your schema or config\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   pnpm codegen\n\n   ```\n\n3. **Check your imports**: Make sure you're importing the correct files\n\n\n```codeBlockLines_e6Vv\n\nconst { MockDb, Greeter, Addresses } = TestHelpers;\n\n```\n\n```codeBlockLines_e6Vv\nconst assert = require(\"assert\");\nconst { UserEntity, TestHelpers } = require(\"generated\");\nconst { MockDb, Greeter, Addresses } = TestHelpers;\n\n```\n\n```codeBlockLines_e6Vv\nopen RescriptMocha\nopen Mocha\nopen Belt\n\n```\n\n### Common Issues and Solutions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#common-issues-and-solutions \"Direct link to Common Issues and Solutions\")\n\n- **\"Cannot read properties of undefined\"**: This usually means an entity wasn't found in the database. Verify your IDs match exactly and that the entity exists before accessing it.\n\n- **\"Type mismatch\"**: Ensure that your entity structure matches what's defined in your schema. Type issues are common when working with numeric types (like `BigInt` vs `number`).\n\n- **ReScript specific setup**: If using ReScript, remember to update your `rescript.json` file:\n\n\n\n\n\n  ```codeBlockLines_e6Vv\n  {\n    \"sources\": [\\\n      { \"dir\": \"src\", \"subdirs\": true },\\\n      { \"dir\": \"test\", \"subdirs\": true }\\\n    ],\n    \"bs-dependencies\": [\"rescript-mocha\"]\n  }\n\n  ```\n\n- **Debug database state**: If you're having trouble with assertions, add a debug log to see the exact state of your entities:\n\n\n\n\n\n  ```codeBlockLines_e6Vv\n  console.log(\n    JSON.stringify(updatedMockDb.entities.User.get(userAddress), null, 2)\n  );\n\n  ```\n\n\nIf you encounter any issues or have questions, please reach out to us on Discord\n\n* * *\n\n## Navigating Hasura [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#navigating-hasura \"Direct link to Navigating Hasura\")\n\n**File:** `Guides/navigating-hasura.md`\n\n> This page is only relevant when testing on a local machine or using a self-hosted version of Envio that uses Hasura.\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-2 \"Direct link to Introduction\")\n\nHasura is a GraphQL engine that provides a web interface for interacting with your indexed blockchain data. When running HyperIndex locally, Hasura serves as your primary tool for:\n\n- Querying indexed data via GraphQL\n- Visualizing database tables and relationships\n- Testing API endpoints before integration with your frontend\n- Monitoring the indexing process\n\nThis guide explains how to navigate the Hasura dashboard to effectively work with your indexed data.\n\n## Accessing Hasura Console [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#accessing-hasura-console \"Direct link to Accessing Hasura Console\")\n\nWhen running HyperIndex locally, Hasura Console is automatically available at:\n\n```codeBlockLines_e6Vv\nhttp://localhost:8080\n\n```\n\nYou can access this URL in any web browser to open the Hasura console.\n\nnote\n\nWhen prompted for authentication, use the password: `testing`\n\n## Key Dashboard Areas [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-dashboard-areas \"Direct link to Key Dashboard Areas\")\n\nThe Hasura dashboard has several tabs, but we'll focus on the two most important ones for HyperIndex developers:\n\n### API Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#api-tab \"Direct link to API Tab\")\n\nThe API tab lets you execute GraphQL queries and mutations on indexed data. It serves as a GraphQL playground for testing your API calls.\n\n#### Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#features \"Direct link to Features\")\n\n- **Explorer Panel**: The left panel shows all available entities defined in your `schema.graphql` file\n- **Query Builder**: The center area is where you write and execute GraphQL queries\n- **Results Panel**: The right panel displays query results in JSON format\n\n#### Available Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#available-entities \"Direct link to Available Entities\")\n\nBy default, you'll see:\n\n- All entities defined in your `schema.graphql` file\n- `dynamic_contracts` (for dynamically added contracts)\n- `raw_events` table (Note: This table is no longer populated by default to improve performance. To enable storage of raw events, add `raw_events: true` to your `config.yaml` file as described in the Raw Events Storage section)\n\n#### Example Query [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-query \"Direct link to Example Query\")\n\nTry a simple query to test your indexer:\n\n```codeBlockLines_e6Vv\nquery MyQuery {\nUser(limit: 5) {\n    id\n    latestGreeting\n    numberOfGreetings\n}\n}\n\n```\n\nClick the \"Play\" button to execute the query and see the results.\n\nFor more advanced GraphQL query options, see Hasura's quickstart guide.\n\n### Data Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#data-tab \"Direct link to Data Tab\")\n\nThe Data tab provides direct access to your database tables and relationships, allowing you to view the actual indexed data.\n\n#### Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#features-1 \"Direct link to Features\")\n\n- **Schema Browser**: View all tables in the database (left panel)\n- **Table Data**: Examine and browse data within each table\n- **Relationship Viewer**: See how different entities are connected\n\n#### Working with Tables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#working-with-tables \"Direct link to Working with Tables\")\n\n1. Select any table from the \"public\" schema to view its contents\n2. Use the \"Browse Rows\" tab to see all data in that table\n3. Check the \"Insert Row\" tab to manually add data (useful for testing)\n4. View the \"Modify\" tab to see the table structure\n\n#### Verifying Indexed Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#verifying-indexed-data \"Direct link to Verifying Indexed Data\")\n\nTo confirm your indexer is working correctly:\n\n1. Check entity tables to ensure they contain the expected data\n2. Look at the `db_write_timestamp` column values to confirm when data was last updated\n3. Newer timestamps indicate fresh data; older timestamps might indicate stale data from previous runs\n\n## Common Tasks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#common-tasks \"Direct link to Common Tasks\")\n\n### Checking Indexing Status [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#checking-indexing-status \"Direct link to Checking Indexing Status\")\n\nTo verify your indexer is actively processing new blocks:\n\n1. Go to the Data tab\n2. Select any entity table\n3. Check the latest `db_write_timestamp` values\n4. Monitor these values over time to ensure they're updating\n\n(Note the TUI is also an easy way to monitor this)\n\n### Troubleshooting Missing Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting-missing-data \"Direct link to Troubleshooting Missing Data\")\n\nIf expected data isn't appearing:\n\n1. Check if you've enabled raw events storage ( `raw_events: true` in `config.yaml`) and then examine the `raw_events` table to confirm events were captured\n2. Verify your event handlers are correctly processing these events\n3. Examine your GraphQL queries to ensure they match your schema structure\n4. Check console logs for any processing errors\n\n### Resetting Indexed Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#resetting-indexed-data \"Direct link to Resetting Indexed Data\")\n\nWhen testing, you may need to reset your database:\n\n1. Stop your indexer\n2. Reset your database (refer to the development guide for commands)\n3. Restart your indexer to begin processing from the configured start block\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices \"Direct link to Best Practices\")\n\n- **Regular Verification**: Periodically check both the API and Data tabs to ensure your indexer is functioning correctly\n- **Query Testing**: Test complex queries in the API tab before implementing them in your application\n- **Schema Validation**: Use the Data tab to verify that relationships between entities are correctly established\n- **Performance Monitoring**: Watch for tables that grow unusually large, which might indicate inefficient indexing\n\n## Aggregations: local vs hosted (avoid the foot‑gun) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#aggregations-local-vs-hosted-avoid-the-footgun \"Direct link to Aggregations: local vs hosted (avoid the foot‑gun)\")\n\nWhen developing locally with Hasura, you may notice that GraphQL aggregate helpers (for example, count/sum-style aggregations) are available. On the hosted service, these aggregate endpoints are intentionally not exposed. Aggregations over large datasets can be very slow and unpredictable in production.\n\nThe recommended approach is to compute and store aggregates at indexing time, not at query time. In practice this means maintaining counters, sums, and other rollups in entities as part of your event handlers, and then querying those precomputed values.\n\n### Example: indexing-time aggregation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-indexing-time-aggregation \"Direct link to Example: indexing-time aggregation\")\n\nschema.graphql\n\n```codeBlockLines_e6Vv\n# singleton; you hardcode the id and load it in and out\ntype GlobalState {\nid: ID! # \"global-state\"\ncount: Int!\n}\n\ntype Token {\nid: ID! # incremental number\ndescription: String!\n}\n\n```\n\nEventHandler.ts\n\n```codeBlockLines_e6Vv\nconst globalStateId = \"global-state\";\n\nNftContract.Mint.handler(async ({event, context}) => {\nconst globalState = await context.GlobalState.get(globalStateId);\n\nif (!globalState) {\n    context.log.error(\"global state doesn't exist\");\n    return;\n}\n\nconst incrementedTokenId = globalState.count + 1;\n\ncontext.Token.set({\n    id: incrementedTokenId,\n    description: event.params.description,\n});\n\ncontext.GlobalState.set({\n    ...globalState,\n    count: incrementedTokenId,\n});\n});\n\n```\n\nThis pattern scales: you can keep per-entity counters, rolling windows (daily/hourly entities keyed by date), and top-N caches by updating entities as events arrive. Your queries then read these precomputed values directly, avoiding expensive runtime aggregations.\n\n#### Exceptional cases [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#exceptional-cases \"Direct link to Exceptional cases\")\n\nIf runtime aggregate queries are a hard requirement for your use case, please reach out and we can evaluate options for your project on the hosted service. Contact us on Discord.\n\n## Disable Hasura for Self-Hosted Indexers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#disable-hasura-for-self-hosted-indexers \"Direct link to Disable Hasura for Self-Hosted Indexers\")\n\nStarting from `envio@2.26.0` it's possible to disable Hasura integration for self-hosted indexers. To do so, set the `ENVIO_HASURA` environment variable to `false`.\n\n* * *\n\n## Environment Variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-variables-1 \"Direct link to Environment Variables\")\n\n**File:** `Guides/environment-variables.md`\n\nEnvironment variables are a crucial part of configuring your Envio indexer. They allow you to manage sensitive information and configuration settings without hardcoding them in your codebase.\n\n## Naming Convention [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#naming-convention \"Direct link to Naming Convention\")\n\nAll environment variables used by Envio must be prefixed with `ENVIO_`. This naming convention:\n\n- Prevents conflicts with other environment variables\n- Makes it clear which variables are used by the Envio indexer\n- Ensures consistency across different environments\n\n## Envio API Token (required for HyperSync) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-api-token-required-for-hypersync \"Direct link to Envio API Token (required for HyperSync)\")\n\nTo ensure continued access to HyperSync, set an Envio API token in your environment.\n\n- Use `ENVIO_API_TOKEN` to provide your token at runtime\n- See the API Tokens guide for how to generate a token: API Tokens\n\n## Envio-specific environment variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-specific-environment-variables \"Direct link to Envio-specific environment variables\")\n\nThe following variables are used by HyperIndex:\n\n- `ENVIO_API_TOKEN`: API token for HyperSync access (required for continued access in self-hosted deployments)\n\n- `ENVIO_HASURA`: Set to `false` to disable Hasura integration for self-hosted indexers\n\n- `MAX_BATCH_SIZE`: Size of the in-memory batch before writing to the database. Default: `5000`. Set to `1` to help isolate which event or data save is causing Postgres write errors.\n\n- `ENVIO_PG_PORT`: Port for the Postgres service used by HyperIndex during local development\n\n- `ENVIO_PG_PASSWORD`: Postgres password (self-hosted)\n\n- `ENVIO_PG_USER`: Postgres username (self-hosted)\n\n- `ENVIO_PG_DATABASE`: Postgres database name (self-hosted)\n\n- `ENVIO_PG_PUBLIC_SCHEMA`: Postgres schema name override for the generated/public schema\n\n\n## Example Environment Variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-environment-variables \"Direct link to Example Environment Variables\")\n\nHere are some commonly used environment variables:\n\n```codeBlockLines_e6Vv\n# Envio API Token (required for continued HyperSync access)\nENVIO_API_TOKEN=your-secret-token\n\n# Blockchain RPC URL\nENVIO_RPC_URL=https://arbitrum.direct.dev/your-api-key\n\n# Starting block number for indexing\nENVIO_START_BLOCK=12345678\n\n# Coingecko API key\nENVIO_COINGECKO_API_KEY=api-key\n\n# In-memory batch size (default 5000)\nMAX_BATCH_SIZE=1\n\n```\n\n## Setting Environment Variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#setting-environment-variables \"Direct link to Setting Environment Variables\")\n\n### Local Development [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#local-development \"Direct link to Local Development\")\n\nFor local development, you can set environment variables in several ways:\n\n1. Using a `.env` file in your project root:\n\n```codeBlockLines_e6Vv\n# .env\nENVIO_API_TOKEN=your-secret-token\nENVIO_RPC_URL=https://arbitrum.direct.dev/your-api-key\nENVIO_START_BLOCK=12345678\n\n```\n\n2. Directly in your terminal:\n\n```codeBlockLines_e6Vv\nexport ENVIO_API_TOKEN=your-secret-token\nexport ENVIO_RPC_URL=https://arbitrum.direct.dev/your-api-key\n\n```\n\n### Hosted Service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service \"Direct link to Hosted Service\")\n\nWhen using the Envio Hosted Service, you can configure environment variables through the Envio platform's dashboard. Remember that all variables must still be prefixed with `ENVIO_`.\n\nFor more information about environment variables in the hosted service, see the Hosted Service documentation.\n\n## Configuration File [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-file \"Direct link to Configuration File\")\n\nFor use of environment variables in your configuration file, read the docs here: Configuration File.\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-1 \"Direct link to Best Practices\")\n\n1. **Never commit sensitive values**: Always use environment variables for sensitive information like API keys and database credentials\n2. **Never commit or use private keys**: Never commit or use private keys in your codebase\n3. **Use descriptive names**: Make your environment variable names clear and descriptive\n4. **Document your variables**: Keep a list of required environment variables in your project's README\n5. **Use different values**: Use different environment variables for development, staging, and production environments\n6. **Validate required variables**: Check that all required environment variables are set before starting your indexer\n\n## Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting-1 \"Direct link to Troubleshooting\")\n\nIf you encounter issues with environment variables:\n\n1. Verify that all required variables are set\n2. Check that variables are prefixed with `ENVIO_`\n3. Ensure there are no typos in variable names\n4. Confirm that the values are correctly formatted\n\nFor more help, see our Troubleshooting Guide.\n\n* * *\n\n## Uniswap V4 Multi-chain Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#uniswap-v4-multi-chain-indexer \"Direct link to Uniswap V4 Multi-chain Indexer\")\n\n**File:** `Examples/example-uniswap-v4.md`\n\nThe following indexer example is a reference implementation and can serve as a starting point for applications with similar logic.\n\nThis official Uniswap V4 indexer is a comprehensive implementation for the Uniswap V4 protocol using Envio HyperIndex. This is the same indexer that powers the v4.xyz website, providing real-time data for the Uniswap V4 interface.\n\n## Key Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-features \"Direct link to Key Features\")\n\n- **Multi-chain Support**: Indexes Uniswap V4 deployments across 10 different blockchain networks in real-time\n- **Complete Pool Metrics**: Tracks pool statistics including volume, TVL, fees, and other critical metrics\n- **Swap Analysis**: Monitors swap events and liquidity changes with high precision\n- **Hook Integration**: In-progress support for Uniswap V4 hooks and their events\n- **Production Ready**: Powers the official v4.xyz interface with production-grade reliability\n- **Ultra-Fast Syncing**: Processes massive amounts of blockchain data significantly faster than alternative indexing solutions, reducing sync times from days to minutes\n\n!V4 gif\n\n## Technical Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#technical-overview \"Direct link to Technical Overview\")\n\nThis indexer is built using TypeScript and provides a unified GraphQL API for accessing Uniswap V4 data across all supported networks. The architecture is designed to handle high throughput and maintain consistency across different blockchain networks.\n\n### Performance Advantages [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#performance-advantages \"Direct link to Performance Advantages\")\n\nThe Envio-powered Uniswap V4 indexer offers extraordinary performance benefits:\n\n- **10-100x Faster Sync Times**: Leveraging Envio's HyperSync technology, this indexer can process historical blockchain data orders of magnitude faster than traditional solutions\n- **Real-time Updates**: Maintains low latency for new blocks while efficiently managing historical data\n\n## Use Cases [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-cases \"Direct link to Use Cases\")\n\n- Power analytics dashboards and trading interfaces\n- Monitor DeFi positions and protocol health\n- Track historical performance of Uniswap V4 pools\n- Build custom notifications and alerts\n- Analyze hook interactions and their impact\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-1 \"Direct link to Getting Started\")\n\nTo use this indexer, you can:\n\n1. Clone the repository\n2. Follow the installation instructions in the README\n3. Run the indexer locally or deploy it to a production environment\n4. Access indexed data through the GraphQL API\n\n## Contribution [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contribution \"Direct link to Contribution\")\n\nThe Uniswap V4 indexer is actively maintained and welcomes contributions from the community. If you'd like to contribute or report issues, please visit the GitHub repository.\n\nnote\n\nThis is an official reference implementation that powers the v4.xyz website. While extensively tested in production, remember to validate the data for your specific use case. The indexer is continuously updated to support the latest Uniswap V4 features and optimizations.\n\n* * *\n\n## Sablier Protocol Indexers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#sablier-protocol-indexers \"Direct link to Sablier Protocol Indexers\")\n\n**File:** `Examples/example-sablier.md`\n\nThe following indexers serve as exceptional reference implementations for the Sablier protocol, showcasing professional development practices and efficient multi-chain data processing.\n\n## Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-2 \"Direct link to Overview\")\n\nSablier is a token streaming protocol that enables real-time finance on the blockchain, allowing tokens to be streamed continuously over time. These official Sablier indexers track streaming activity across 18 different EVM-compatible chains, providing comprehensive data through a unified GraphQL API.\n\n## Professional Indexer Suite [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#professional-indexer-suite \"Direct link to Professional Indexer Suite\")\n\nSablier maintains three specialized indexers, each targeting a specific part of their protocol:\n\n### 1\\. Lockup Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-lockup-indexer \"Direct link to 1. Lockup Indexer\")\n\nTracks the core Sablier lockup contracts, which handle the streaming of tokens with fixed durations and amounts. This indexer provides data about stream creation, cancellation, and withdrawal events. Used primarily for the vesting functionality of Sablier.\n\n### 2\\. Flow Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-flow-indexer \"Direct link to 2. Flow Indexer\")\n\nMonitors Sablier's advanced streaming functionality, allowing for dynamic flow rates and more complex streaming scenarios. This indexer captures stream modifications, batch operations, and other flow-specific events. Powers the payments side of the Sablier application.\n\n### 3\\. Merkle Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-merkle-indexer \"Direct link to 3. Merkle Indexer\")\n\nTracks Sablier's Merkle distribution system, which enables efficient batch stream creation using cryptographic proofs. This indexer provides data about batch creations, claims, and related activities. Used for both Airstreams and Instant Airdrops functionality.\n\n## Key Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-features-1 \"Direct link to Key Features\")\n\n- **Comprehensive Multi-chain Support**: Indexes data across 18 different EVM chains\n- **Professionally Maintained**: Used in production by the Sablier team and their partners\n- **Extensive Test Coverage**: Includes comprehensive testing to ensure data accuracy\n- **Optimized Performance**: Implements efficient data processing techniques\n- **Well-Documented**: Clear code structure with extensive comments\n- **Backward Compatibility**: Carefully manages schema evolution and contract upgrades\n- **Cross-chain Architecture**: Envio promotes efficient cross-chain indexing where all networks share the same indexer endpoint\n\n## Best Practices Showcase [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-showcase \"Direct link to Best Practices Showcase\")\n\nThese indexers demonstrate several development best practices:\n\n- **Modular Code Structure**: Well-organized code with clear separation of concerns\n- **Consistent Naming Conventions**: Professional and consistent naming throughout\n- **Efficient Event Handling**: Optimized processing of blockchain events\n- **Comprehensive Entity Relationships**: Well-designed data model with proper relationships\n- **Thorough Input Validation**: Robust error handling and input validation\n- **Detailed Changelogs**: Documentation of breaking changes and migrations\n- **Handler/Loader Pattern**: Envio indexers use an optimized pattern with loaders to pre-fetch entities and handlers to process them\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-2 \"Direct link to Getting Started\")\n\nTo use these indexers as a reference for your own development:\n\n1. Clone the specific repository based on your needs:\n   - Lockup Indexer\n   - Flow Indexer\n   - Merkle Indexer\n2. Review the file structure and implementation patterns\n3. Examine the event handlers for efficient data processing techniques\n4. Study the schema design for effective entity modeling\n\nFor complete API documentation and usage examples, see:\n\n- Sablier API Overview\n- Implementation Caveats\n\nnote\n\nThese are official indexers maintained by the Sablier team and represent production-quality implementations. They serve as excellent examples of professional indexer development and are regularly updated to support the latest protocol features.\n\n* * *\n\n## Envio Hosted Service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-hosted-service \"Direct link to Envio Hosted Service\")\n\n**File:** `Hosted_Service/hosted-service.md`\n\nEnvio offers a fully managed hosting solution for your indexers, providing all the infrastructure, scaling, and monitoring needed to run production-grade indexers without operational overhead.\n\nOur hosted service offers multiple plans to suit different needs, from free development environments to enterprise-grade dedicated hosting. Each plan includes powerful features like static production endpoints, built-in alerts, and production-ready infrastructure.\n\n## Deployment Options [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deployment-options \"Direct link to Deployment Options\")\n\nEnvio provides flexibility in how you deploy and host your indexers:\n\n- **Fully Managed Hosted Service**: Let Envio handle everything. The following sections of this page outline the Fully Managed Hosted Service in more detail. This is the recommended deployment method for most users and removes the hosting overhead for your team. See below for the all the awesome features we provide and see the Pricing & Billing page for more information on which Hosting plan suits your indexing needs.\n\n- **Self-Hosting**: Run your indexer on your own infrastructure. This requires advanced setup and infrastructure knowledge not unique to Envio. See the following repository for a simple docker example to get you started. Please note this example does not cover all infrastructure related needs. It is recommended that at least a separate Postgres management tool is used for self-hosting in production. For further instructions see the Self Hosting Guide\n\n\n## Hosted Service Key Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-key-features \"Direct link to Hosted Service Key Features\")\n\n- **Git-based Deployments**: Similar to Vercel, deploy your indexer by simply pushing to a designated deployment branch\n- **Zero Infrastructure Management**: We handle all the servers, databases, and scaling for you\n- **Static Production Endpoints**: Consistent URLs with zero-downtime deployments and instant version switching\n- **Built-in Monitoring**: Track logs, sync status, and deployment health in real-time\n- **Comprehensive Alerting**: Multi-channel notifications (Discord, Slack, Telegram, Email) for critical issues, performance warnings, and deployment updates\n- **Security Features**: IP/Domain whitelisting to control access to your indexer endpoints\n- **GraphQL API**: Access your indexed data through a performant, production-ready GraphQL endpoint\n- **Multi-chain Support**: Deploy indexers that track multiple networks from a single codebase\n\n## Hosted Service Deployment Model [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-deployment-model \"Direct link to Hosted Service Deployment Model\")\n\nThe Envio Hosted Service provides a seamless GitHub-integrated deployment workflow:\n\n1. **GitHub Integration**: Install the Envio Deployments GitHub App to connect your repositories\n2. **Flexible Configuration**: Support for monorepos with configurable root directories, config file locations, and deployment branches\n3. **Automatic Deployments**: Push to your deployment branch to trigger builds and deployments\n4. **Version Management**: Maintain multiple deployment versions with one-click switching and rollback capabilities\n5. **Real-time Monitoring**: Track deployment progress, logs, and sync status through the dashboard\n\n**Multiple Indexers**: Deploy several indexers from a single repository using different configurations, branches, or directories.\n\nYou can view and manage your hosted indexers in the Envio Explorer.\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-3 \"Direct link to Getting Started\")\n\n- **Features** \\- Learn about all available hosted service features\n- **Deployment Guide** \\- Step-by-step instructions for deploying your indexer\n- **Pricing & Billing** \\- Compare plans and pricing options\n- **Self-Hosting** \\- Run your indexer on your own infrastructure\n\ninfo\n\nIt is recommended that before deploying to the Hosted Service, the indexer is built and tested locally to ensure it runs smoothly on the Hosted Service.\nFor a complete list of local CLI commands to develop your indexer, see the CLI Commands documentation.\n\n* * *\n\n## Hosted Service Features [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-features \"Direct link to Hosted Service Features\")\n\n**File:** `Hosted_Service/hosted-service-features.md`\n\nOur hosted service includes several production-ready features to help you manage and secure your indexer deployments.\n\nPlan Availability\n\nMost features listed on this page are available for **paid production plans only**. The free development plan has limited features and is designed for testing and development purposes. View our pricing plans to see what's included in each plan.\n\n## IP Whitelisting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ip-whitelisting \"Direct link to IP Whitelisting\")\n\nComing Soon!\n\nFull support for whitelisting is in active development.\n\nControl access to your indexer by restricting requests to specific IP addresses. This security feature helps protect your data and ensures only authorized clients can query your indexer.\n\n**Benefits:**\n\n- Enhanced security for sensitive data\n- Prevent unauthorized access\n- Control API usage from specific sources\n- Ideal for production environments with strict access requirements\n\n## Built-in Alerts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#built-in-alerts \"Direct link to Built-in Alerts\")\n\nStay informed about your indexer's health and performance with our integrated alerting system. Configure multiple notification channels and choose which alerts you want to receive.\n\nVersion Requirement\n\nThis feature is only available for indexers deployed with version 2.24.0 or higher.\n\n### Notification Channels [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#notification-channels \"Direct link to Notification Channels\")\n\nConfigure one or multiple notification channels to receive alerts:\n\n- **Discord**\n- **Slack**\n- **Telegram**\n- **Email**\n\n## Zero-Downtime Deployments [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#zero-downtime-deployments \"Direct link to Zero-Downtime Deployments\")\n\nUpdate your indexer without any service interruption using our seamless deployment system with static production endpoints.\n\n**How it works:**\n\n- Deploy new versions alongside your current deployment\n- Each indexer gets a **static production endpoint** that remains consistent\n- Use 'Promote to Production' to instantly route the static endpoint to any deployment\n- All requests to your static production endpoint are automatically routed to the promoted deployment\n- Maintain API availability throughout upgrades with no endpoint changes required\n\n**Key Features:**\n\n- **Static Production Endpoint**: Consistent URL that never changes, regardless of which deployment is active\n- **Instant Switching**: Promote any deployment to production with zero downtime\n- **Rollback Capabilities**: Quickly switch back to previous deployments if needed\n- **Seamless Updates**: Your applications continue working without any configuration changes\n\n## Deployment Location Choice [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deployment-location-choice \"Direct link to Deployment Location Choice\")\n\nComing Soon!\n\nFull support for cross-region deployments is in active development. If you require a deployment to be based in the USA please contact us through our support channel on discord.\n\n_Availability: Dedicated plans only_\n\nChoose your primary deployment region to optimize performance and meet compliance requirements.\n\n**Available Regions:**\n\n- **USA**\n- **EU**\n\n**Benefits:**\n\n- Reduced latency for your target users\n- Data residency compliance support\n- Custom infrastructure configurations\n- Dedicated infrastructure resources\n\n## Direct Database Access [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#direct-database-access \"Direct link to Direct Database Access\")\n\n_Availability: Dedicated plans only_\n\nAccess your indexed data directly through SQL queries, providing flexibility beyond the standard GraphQL endpoint.\n\n**Use Cases:**\n\n- Complex analytical queries\n- Custom data exports\n- Advanced reporting and dashboards\n- Integration with external analytics tools\n\n## Powerful Analytics Solution [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#powerful-analytics-solution \"Direct link to Powerful Analytics Solution\")\n\n_Availability: Dedicated plans only (additional cost)_\n\nA comprehensive analytics platform that automatically pipes your indexed data from PostgreSQL into ClickHouse (approximately 2 minutes behind real-time) and provides access through a hosted Metabase instance.\n\n**Technical Architecture:**\n\n- **Data Pipeline**: Automatic replication from PostgreSQL to ClickHouse\n- **Near Real-time**: Data available in an analytics platform within ~2 minutes\n- **Frontend**: Hosted Metabase instance for visualization and analysis\n- **Performance**: ClickHouse optimized for analytical queries on large datasets\n\n**Capabilities:**\n\n- Interactive, customizable dashboards through Metabase\n- Variety of visualization options (charts, graphs, tables, maps)\n- Fast analytical queries on large datasets via ClickHouse\n- Ad-hoc SQL queries for data exploration\n- Automated alerts based on data thresholds\n- Team collaboration and report sharing\n- Export capabilities for further analysis\n\ntip\n\nFor deployment instructions and limits, see our Deployment Guide. For pricing and feature availability by plan, see our Billing & Pricing page.\n\n* * *\n\n## Deploying Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deploying-your-indexer \"Direct link to Deploying Your Indexer\")\n\n**File:** `Hosted_Service/hosted-service-deployment.md`\n\nThe Envio Hosted Service provides a seamless git-based deployment workflow, similar to modern platforms like Vercel. This enables you to easily deploy, update, and manage your indexers through your normal development workflow.\n\n## Prerequisites & Important Information [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites--important-information \"Direct link to Prerequisites & Important Information\")\n\n### Requirements [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#requirements \"Direct link to Requirements\")\n\n- **Version Support**: Deployment on the Hosted Service requires at least version `2.21.5`.\n  Additionally, the following versions are not supported:\n\n  - `2.29.x`\n- **PNPM Support**: deployment must be compatible with pnpm version `9.10.0`\n- **Package.json**: the `package.json` file must be present and include the above two requirements.\n- **Configuration file**: a HyperIndex configuration file must be present (the name can be set in the indexer settings)\n- **GitHub Repository**: The repository must be no larger than `100MB`\n\nBefore deploying your indexer, please be aware of the following limits and policies:\n\n### Deployment Limits [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deployment-limits \"Direct link to Deployment Limits\")\n\n- **3 development plan indexers** per organization\n- **Deployments per indexer**: 3 deployments per indexer\n- Deployments can be deleted in the hosted service to make space for more deployments\n\n### Development Plan Fair Usage Policy [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#development-plan-fair-usage-policy \"Direct link to Development Plan Fair Usage Policy\")\n\nThe free development plan includes automatic deletion policies to ensure fair resource allocation:\n\n#### Automatic Deletion Rules: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#automatic-deletion-rules \"Direct link to Automatic Deletion Rules:\")\n\n- **Hard Limits**:\n\n  - Deployments that exceed 20GB of storage will be automatically deleted\n  - Deployments older than 30 days will be automatically deleted\n- **Soft Limits** (whichever comes first):\n\n  - 100,000 events processed\n  - 5GB storage used\n  - no requests for 7 days\n\n**When soft limits are breached, the two-stage deletion process begins**\n\n#### Two-Stage Deletion Process [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#two-stage-deletion-process \"Direct link to Two-Stage Deletion Process\")\n\n_Applies to development deployments that breach the soft limits_\n\n1. **Grace Period (7 days)** \\- Your indexer continues to function normally, you receive notification about the upcoming deletion\n2. **Read-Only Access (3 days)** \\- Indexer stops processing new data, existing data remains accessible for queries\n3. **Full Deletion** \\- Indexer and all data are permanently deleted\n\nTimeline Subject to Change\n\nThe grace period durations (7 + 3 days) are subject to change. Always monitor your deployment status and upgrade when approaching limits.\n\ntip\n\nFor complete pricing details and feature comparison, see our Pricing & Billing page.\n\n## Step-by-Step Deployment Instructions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-by-step-deployment-instructions \"Direct link to Step-by-Step Deployment Instructions\")\n\n### Initial Setup [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initial-setup \"Direct link to Initial Setup\")\n\n1. **Log in with GitHub**: Visit the Envio App and authenticate with your GitHub account\n2. **Select an Organization**: Choose your personal account or any organization you have access to\n3. **Install the Envio Deployments GitHub App**: Grant access to the repositories you want to deploy\n\n### Configure Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configure-your-indexer \"Direct link to Configure Your Indexer\")\n\n4. **Add a New Indexer**: Click \"Add Indexer\" in the dashboard\n5. **Connect to Repository**: Select the repository containing your indexer code\n6. **Configure Deployment Settings**:\n\n   - Specify the config file location\n   - Set the root directory (important for monorepos)\n   - Choose the deployment branch\n\nMultiple Indexers Per Repository\n\nYou can deploy multiple indexers from a single repository by configuring them with different config file paths, root directories, and/or deployment branches.\n\nMonorepo Configuration\n\nIf you're working in a monorepo, ensure all your imports are contained within your indexer directory to avoid deployment issues.\n\n### Deploy Your Code [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deploy-your-code \"Direct link to Deploy Your Code\")\n\n7. **Create a Deployment Branch**: Set up the branch you specified during configuration\n8. **Deploy via Git**: Push your code to the deployment branch\n9. **Monitor Deployment**: Track the progress of your deployment in the Envio dashboard\n\n### Manage Your Deployment [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#manage-your-deployment \"Direct link to Manage Your Deployment\")\n\n10. **Version Management**: Once deployed, you can:\n\n    - View detailed logs\n    - Switch between different deployed versions\n    - Rollback to previous versions if needed\n\n## Monitoring [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#monitoring \"Direct link to Monitoring\")\n\nOnce your indexer is deployed, you can monitor its health, performance, and progress using several built-in tools including the dashboard, logs, and alerts.\n\nFor detailed information about monitoring your deployments, see our **Monitoring Guide**.\n\n## Continuous Deployment Best Practices and Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#continuous-deployment-best-practices-and-configuration \"Direct link to Continuous Deployment Best Practices and Configuration\")\n\nFor a robust deployment workflow, we recommend:\n\n1. **Protected Branches**: Set up branch protection rules for your deployment branch\n2. **Pull Request Workflow**: Instead of pushing directly to the deployment branch, use pull requests from feature branches\n3. **CI Integration**: Add tests to your CI pipeline to validate indexer functionality before merging to the deployment branch\n\n### Continuous Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#continuous-configuration \"Direct link to Continuous Configuration\")\n\nAfter deploying your indexer, you can manage its configuration through the `Settings` tab in the Envio dashboard:\n\n#### General Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#general-tab \"Direct link to General Tab\")\n\nThe General tab provides core configuration options:\n\n- **Config File Path**: Update the location of your indexer's configuration file\n- **Deployment Branch**: Change which Git branch triggers deployments\n- **Root Directory**: Modify the root directory for your indexer (useful for monorepos)\n- **Delete Indexer**: Permanently remove the indexer and all its deployments\n\nDeleting an Indexer\n\nDeleting an indexer is permanent and will remove all associated deployments and data. This action cannot be undone.\n\n#### Environment Variables Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-variables-tab \"Direct link to Environment Variables Tab\")\n\nConfigure environment-specific variables for your indexer:\n\n- Add custom environment variables with the `ENVIO_` prefix\n- Environment variables are securely stored and injected into your indexer at runtime\n- Useful for API keys, configuration values, and other deployment-specific settings\n\nEnvironment Variable Best Practices\n\nUse environment variables for sensitive data rather than hardcoding values in your repository. Remember to prefix all variables with `ENVIO_`.\n\n#### Plans & Billing Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#plans--billing-tab \"Direct link to Plans & Billing Tab\")\n\nManage your indexer's pricing plan and billing:\n\n- Select from available pricing plans\n- Upgrade your plan to suit your needs\n- View current plan features and limits\n\nFor detailed pricing information, see our Pricing & Billing page.\n\n#### Alerts Tab [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#alerts-tab \"Direct link to Alerts Tab\")\n\nConfigure monitoring and notification preferences:\n\n- Set up notification channels (Discord, Slack, Telegram, Email)\n- Choose which alert types to receive (Production Endpoint Down, Indexer Stopped Processing, etc.)\n- Configure deployment notifications (Historical Sync Complete)\n\nFor complete alert configuration details, see our Features page.\n\nAlert Availability\n\nAlert configuration is available for indexers deployed with version 2.24.0 or higher on paid production plans.\n\n## Visual Reference Guide [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#visual-reference-guide \"Direct link to Visual Reference Guide\")\n\nThe following screenshots show each step of the deployment process:\n\n### Step 1: Select Organization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-select-organization \"Direct link to Step 1: Select Organization\")\n\n!Select organisation\n\n### Step 2: Install Github App [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-install-github-app \"Direct link to Step 2: Install Github App\")\n\n!Install GitHub App\n\n### Step 3: Add a New Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-add-a-new-indexer \"Direct link to Step 3: Add a New Indexer\")\n\n!Add indexer\n\n### Step 4: Connect to Repository [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-connect-to-repository \"Direct link to Step 4: Connect to Repository\")\n\n!Connect indexer\n\n### Step 5: Configure Deployment Settings [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-configure-deployment-settings \"Direct link to Step 5: Configure Deployment Settings\")\n\n!Configure indexer\n!Deploy indexer\n\n### Step 6: Create a Deployment Branch [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-6-create-a-deployment-branch \"Direct link to Step 6: Create a Deployment Branch\")\n\n!Create branch\n\n### Step 7: Deploy via Git [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-7-deploy-via-git \"Direct link to Step 7: Deploy via Git\")\n\n!Push code\n\n### Step 8: Monitoring [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-8-monitoring \"Direct link to Step 8: Monitoring\")\n\nFull details are available in our **Monitoring Guide**.\n\n### Step 9: Continuous Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-9-continuous-configuration \"Direct link to Step 9: Continuous Configuration\")\n\n!Configure indexer\n\n## Related Documentation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#related-documentation \"Direct link to Related Documentation\")\n\n- **Features** \\- Learn about all available hosted service features\n- **Pricing & Billing** \\- Compare plans and see feature availability\n- **Overview** \\- Introduction to the hosted service\n- **Self-Hosting** \\- Run your indexer on your own infrastructure\n\n* * *\n\n## Monitoring Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#monitoring-your-indexer \"Direct link to Monitoring Your Indexer\")\n\n**File:** `Hosted_Service/hosted-service-monitoring.md`\n\nOnce your indexer is deployed, the Envio Hosted Service provides several tools to help you monitor its health, performance, and progress.\n\n## Dashboard Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#dashboard-overview \"Direct link to Dashboard Overview\")\n\nThe main dashboard provides real-time visibility into your indexer's status:\n\n**Key Metrics Displayed:**\n\n- **Active Deployments**: Track how many deployments are currently running (e.g., 1/3 active)\n- **Deployment Status**: See whether your indexer is actively syncing, stopped, or has encountered errors\n- **Recent Commits**: View your deployment history with commit information and active status\n- **Usage Statistics**: Monitor your indexing hours, storage usage, and query rate limits\n- **Network Progress**: Real-time progress bars showing sync status for each blockchain network\n- **Events Processed**: Track the total number of events your indexer has processed\n- **Historical Sync Time**: See how long it took to complete the initial sync\n\n## Deployment Status Indicators [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deployment-status-indicators \"Direct link to Deployment Status Indicators\")\n\nEach deployment shows clear status information:\n\n- **Syncing**: Indexer is actively processing blocks and events\n- **Syncing Stopped**: Indexer has stopped processing (may indicate an error or a breach of plan limits)\n- **Historical Sync Complete**: Initial sync finished, indexer is processing new blocks in real-time\n\n## Error Detection and Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#error-detection-and-troubleshooting \"Direct link to Error Detection and Troubleshooting\")\n\nWhen issues occur, the dashboard displays failure information to help you quickly diagnose problems.\n\n**Failure Information Includes:**\n\n- **Error Type**: Clear indication of the failure (e.g., \"Indexing Has Stopped\")\n- **Error Description**: Details about what went wrong (e.g., \"Error during event handling\")\n- **Next Steps**: Guidance on where to find more information (error logs)\n- **Support Access**: Direct link to Discord for assistance\n\n## Logging [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#logging \"Direct link to Logging\")\n\n_Full logging supported is integrated and configured by Envio via the Hosted Service_\n\nAccess detailed logs to troubleshoot issues and monitor indexer behavior:\n\n- **Real-time Logs**: View live logs as your indexer processes events\n- **Error Logs**: Quickly identify and diagnose errors in your event handlers\n- **Deployment Logs**: Track the deployment process and startup sequence\n- **Filter Log Levels**: Find specific log entries to debug issues\n\nAccess logs through the \"Logs\" button on your deployment page.\n\n## Built-in Alerts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#built-in-alerts-1 \"Direct link to Built-in Alerts\")\n\nConfigure proactive monitoring through the Alerts tab to receive notifications before issues impact your users:\n\n- **Critical Alerts**: Get notified when your production endpoint goes down\n- **Warning Alerts**: Receive alerts when your indexer stops processing blocks\n- **Info Alerts**: Stay informed about indexer restarts and error logs\n- **Deployment Notifications**: Know when historical sync completes\n\nFor detailed alert configuration, see the Deployment Guide and our Features page.\n\nProactive Monitoring\n\nSet up multiple notification channels ( **Paid Plans Only**) to ensure you never miss critical alerts about your indexer's health.\n\n## Visual Reference [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#visual-reference \"Direct link to Visual Reference\")\n\n### Dashboard Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#dashboard-overview-1 \"Direct link to Dashboard Overview\")\n\n!Dashboard Overview\n\n### Network Progress Bars [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#network-progress-bars \"Direct link to Network Progress Bars\")\n\n!Progress\n\n### Example Failure Notifications [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-failure-notifications \"Direct link to Example Failure Notifications\")\n\n!Dashboard Failures\n!Deployment Failure\n\n## Related Documentation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#related-documentation-1 \"Direct link to Related Documentation\")\n\n- **Deploying Your Indexer** \\- Complete deployment guide\n- **Features** \\- Learn about all available hosted service features\n- **Pricing & Billing** \\- Compare plans and see feature availability\n\n* * *\n\n## Hosted Service Billing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-billing \"Direct link to Hosted Service Billing\")\n\n**File:** `Hosted_Service/hosted-service-billing.mdx`\n\n# Pricing & Billing\n\nEnvio offers flexible pricing options to meet the needs of projects at different stages of development.\n\n## Pricing Plans [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#pricing-plans \"Direct link to Pricing Plans\")\n\nOur hosted service offers flexible pricing plans to match your project's needs, from free development environments to enterprise-grade dedicated hosting.\n\nCurrent Pricing\n\nFor the most up-to-date pricing information, detailed plan comparisons, and feature breakdowns, please visit our official Envio Pricing Page.\n\n**Available Plans:**\n\n- **Development** \\- Free plan perfect for testing and development\n- **Production Small** \\- Paid plan to get started with production deployments\n- **Production Medium** \\- Paid plan for scaling your indexing operations\n- **Production Large** \\- Paid plan for high-volume production workloads\n- **Dedicated** \\- Custom pricing for ultimate performance and control\n\nDevelopment Plan Disclaimer\n\nThe free development plan is intended for testing and development purposes only and should not be used as a production environment. Development plan deployments have a maximum life span of 30 days and Envio makes no guarantees regarding uptime, availability, or data persistence for deployments on the development plan. If you choose to use a development plan deployment in a production capacity, you do so entirely at your own risk. Envio assumes no liability or accountability for any downtime, data loss, or service interruptions that may occur on development plan deployments.\n\ntip\n\nFor detailed feature explanations, see our Features page. For deployment instructions, see our Deployment Guide. Not sure which option is right for your project? Book a call with our team to discuss your specific needs.\n\n* * *\n\n## Self-Hosting Your Envio Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#self-hosting-your-envio-indexer \"Direct link to Self-Hosting Your Envio Indexer\")\n\n**File:** `Hosted_Service/self-hosting.md`\n\ninfo\n\nThis documentation page is actively being improved. Check back regularly for updates and additional information.\n\nWhile Envio offers a fully managed Hosted Service, you may prefer to run your indexer on your own infrastructure. This guide covers everything you need to know about self-hosting Envio indexers.\n\nnote\n\nWe deeply appreciate users who choose our hosted service, as it directly supports our team and helps us continue developing and improving Envio's technology. If your use case allows for it, please consider the hosted option.\n\n## Why Self-Host? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-self-host \"Direct link to Why Self-Host?\")\n\nSelf-hosting gives you:\n\n- **Complete Control**: Manage your own infrastructure and configurations\n- **Data Sovereignty**: Keep all indexed data within your own systems\n\nDisclaimer\n\nSelf Hosting can be done with a variety of different infrastructure, tools and methods. The outline below is merely a starting point and does not offer a full production level solution. In some cases advanced knowledge of infrastructure, database management and networking may be required for a full production level solution.\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-1 \"Direct link to Prerequisites\")\n\nBefore self-hosting, ensure you have:\n\n- Docker installed on your host machine\n- Sufficient storage for blockchain data and the indexer database\n- Adequate CPU and memory resources (requirements vary based on chains and indexing complexity)\n- Required HyperSync and/or RPC endpoints\n- Envio API token for HyperSync access ( `ENVIO_API_TOKEN`) — required for continued access. See API Tokens.\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-4 \"Direct link to Getting Started\")\n\nIn general, if you want to self-host, you will likely use a Docker setup.\nFor a working example, check out the local-docker-example repository.\nIt contains a minimal `Dockerfile` and `docker-compose.yaml` that configure the Envio indexer together with PostgreSQL and Hasura.\n\n## Configuration Explained [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-explained \"Direct link to Configuration Explained\")\n\nThe compose file in that repository sets up three main services:\n\n1. **PostgreSQL Database** ( `envio-postgres`): Stores your indexed data\n2. **Hasura GraphQL Engine** ( `graphql-engine`): Provides the GraphQL API for querying your data\n3. **Envio Indexer** ( `envio-indexer`): The core indexing service that processes blockchain data\n\n### Environment Variables [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-variables-2 \"Direct link to Environment Variables\")\n\nThe configuration uses environment variables with sensible defaults. For production, you should customize:\n\n- Envio API token ( `ENVIO_API_TOKEN`)\n- Database credentials ( `ENVIO_PG_PASSWORD`, `ENVIO_PG_USER`, etc.)\n- Hasura admin secret ( `HASURA_GRAPHQL_ADMIN_SECRET`)\n- Resource limits based on your workload requirements\n\n## Getting Help [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-help-1 \"Direct link to Getting Help\")\n\nIf you encounter issues with self-hosting:\n\n- Check the Envio GitHub repository for known issues\n- Join the Envio Discord community for community support\n\ntip\n\nFor most production use cases, we recommend using the Envio Hosted Service to benefit from automatic scaling, monitoring, and maintenance.\n\n* * *\n\n## Indexing Optimism Bridge Deposits [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-optimism-bridge-deposits \"Direct link to Indexing Optimism Bridge Deposits\")\n\n**File:** `Tutorials/tutorial-op-bridge-deposits.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-3 \"Direct link to Introduction\")\n\nThis tutorial will guide you through indexing Optimism Standard Bridge deposits in under 5 minutes using Envio HyperIndex's no-code contract import feature.\n\nThe Optimism Standard Bridge enables the movement of ETH and ERC-20 tokens between Ethereum and Optimism. We'll index bridge deposit events by extracting the `DepositFinalized` logs emitted by the bridge contracts on both networks.\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-2 \"Direct link to Prerequisites\")\n\nBefore starting, ensure you have the following installed:\n\n- **Node.js** _(v22 or newer recommended)_\n- **pnpm** _(v8 or newer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n\n> **Note:** Docker is specifically required to run your indexer locally. You can skip Docker installation if you plan only to use Envio's hosted service.\n\n## Step 1: Initialize Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-initialize-your-indexer \"Direct link to Step 1: Initialize Your Indexer\")\n\n1. Open your terminal in an empty directory and run:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\n2. Name your indexer (we'll use \"optimism-bridge-indexer\" in this example):\n\n3. Choose your preferred language (TypeScript, JavaScript, or ReScript):\n\n\n## Step 2: Import the Optimism Bridge Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-import-the-optimism-bridge-contract \"Direct link to Step 2: Import the Optimism Bridge Contract\")\n\n1. Select **Contract Import** → **Block Explorer** → **Optimism**\n\n2. Enter the Optimism bridge contract address:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   0x4200000000000000000000000000000000000010\n\n   ```\n\n\n\n\n\n\n\n\n\n   View on Optimistic Etherscan\n\n3. Select the `DepositFinalized` event:\n   - Navigate using arrow keys (↑↓)\n   - Press spacebar to select the event\n\n> **Tip:** You can select multiple events to index simultaneously.\n\n## Step 3: Add the Ethereum Mainnet Bridge Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-add-the-ethereum-mainnet-bridge-contract \"Direct link to Step 3: Add the Ethereum Mainnet Bridge Contract\")\n\n1. When prompted, select **Add a new contract**\n\n2. Choose **Block Explorer** → **Ethereum Mainnet**\n\n3. Enter the Ethereum Mainnet gateway contract address:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1\n\n   ```\n\n\n\n\n\n\n\n\n\n   View on Etherscan\n\n4. Select the `ETHDepositInitiated` event\n\n5. When finished adding contracts, select **I'm finished**\n\n\n## Step 4: Start Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-start-your-indexer \"Direct link to Step 4: Start Your Indexer\")\n\n1. If you have any running indexers, stop them first:\n\n```codeBlockLines_e6Vv\npnpm envio stop\n\n```\n\n2. Start your new indexer:\n\n```codeBlockLines_e6Vv\npnpm dev\n\n```\n\nThis command:\n\n- Starts the required Docker containers\n- Sets up your database\n- Launches the indexing process\n- Opens the Hasura GraphQL interface\n\n## Step 5: Understanding the Generated Code [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-understanding-the-generated-code \"Direct link to Step 5: Understanding the Generated Code\")\n\nLet's examine the key files that Envio generated:\n\n### 1\\. `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-configyaml-1 \"Direct link to 1-configyaml-1\")\n\nThis configuration file defines:\n\n- Networks to index (Optimism and Ethereum Mainnet)\n- Starting blocks for each network\n- Contract addresses and ABIs\n- Events to track\n\n### 2\\. `schema.graphql` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-schemagraphql \"Direct link to 2-schemagraphql\")\n\nThis schema defines the data structures for our selected events:\n\n- Entity types based on event data\n- Field types matching the event parameters\n- Relationships between entities (if applicable)\n\n### 3\\. `src/EventHandlers.ts` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-srceventhandlersts \"Direct link to 3-srceventhandlersts\")\n\nThis file contains the business logic for processing events:\n\n- Functions that execute when events are detected\n- Data transformation and storage logic\n- Entity creation and relationship management\n\n## Step 6: Exploring Your Indexed Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-6-exploring-your-indexed-data \"Direct link to Step 6: Exploring Your Indexed Data\")\n\nNow you can interact with your indexed data:\n\n### Accessing Hasura [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#accessing-hasura \"Direct link to Accessing Hasura\")\n\n1. Open Hasura at [http://localhost:8080](http://localhost:8080/)\n2. When prompted, enter the admin password: `testing`\n\n### Monitoring Indexing Progress [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#monitoring-indexing-progress \"Direct link to Monitoring Indexing Progress\")\n\n1. Click the **Data** tab in the top navigation\n2. Find the `_events_sync_state` table to check indexing progress\n3. Observe which blocks are currently being processed\n\n> **Note:** Thanks to Envio's HyperSync, indexing happens significantly faster than with standard RPC methods.\n\n### Querying Indexed Events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#querying-indexed-events \"Direct link to Querying Indexed Events\")\n\n1. Click the **API** tab\n2. Construct a GraphQL query to explore your data\n\nHere's an example query to fetch the 10 largest bridge deposits:\n\n```codeBlockLines_e6Vv\nquery LargestDeposits {\nDepositFinalized(limit: 10, order_by: { amount: desc }) {\n    l1Token\n    l2Token\n    from\n    to\n    amount\n    blockTimestamp\n}\n}\n\n```\n\n3. Click the **Play** button to execute your query\n\n## Conclusion [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#conclusion \"Direct link to Conclusion\")\n\nCongratulations! You've successfully created an indexer for Optimism Bridge deposits across both Ethereum and Optimism networks.\n\n### What You've Learned [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-youve-learned \"Direct link to What You've Learned\")\n\n- How to initialize a multi-network indexer using Envio\n- How to import contracts from different blockchains\n- How to query and explore indexed blockchain data\n\n### Next Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#next-steps-1 \"Direct link to Next Steps\")\n\n- Try customizing the event handlers to add additional logic\n- Create relationships between events on different networks\n- Deploy your indexer to Envio's hosted service\n\nFor more tutorials and advanced features, check out our documentation or watch our video walkthroughs on YouTube.\n\n* * *\n\n## Indexing ERC20 Token Transfers on Base [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-erc20-token-transfers-on-base \"Direct link to Indexing ERC20 Token Transfers on Base\")\n\n**File:** `Tutorials/tutorial-erc20-token-transfers.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-4 \"Direct link to Introduction\")\n\nIn this tutorial, you'll learn how to index ERC20 token transfers on the Base network using Envio HyperIndex. By leveraging the no-code contract import feature, you'll be able to quickly analyze USDC transfer activity, including identifying the largest transfers.\n\nWe'll create an indexer that tracks all USDC token transfers on Base by extracting the `Transfer` events emitted by the USDC contract. The entire process takes less than 5 minutes to set up and start querying data.\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-3 \"Direct link to Prerequisites\")\n\nBefore starting, ensure you have the following installed:\n\n- **Node.js** _(v22 or newer recommended)_\n- **pnpm** _(v8 or newer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n\n> **Note:** Docker is specifically required to run your indexer locally. You can skip Docker installation if you plan only to use Envio's hosted service.\n\n## Step 1: Initialize Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-initialize-your-indexer-1 \"Direct link to Step 1: Initialize Your Indexer\")\n\n1. Open your terminal in an empty directory and run:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\n2. Name your indexer (we'll use \"usdc-base-transfer-indexer\" in this example):\n\n3. Choose your preferred language (TypeScript, JavaScript, or ReScript):\n\n\n## Step 2: Import the USDC Token Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-import-the-usdc-token-contract \"Direct link to Step 2: Import the USDC Token Contract\")\n\n1. Select **Contract Import** → **Block Explorer** → **Base**\n\n2. Enter the USDC token contract address on Base:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\n\n   ```\n\n\n\n\n\n\n\n\n\n   View on BaseScan\n\n3. Select the `Transfer` event:\n   - Navigate using arrow keys (↑↓)\n   - Press spacebar to select the event\n\n> **Tip:** You can select multiple events to index simultaneously if needed.\n\n4. When finished adding contracts, select **I'm finished**\n\n## Step 3: Start Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-start-your-indexer \"Direct link to Step 3: Start Your Indexer\")\n\n1. If you have any running indexers, stop them first:\n\n```codeBlockLines_e6Vv\npnpm envio stop\n\n```\n\n> **Note:** You can skip this step if this is your first time running an indexer.\n\n2. Start your new indexer:\n\n```codeBlockLines_e6Vv\npnpm dev\n\n```\n\nThis command:\n\n- Starts the required Docker containers\n- Sets up your database\n- Launches the indexing process\n- Opens the Hasura GraphQL interface\n\n## Step 4: Understanding the Generated Code [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-understanding-the-generated-code \"Direct link to Step 4: Understanding the Generated Code\")\n\nLet's examine the key files that Envio generated:\n\n### 1\\. `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-configyaml-2 \"Direct link to 1-configyaml-2\")\n\nThis configuration file defines:\n\n- Network to index (Base)\n- Starting block for indexing\n- Contract address and ABI details\n- Events to track (Transfer)\n\n### 2\\. `schema.graphql` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-schemagraphql-1 \"Direct link to 2-schemagraphql-1\")\n\nThis schema defines the data structures for the Transfer event:\n\n- Entity types based on event data\n- Field types for sender, receiver, and amount\n- Any relationships between entities\n\n### 3\\. `src/EventHandlers.*` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-srceventhandlers \"Direct link to 3-srceventhandlers\")\n\nThis file contains the business logic for processing events:\n\n- Functions that execute when Transfer events are detected\n- Data transformation and storage logic\n- Entity creation and relationship management\n\n## Step 5: Exploring Your Indexed Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-exploring-your-indexed-data \"Direct link to Step 5: Exploring Your Indexed Data\")\n\nNow you can interact with your indexed USDC transfer data:\n\n### Accessing Hasura [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#accessing-hasura-1 \"Direct link to Accessing Hasura\")\n\n1. Open Hasura at [http://localhost:8080](http://localhost:8080/)\n2. When prompted, enter the admin password: `testing`\n\n### Monitoring Indexing Progress [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#monitoring-indexing-progress-1 \"Direct link to Monitoring Indexing Progress\")\n\n1. Click the **Data** tab in the top navigation\n2. Find the `_events_sync_state` table to check indexing progress\n3. Observe which blocks are currently being processed\n\n> **Note:** Thanks to Envio's HyperSync, you can index millions of USDC transfers in just minutes rather than hours or days with traditional methods.\n\n### Querying Indexed Events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#querying-indexed-events-1 \"Direct link to Querying Indexed Events\")\n\n1. Click the **API** tab\n2. Construct a GraphQL query to explore your data\n\nHere's an example query to fetch the 10 largest USDC transfers:\n\n```codeBlockLines_e6Vv\nquery LargestTransfers {\nFiatTokenV2_2_Transfer(limit: 10, order_by: { value: desc }) {\n    from\n    to\n    value\n    blockTimestamp\n}\n}\n\n```\n\n3. Click the **Play** button to execute your query\n\n## Conclusion [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#conclusion-1 \"Direct link to Conclusion\")\n\nCongratulations! You've successfully created an indexer for USDC token transfers on Base. In just a few minutes, you've indexed over 3.6 million transfer events and can now query this data in real-time.\n\n### What You've Learned [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-youve-learned-1 \"Direct link to What You've Learned\")\n\n- How to initialize an indexer using Envio's contract import feature\n- How to index ERC20 token transfers on the Base network\n- How to query and analyze token transfer data using GraphQL\n\n### Next Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#next-steps-2 \"Direct link to Next Steps\")\n\n- Try customizing the event handlers to add additional logic\n- Create aggregated statistics about token transfers\n- Add more tokens or events to your indexer\n- Deploy your indexer to Envio's hosted service\n\nFor more tutorials and advanced features, check out our documentation or watch our video walkthrough on YouTube.\n\n* * *\n\n## Indexing Sway Farm on the Fuel Network [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-sway-farm-on-the-fuel-network \"Direct link to Indexing Sway Farm on the Fuel Network\")\n\n**File:** `Tutorials/tutorial-indexing-fuel.md`\n\nUntil recently, HyperIndex was only available on EVM-compatible blockchains, and now we have extended support to the Fuel Network.\n\nIndexers are vital to the success of any dApp. In this tutorial, we will create an Envio indexer for the Fuel dApp Sway Farm step by step.\n\nSway Farm is a simple farming game and for the sake of a real-world example, let's create the indexer for a leaderboard of all farmers 🧑‍🌾\n\n## About Fuel [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#about-fuel \"Direct link to About Fuel\")\n\nFuel is an operating system purpose-built for Ethereum rollups. Fuel's unique architecture allows rollups to solve for PSI (parallelization, state minimized execution, interoperability). Powered by the FuelVM, Fuel aims to expand Ethereum's capability set without compromising security or decentralization.\n\nWebsite \\| X \\| Discord\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-4 \"Direct link to Prerequisites\")\n\n### Environment tooling [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-tooling \"Direct link to Environment tooling\")\n\n- **Node.js** _(v22 or newer recommended)_\n- **pnpm** _(v8 or newer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n\n> **Note:** Docker is specifically required to run your indexer locally. You can skip Docker installation if you plan only to use Envio's hosted service.\n\n## Initialize the project [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialize-the-project \"Direct link to Initialize the project\")\n\nNow that you have installed the prerequisite packages let's begin the practical steps of setting up the indexer.\n\nOpen your terminal in an empty directory and initialize a new indexer by running the command:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\nIn the following prompt, choose the directory where you want to set up your project. The default is the current directory, but in the tutorial, I'll use the indexer name:\n\n```codeBlockLines_e6Vv\n? Specify a folder name (ENTER to skip): sway-farm-indexer\n\n```\n\nThen, choose a language of your choice for the event handlers. TypeScript is the most popular one, so we'll stick with it:\n\n```codeBlockLines_e6Vv\n? Which language would you like to use?\nJavaScript\n> TypeScript\nReScript\n[↑↓ to move, enter to select, type to filter]\n\n```\n\nNext, we have the new prompt for a blockchain ecosystem. Previously Envio supported only EVM, but now it's possible to choose between `Evm`, `Fuel` and other VMs in the future:\n\n```codeBlockLines_e6Vv\n? Choose blockchain ecosystem\nEvm\n> Fuel\n[↑↓ to move, enter to select, type to filter]\n\n```\n\nIn the following prompt, you can choose an initialization option. There's a Greeter template for Fuel, which is an excellent way to learn more about HyperIndex. But since we have an existing contract, the `Contract Import` option is the best way to create an indexer:\n\n```codeBlockLines_e6Vv\n? Choose an initialization option\nTemplate\n> Contract Import\n[↑↓ to move, enter to select, type to filter]\n\n```\n\n> A separate Tutorial page provides more details about the `Greeter` template.\n\nNext it'll ask us for an ABI file. You can find it in the `./out/debug` directory after building your Sway contract with `forc build`:\n\n```codeBlockLines_e6Vv\n? What is the path to your json abi file? ./sway-farm/contract/out/debug/contract-abi.json\n\n```\n\nAfter the ABI file is provided, Envio parses all possible events you can use for indexing:\n\n```codeBlockLines_e6Vv\n? Which events would you like to index?\n> [x] NewPlayer\n[x] PlantSeed\n[x] SellItem\n[x] InvalidError\n[x] Harvest\n[x] BuySeeds\n[x] LevelUp\n[↑↓ to move, space to select one, → to all, ← to none, type to filter]\n\n```\n\nLet's select the events we want to index. I opened the code of the contract file and realized that for a leaderboard we need only events which update player information. Hence, I left only `NewPlayer`, `LevelUp`, and `SellItem` selected in the list. We'd want to index more events in real life, but this is enough for the tutorial.\n\n```codeBlockLines_e6Vv\n? Which events would you like to index?\n> [x] NewPlayer\n[ ] PlantSeed\n[x] SellItem\n[ ] InvalidError\n[ ] Harvest\n[ ] BuySeeds\n[x] LevelUp\n[↑↓ to move, space to select one, → to all, ← to none, type to filter]\n\n```\n\n> 📖 For the tutorial we only need to index `LOG_DATA` receipts, but you can also index `Mint`, `Burn`, `Transfer` and `Call` receipts. Read more about Supported Event Types.\n\nJust a few simple questions left. Let's call our contract `SwayFarm`:\n\n```codeBlockLines_e6Vv\n? What is the name of this contract? SwayFarm\n\n```\n\nSet an address for the deployed contract:\n\n```codeBlockLines_e6Vv\n? What is the address of the contract? 0xf5b08689ada97df7fd2fbd67bee7dea6d219f117c1dc9345245da16fe4e99111\n[Use the proxy address if your abi is a proxy implementation]\n\n```\n\nFinish the initialization process:\n\n```codeBlockLines_e6Vv\n? Would you like to add another contract?\n> I'm finished\nAdd a new address for same contract on same network\nAdd a new contract (with a different ABI)\n[Current contract: SwayFarm, on network: Fuel]\n\n```\n\nIf you see the following line, it means we are already halfway through 🙌\n\n```codeBlockLines_e6Vv\nPlease run `cd sway-farm-indexer` to run the rest of the envio commands\n\n```\n\nLet's open the indexer in an IDE and start adjusting it for our farm 🍅\n\n## Walk through initialized indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#walk-through-initialized-indexer \"Direct link to Walk through initialized indexer\")\n\nAt this point, we should already have a working indexer. You can start it by running `pnpm dev`, which we cover in more detail later in the tutorial.\n\nEverything is configured by modifying the 3 files below. Let's walk through each of them.\n\n- config.yaml `Guide`\n- schema.graphql `Guide`\n- EventHandlers.\\* `Guide`\n\n> (\\\\* depending on the language chosen for the indexer)\n\n### `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configyaml \"Direct link to configyaml\")\n\nThe `config.yaml` outlines the specifications for the indexer, including details such as network and contract specifications and the event information to be used in the indexing process.\n\n```codeBlockLines_e6Vv\nname: sway-farm-indexer\necosystem: fuel\nnetworks:\n  - id: 0\n    start_block: 0\n    contracts:\n      - name: SwayFarm\n        address:\n          - 0xf5b08689ada97df7fd2fbd67bee7dea6d219f117c1dc9345245da16fe4e99111\n        abi_file_path: abis/swayfarm-abi.json\n        handler: src/EventHandlers.ts\n        events:\n          - name: SellItem\n            logId: \"11192939610819626128\"\n          - name: LevelUp\n            logId: \"9956391856148830557\"\n          - name: NewPlayer\n            logId: \"169340015036328252\"\n\n```\n\nIn the tutorial, we don't need to adjust it in any way. But later you can modify the file and add more events for indexing.\n\nAs a nice to have, you can use a Sway struct name without specifying a `logId`, like this:\n\n```codeBlockLines_e6Vv\n- name: SellItem\n- name: LevelUp\n- name: NewPlayer\n\n```\n\n### `schema.graphql` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schemagraphql \"Direct link to schemagraphql\")\n\nThe `schema.graphql` file serves as a representation of your application's data model. It defines entity types that directly correspond to database tables, and the event handlers you create are responsible for creating and updating records within those tables. Additionally, the GraphQL API is automatically generated based on the entity types specified in the `schema.graphql` file, to allow access to the indexed data.\n\n> 🧠 A separate Guide page provides more details about the `schema.graphql` file.\n\nFor the leaderboard, we need only one entity representing the player. Let's create it:\n\n```codeBlockLines_e6Vv\ntype Player {\nid: ID!\nfarmingSkill: BigInt!\ntotalValueSold: BigInt!\n}\n\n```\n\nWe will use the user address as an ID. The fields `farmingSkill` and `totalValueSold` are `u64` in Sway, so to safely map them to JavaScript value, we'll use `BigInt`.\n\n### `EventHandlers.ts` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#eventhandlersts \"Direct link to eventhandlersts\")\n\nThe event handlers generated by contract import are quite simple and only add an entity to a DB when a related event is indexed.\n\n```codeBlockLines_e6Vv\n/*\n* Please refer to https://docs.envio.dev for a thorough guide on all Envio indexer features\n*/\n\nSwayFarmContract.SellItem.handler(async ({ event, context }) => {\nconst entity: SwayFarm_SellItemEntity = {\n    id: `${event.chainId}_${event.block.height}_${event.logIndex}`,\n};\n\ncontext.SwayFarm_SellItem.set(entity);\n});\n\n```\n\nLet's modify the handlers to update the `Player` entity instead. But before we start, we need to run `pnpm codegen` to generate utility code and types for the `Player` entity we've added.\n\n```codeBlockLines_e6Vv\npnpm codegen\n\n```\n\nIt's time for a little bit of coding. The indexer is very simple; it requires us only to pass event data to an entity.\n\n```codeBlockLines_e6Vv\n\n/**\nRegisters a handler that processes NewPlayer event\non the SwayFarm contract and stores the players in the DB\n*/\nSwayFarmContract.NewPlayer.handler(async ({ event, context }) => {\n// Set the Player entity in the DB with the intial values\ncontext.Player.set({\n    // The address in Sway is a union type of user Address and ContractID. Envio supports most of the Sway types, and the address value was decoded as a discriminated union 100% typesafe\n    id: event.params.address.payload.bits,\n    // Initial values taken from the contract logic\n    farmingSkill: 1n,\n    totalValueSold: 0n,\n});\n});\n\nSwayFarmContract.LevelUp.handler(async ({ event, context }) => {\nconst playerInfo = event.params.player_info;\ncontext.Player.set({\n    id: event.params.address.payload.bits,\n    farmingSkill: playerInfo.farming_skill,\n    totalValueSold: playerInfo.total_value_sold,\n});\n});\n\nSwayFarmContract.SellItem.handler(async ({ event, context }) => {\nconst playerInfo = event.params.player_info;\ncontext.Player.set({\n    id: event.params.address.payload.bits,\n    farmingSkill: playerInfo.farming_skill,\n    totalValueSold: playerInfo.total_value_sold,\n});\n});\n\n```\n\nWithout overengineering, simply set the player data into the database. What's nice is that whenever your ABI or entities in `graphql.schema` change, Envio regenerates types and shows the compilation error.\n\n> 🧠 You can find the indexer repo created during the tutorial on GitHub.\n\n## Starting the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#starting-the-indexer \"Direct link to Starting the Indexer\")\n\n> 📢 Make sure you have docker open\n\nThe following commands will start the docker and create databases for indexed data. Make sure to re-run `pnpm dev` if you've made some changes.\n\n```codeBlockLines_e6Vv\npnpm dev\n\n```\n\nNice, we indexed `1,721,352` blocks containing `58,784` events in 10 seconds, and they continue coming in.\n\n## View the indexed results [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#view-the-indexed-results \"Direct link to View the indexed results\")\n\nLet's check indexed players on the local Hasura server.\n\n```codeBlockLines_e6Vv\nopen http://localhost:8080\n\n```\n\nThe Hasura admin-secret / password is `testing`, and the tables can be viewed in the data tab or queried from the playground.\n\nNow, we can easily get the top 5 players, the number of inactive and active players, and the average sold value. What's left is a nice UI for the Sway Farm leaderboard, but that's not the tutorial's topic.\n\n> 🧠 A separate Guide page provides more details about navigating Hasura.\n\n## Deploy the indexer onto the hosted service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#deploy-the-indexer-onto-the-hosted-service \"Direct link to Deploy the indexer onto the hosted service\")\n\nOnce you have verified that the indexer is working for your contracts, then you are ready to deploy the indexer onto our hosted service.\n\nDeploying an indexer onto the hosted service allows you to extract information via graphQL queries into your front-end or some back-end application.\n\nNavigate to the hosted service to start deploying your indexer and refer to this documentation for more information on deploying your indexer.\n\n## What next? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-next \"Direct link to What next?\")\n\nOnce you have successfully finished the tutorial, you are ready to become a blockchain indexing wizard!\n\nJoin our Discord channel to make sure you catch all new releases.\n\n* * *\n\n## Indexing a Greeter Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-a-greeter-contract \"Direct link to Indexing a Greeter Contract\")\n\n**File:** `Tutorials/greeter-tutorial.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-5 \"Direct link to Introduction\")\n\nThis tutorial provides a step-by-step guide to indexing a simple Greeter smart contract deployed on multiple blockchains. You'll learn how to set up and run a multi-chain indexer using Envio's template system.\n\n### What is the Greeter Contract? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-is-the-greeter-contract \"Direct link to What is the Greeter Contract?\")\n\nThe Greeter contract is a straightforward smart contract that allows users to store greeting messages on the blockchain. For this tutorial, we'll be indexing instances of this contract deployed on both **Polygon** and **Linea** networks.\n\n### What You'll Build [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-youll-build \"Direct link to What You'll Build\")\n\nBy the end of this tutorial, you'll have:\n\n- A functioning multi-chain indexer that tracks greeting events\n- The ability to query these events through a GraphQL endpoint\n- Experience with Envio's core indexing functionality\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-5 \"Direct link to Prerequisites\")\n\nBefore starting, ensure you have the following installed:\n\n- **Node.js** _(v22 or newer recommended)_\n- **pnpm** _(v8 or newer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n\n> **Note:** Docker is specifically required to run your indexer locally. You can skip Docker installation if you plan only to use Envio's hosted service.\n\n## Step 1: Initialize Your Project [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-initialize-your-project \"Direct link to Step 1: Initialize Your Project\")\n\nFirst, let's create a new project using Envio's Greeter template:\n\n1. Open your terminal and run:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\n2. When prompted for a directory, you can press Enter to use the current directory or specify another path:\n\n```codeBlockLines_e6Vv\n? Set the directory: (.) .\n\n```\n\n3. Choose your preferred programming language for event handlers:\n\n```codeBlockLines_e6Vv\n? Which language would you like to use?\n> JavaScript\nTypeScript\nReScript\n\n```\n\n4. Select the **Template** initialization option:\n\n```codeBlockLines_e6Vv\n? Choose an initialization option\n> Template\nContract Import\n\n```\n\n5. Choose the **Greeter** template:\n\n```codeBlockLines_e6Vv\n? Which template would you like to use?\n> Greeter\nErc20\n\n```\n\nAfter completing these steps, Envio will generate all the necessary files for your indexer project.\n\n## Step 2: Understanding the Generated Files [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-understanding-the-generated-files \"Direct link to Step 2: Understanding the Generated Files\")\n\nLet's examine the key files that were created:\n\n### `config.yaml` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configyaml-1 \"Direct link to configyaml-1\")\n\nThis configuration file defines which networks and contracts to index:\n\n```codeBlockLines_e6Vv\n# Partial example\nenvio_node:\nnetworks:\n    - name: polygon\n      # ... Polygon network settings\n      contracts:\n        - name: Greeter\n          address: \"0x9D02A17dE4E68545d3a58D3a20BbBE0399E05c9c\"\n          # ... contract settings\n    - name: linea\n      # ... Linea network settings\n      contracts:\n        - name: Greeter\n          address: \"0xdEe21B97AB77a16B4b236F952e586cf8408CF32A\"\n          # ... contract settings\n\n```\n\n### `schema.graphql` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schemagraphql-1 \"Direct link to schemagraphql-1\")\n\nThis schema defines the data structures for the indexed events:\n\n```codeBlockLines_e6Vv\ntype Greeting {\nid: ID!\nuser: String!\ngreeting: String!\nblockNumber: Int!\nblockTimestamp: Int!\ntransactionHash: String!\n}\n\ntype User {\nid: ID!\nlatestGreeting: String!\nnumberOfGreetings: Int!\ngreetings: [String!]!\n}\n\n```\n\n### `src/EventHandlers.js` (or `.ts`/ `.res`) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#srceventhandlersjs-or-tsres \"Direct link to srceventhandlersjs-or-tsres\")\n\nThis file contains the logic to process events emitted by the Greeter contract.\n\n## Step 3: Start Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-start-your-indexer-1 \"Direct link to Step 3: Start Your Indexer\")\n\n> **Important:** Make sure Docker Desktop is running before proceeding.\n\n1. Start the indexer with:\n\n```codeBlockLines_e6Vv\npnpm dev\n\n```\n\nThis command:\n\n- Launches Docker containers for the database and Hasura\n- Sets up your local development environment\n- Begins indexing data from the specified contracts\n- Opens a terminal UI to monitor indexing progress\n\nThe indexer will retrieve data from both Polygon and Linea blockchains, starting from the blocks specified in your `config.yaml` file.\n\n## Step 4: Interact with the Contracts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-interact-with-the-contracts \"Direct link to Step 4: Interact with the Contracts\")\n\nTo see your indexer in action, you can write new greetings to the blockchain:\n\n### For Polygon: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#for-polygon \"Direct link to For Polygon:\")\n\n1. Visit the contract on Polygonscan\n2. Connect your wallet\n3. Use the `setGreeting` function to write a new greeting\n4. Submit the transaction\n\n### For Linea: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#for-linea \"Direct link to For Linea:\")\n\n1. Visit the contract on Lineascan\n2. Connect your wallet\n3. Use the `setGreeting` function to write a new greeting\n4. Submit the transaction\n\nSince this is a multi-chain example, you can interact with both contracts to see how Envio handles data from different blockchains simultaneously.\n\n## Step 5: Query the Indexed Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-query-the-indexed-data \"Direct link to Step 5: Query the Indexed Data\")\n\nNow you can explore the data your indexer has captured:\n\n1. Open Hasura at [http://localhost:8080](http://localhost:8080/)\n2. When prompted for authentication, use the password: `testing`\n3. Navigate to the **Data** tab to browse the database tables\n4. Or use the **API** tab to write GraphQL queries\n\n### Example Query [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-query-1 \"Direct link to Example Query\")\n\nTry this query to see the latest greetings:\n\n```codeBlockLines_e6Vv\nquery GetGreetings {\nGreeting(limit: 10, order_by: { blockTimestamp: desc }) {\n    id\n    user\n    greeting\n    blockNumber\n    blockTimestamp\n    transactionHash\n}\n}\n\n```\n\n## Step 6: Deploy to Production (Optional) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-6-deploy-to-production-optional \"Direct link to Step 6: Deploy to Production (Optional)\")\n\nWhen you're ready to move from local development to production:\n\n1. Visit the Envio Hosted Service\n2. Follow the steps to deploy your indexer\n3. Get a production GraphQL endpoint for your application\n\nFor detailed deployment instructions, see the Hosted Service documentation.\n\n## What You've Learned [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-youve-learned-2 \"Direct link to What You've Learned\")\n\nBy completing this tutorial, you've learned:\n\n- How to initialize an Envio project from a template\n- How indexers process data from multiple blockchains\n- How to query indexed data using GraphQL\n- The basic structure of an Envio indexing project\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#next-steps-3 \"Direct link to Next Steps\")\n\nNow that you've mastered the basics, you can:\n\n- Try the Contract Import feature to index any deployed contract\n- Customize the event handlers to implement more complex indexing logic\n- Add relationships between entities in your schema\n- Explore the Advanced Querying features\n- Create aggregated statistics from your indexed data\n\nFor more tutorials and examples, visit the Envio Documentation or join our Discord community for support.\n\n* * *\n\n## Getting Price Data in Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-price-data-in-your-indexer \"Direct link to Getting Price Data in Your Indexer\")\n\n**File:** `Tutorials/price-data.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-6 \"Direct link to Introduction\")\n\nMany blockchain applications require price data to calculate values such as:\n\n- Historical token transfer values in USD\n- Total value locked (TVL) in DeFi protocols over time\n- Portfolio valuations at specific points in time\n\nThis tutorial explores three different approaches to incorporating price data into your Envio indexer, using a real-world example of tracking ETH deposits into a Uniswap V3 liquidity pool on the Blast blockchain.\n\n> **TL;DR:** The complete code for this tutorial is available in this GitHub repository.\n\n## What You'll Learn [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-youll-learn \"Direct link to What You'll Learn\")\n\nIn this tutorial, you'll:\n\n- Compare three different methods for accessing token price data\n- Analyze the tradeoffs between accuracy, decentralization, and performance\n- Implement a multi-source price feed in an Envio indexer\n- Build a practical example indexing Uniswap V3 liquidity events with price context\n\n## Price Data Methods Compared [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#price-data-methods-compared \"Direct link to Price Data Methods Compared\")\n\nThere are three primary methods to access price data within your indexer:\n\n| Method | Description | Speed | Accuracy | Decentralization |\n| --- | --- | --- | --- | --- |\n| Oracles | On-chain price feeds (e.g., API3, Chainlink) | Fast | Medium | Medium |\n| DEX Pools | Swap events from decentralized exchanges | Fast | Medium-High | High |\n| Off-chain APIs | External services (e.g., CoinGecko) | Slow | High | Low |\n\nLet's explore each method in detail.\n\n## Method 1: Using Oracle Price Feeds [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#method-1-using-oracle-price-feeds \"Direct link to Method 1: Using Oracle Price Feeds\")\n\nOracle networks provide on-chain price data through specialized smart contracts. For this tutorial, we'll use API3 price feeds on Blast.\n\n### How Oracles Work [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-oracles-work \"Direct link to How Oracles Work\")\n\nOracle services like API3 maintain a network of data providers that push price updates to on-chain contracts. These updates typically occur:\n\n- At regular time intervals\n- When price deviations exceed a predefined threshold (e.g., 1%)\n- When manually triggered by network participants\n\n### Finding the Right Oracle Feed [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#finding-the-right-oracle-feed \"Direct link to Finding the Right Oracle Feed\")\n\nTo locate the ETH/USD price feed using API3 on Blast:\n\n1. Identify the API3 contract address: `0x709944a48cAf83535e43471680fDA4905FB3920a`\n\n2. Find the data feed ID for ETH/USD:\n   - The dAPI name \"ETH/USD\" as bytes32: `0x4554482f55534400000000000000000000000000000000000000000000000000`\n   - Using the `dapiNameToDataFeedId` function, this maps to `0x3efb3990846102448c3ee2e47d22f1e5433cd45fa56901abe7ab3ffa054f70b5`\n3. Monitor the `UpdatedBeaconSetWithBeacons` events with this data feed ID to get price updates\n\n\n### Oracle Advantages and Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#oracle-advantages-and-limitations \"Direct link to Oracle Advantages and Limitations\")\n\n**Advantages:**\n\n- Fast indexing (no external API calls required)\n- Moderate decentralization\n- Generally reliable data\n\n**Limitations:**\n\n- Updates only on significant price changes\n- Limited token coverage (mainly high-liquidity pairs)\n- Minor accuracy tradeoffs\n\n## Method 2: Using DEX Pool Swap Events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#method-2-using-dex-pool-swap-events \"Direct link to Method 2: Using DEX Pool Swap Events\")\n\nDecentralized exchanges like Uniswap provide price data through swap events. We'll use the USDB/WETH pool on Blast to derive ETH pricing.\n\n### Locating the Right DEX Pool [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#locating-the-right-dex-pool \"Direct link to Locating the Right DEX Pool\")\n\nFirst, we need to find the specific Uniswap V3 pool for USDB/WETH:\n\n```codeBlockLines_e6Vv\n\nconst usdb = \"0x4300000000000000000000000000000000000003\";\nconst weth = \"0x4300000000000000000000000000000000000004\";\nconst factoryAddress = \"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd\";\nconst factoryAbi = parseAbi([\\\n\"function getPool( address tokenA, address tokenB, uint24 fee ) external view returns (address pool)\",\\\n]);\n\nconst providerUrl = \"https://rpc.ankr.com/blast\";\nconst poolBips = 3000; // 0.3%. This is measured in hundredths of a bip\n\nconst client = createPublicClient({\nchain: blast,\ntransport: http(providerUrl),\n});\n\nconst factoryContract = getContract({\nabi: factoryAbi,\naddress: factoryAddress,\nclient: client,\n});\n\n(async () => {\nconst poolAddress = await factoryContract.read.getPool([\\\n    usdb,\\\n    weth,\\\n    poolBips,\\\n]);\nconsole.log(poolAddress);\n})();\n\n```\n\n> **Tip:** You can also manually find the pool address using the `getPool` function on a block explorer.\n\nRunning this code reveals the USDB/WETH pool is at `0xf52B4b69123CbcF07798AE8265642793b2E8990C`.\n\n### Getting Price Data From Swap Events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-price-data-from-swap-events \"Direct link to Getting Price Data From Swap Events\")\n\nUniswap V3 emits `Swap` events containing price information in the `sqrtPriceX96` field. To convert this to a price, we'll use a formula in our event handler.\n\n### DEX Advantages and Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#dex-advantages-and-limitations \"Direct link to DEX Advantages and Limitations\")\n\n**Advantages:**\n\n- Very decentralized\n- High update frequency\n- Wide token coverage\n\n**Limitations:**\n\n- Susceptible to price impact and manipulation (especially in low-liquidity pools)\n- Requires extra calculations to derive prices\n- May require multiple pools for cross-pair calculations\n\n## Method 3: Using Off-chain APIs [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#method-3-using-off-chain-apis \"Direct link to Method 3: Using Off-chain APIs\")\n\nExternal price APIs like CoinGecko provide comprehensive token price data but require HTTP calls from your indexer.\n\n### Making API Requests [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#making-api-requests \"Direct link to Making API Requests\")\n\nHere's a simple function to fetch historical ETH prices from CoinGecko:\n\n```codeBlockLines_e6Vv\nconst COIN_GECKO_API_KEY = process.env.COIN_GECKO_API_KEY;\n\nasync function fetchEthPriceFromUnix(\nunix: number,\ntoken = \"ethereum\"\n): Promise {\n// convert unix to date dd-mm-yyyy\nconst _date = new Date(unix * 1000);\nconst date = _date.toISOString().slice(0, 10).split(\"-\").reverse().join(\"-\");\nreturn fetchEthPrice(date.slice(0, 10), token);\n}\n\nasync function fetchEthPrice(\ndate: string,\ntoken = \"ethereum\"\n): Promise {\nconst options = {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"x-cg-demo-api-key\": COIN_GECKO_API_KEY,\n    },\n};\n\nreturn fetch(\n    `https://api.coingecko.com/api/v3/coins/${token}/history?date=${date}&localization=false`,\n    options as any\n)\n    .then((res) => res.json())\n    .then((res: any) => {\n      const usdPrice = res.market_data.current_price.usd;\n      console.log(`ETH price on ${date}: ${usdPrice}`);\n      return usdPrice;\n    })\n    .catch((err) => console.error(err));\n}\n\nexport default fetchEthPriceFromUnix;\n\n```\n\n> **Note:** The free CoinGecko API only provides daily price data (at 00:00 UTC), not block-by-block precision. For production use, consider a paid API with more granular historical data.\n\n### Off-chain API Advantages and Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#off-chain-api-advantages-and-limitations \"Direct link to Off-chain API Advantages and Limitations\")\n\n**Advantages:**\n\n- Highest accuracy (with paid APIs)\n- Most comprehensive token coverage\n- No susceptibility to on-chain manipulation\n\n**Limitations:**\n\n- Significantly slows indexing speed due to API calls\n- Centralized data source\n- May require paid subscriptions for full functionality\n\n## Building a Multi-Source Price Feed Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#building-a-multi-source-price-feed-indexer \"Direct link to Building a Multi-Source Price Feed Indexer\")\n\nNow let's build an indexer that compares all three methods when tracking Uniswap V3 liquidity pool deposits.\n\n### Step 1: Initialize Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-initialize-your-indexer-2 \"Direct link to Step 1: Initialize Your Indexer\")\n\nCreate a new Envio indexer project:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\n### Step 2: Configure Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-configure-your-indexer \"Direct link to Step 2: Configure Your Indexer\")\n\nEdit your `config.yaml` file to track both the API3 oracle and the Uniswap V3 pool:\n\n```codeBlockLines_e6Vv\n# yaml-language-server: $schema=./node_modules/envio/evm.schema.json\nname: envio-indexer\npreload_handlers: true\nnetworks:\n  - id: 81457\n    start_block: 11000000\n    contracts:\n      - name: Api3ServerV1\n        address:\n          - 0x709944a48cAf83535e43471680fDA4905FB3920a\n        handler: src/EventHandlers.ts\n        events:\n          - event: UpdatedBeaconSetWithBeacons(bytes32 indexed beaconSetId, int224 value, uint32 timestamp)\n      - name: UniswapV3Pool\n        address:\n          - 0xf52B4b69123CbcF07798AE8265642793b2E8990C\n        handler: src/EventHandlers.ts\n        events:\n          - event: Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)\n          - event: Mint(address sender, address indexed owner, int24 indexed tickLower, int24 indexed tickUpper, uint128 amount, uint256 amount0, uint256 amount1)\n            field_selection:\n              transaction_fields:\n                - \"hash\"\n\n```\n\n> **Important:** The `field_selection` section is needed to include transaction hashes in your indexed data.\n\n### Step 3: Define Your Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-define-your-schema \"Direct link to Step 3: Define Your Schema\")\n\nCreate a schema that captures price data from all three sources:\n\n```codeBlockLines_e6Vv\ntype OraclePoolPrice {\nid: ID!\nvalue: BigInt!\ntimestamp: BigInt!\nblock: Int!\n}\n\ntype UniswapV3PoolPrice {\nid: ID!\nsqrtPriceX96: BigInt!\ntimestamp: Int!\nblock: Int!\n}\n\ntype EthDeposited {\nid: ID!\ntimestamp: Int!\nblock: Int!\noraclePrice: Float!\npoolPrice: Float!\noffChainPrice: Float!\noffchainOracleDiff: Float!\ndepositedPool: Float!\ndepositedOffchain: Float!\ndepositedOrcale: Float!\ntxHash: String!\n}\n\n```\n\n### Step 4: Implement Event Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-implement-event-handlers \"Direct link to Step 4: Implement Event Handlers\")\n\nCreate event handlers to process data from all three sources:\n\n```codeBlockLines_e6Vv\nimport {\nApi3ServerV1,\nOraclePoolPrice,\nUniswapV3Pool,\nUniswapV3PoolPrice,\nEthDeposited,\n} from \"generated\";\n\nlet latestOraclePrice = 0;\nlet latestPoolPrice = 0;\n\nApi3ServerV1.UpdatedBeaconSetWithBeacons.handler(async ({ event, context }) => {\n// Filter out the beacon set for the ETH/USD price\nif (\n    event.params.beaconSetId !=\n    \"0x3efb3990846102448c3ee2e47d22f1e5433cd45fa56901abe7ab3ffa054f70b5\"\n) {\n    return;\n}\n\nconst entity: OraclePoolPrice = {\n    id: `${event.chainId}-${event.block.number}-${event.logIndex}`,\n    value: event.params.value,\n    timestamp: event.params.timestamp,\n    block: event.block.number,\n};\n\nlatestOraclePrice = Number(event.params.value) / Number(10 ** 18);\n\ncontext.OraclePoolPrice.set(entity);\n});\n\nUniswapV3Pool.Swap.handler(async ({ event, context }) => {\nconst entity: UniswapV3PoolPrice = {\n    id: `${event.chainId}-${event.block.number}-${event.logIndex}`,\n    sqrtPriceX96: event.params.sqrtPriceX96,\n    timestamp: event.block.timestamp,\n    block: event.block.number,\n};\n\nlatestPoolPrice = Number(\n    BigInt(2 ** 192) /\n      (BigInt(event.params.sqrtPriceX96) * BigInt(event.params.sqrtPriceX96))\n);\n\ncontext.UniswapV3PoolPrice.set(entity);\n});\n\nUniswapV3Pool.Mint.handler(async ({ event, context }) => {\nconst offChainPrice = await fetchEthPriceFromUnix(event.block.timestamp);\n\nconst ethDepositedUsdPool =\n    (latestPoolPrice * Number(event.params.amount1)) / 10 ** 18;\nconst ethDepositedUsdOffchain =\n    (offChainPrice * Number(event.params.amount1)) / 10 ** 18;\nconst ethDepositedUsdOrcale =\n    (latestOraclePrice * Number(event.params.amount1)) / 10 ** 18;\n\nconst EthDeposited: EthDeposited = {\n    id: `${event.chainId}-${event.block.number}-${event.logIndex}`,\n    timestamp: event.block.timestamp,\n    block: event.block.number,\n    oraclePrice: round(latestOraclePrice),\n    poolPrice: round(latestPoolPrice),\n    offChainPrice: round(offChainPrice),\n    depositedPool: round(ethDepositedUsdPool),\n    depositedOffchain: round(ethDepositedUsdOffchain),\n    depositedOrcale: round(ethDepositedUsdOrcale),\n    offchainOracleDiff: round(\n      ((ethDepositedUsdOffchain - ethDepositedUsdOrcale) /\n        ethDepositedUsdOffchain) *\n        100\n    ),\n    txHash: event.transaction.hash,\n};\n\ncontext.EthDeposited.set(EthDeposited);\n});\n\nfunction round(value: number) {\nreturn Math.round(value * 100) / 100;\n}\n\n```\n\n### Step 5: Run Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-run-your-indexer \"Direct link to Step 5: Run Your Indexer\")\n\nStart your indexer with:\n\n```codeBlockLines_e6Vv\npnpm dev\n\n```\n\nThis will begin indexing data from block 11,000,000 on Blast.\n\n### Step 6: Analyze the Results [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-6-analyze-the-results \"Direct link to Step 6: Analyze the Results\")\n\nAfter running your indexer, you can query the data in Hasura to compare the three price data sources:\n\n```codeBlockLines_e6Vv\nquery ComparePrices {\nEthDeposited(order_by: { block: desc }, limit: 10) {\n    block\n    timestamp\n    oraclePrice\n    poolPrice\n    offChainPrice\n    depositedPool\n    depositedOffchain\n    depositedOrcale\n    offchainOracleDiff\n    txHash\n}\n}\n\n```\n\n## Results Analysis [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#results-analysis \"Direct link to Results Analysis\")\n\nWhen comparing our three price data sources, we found:\n\n!Table of indexer results\n\nLooking at the `offchainOracleDiff` column, we can see that oracle and off-chain prices typically align closely but can deviate by as much as 17.98% in some cases.\n\nFor the highlighted transaction (0xe7e79ddf29ed2f0ea8cb5bb4ffdab1ea23d0a3a0a57cacfa875f0d15768ba37d), we can compare our calculated values:\n\n- **Actual value** (from block explorer): $2,358.27\n- **DEX pool value** ( `depositedPool`): $2,117.07\n- **Off-chain API value** ( `depositedOffchain`): $2,156.15\n\nThis demonstrates that even the most accurate methods have limitations.\n\n## Conclusion: Choosing the Right Method [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#conclusion-choosing-the-right-method \"Direct link to Conclusion: Choosing the Right Method\")\n\nBased on our analysis, here are some recommendations for choosing a price data method:\n\n### Use Oracle or DEX Pools when: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-oracle-or-dex-pools-when \"Direct link to Use Oracle or DEX Pools when:\")\n\n- Indexing speed is critical\n- Absolute precision isn't required\n- You're working with high-liquidity tokens\n\n### Use Off-chain APIs when: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-off-chain-apis-when \"Direct link to Use Off-chain APIs when:\")\n\n- Price accuracy is paramount\n- Indexing speed is less important\n- You can implement effective caching\n\n### For maximum accuracy while maintaining performance: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#for-maximum-accuracy-while-maintaining-performance \"Direct link to For maximum accuracy while maintaining performance:\")\n\n- Combine multiple methods and aggregate results\n- Use high-volume DEX pools on major networks\n- Cache API results to avoid redundant calls\n\n## Next Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#next-steps-4 \"Direct link to Next Steps\")\n\nTo further enhance your price data indexing:\n\n1. **Implement caching** for off-chain API calls\n2. **Cross-reference multiple DEX pools** for better accuracy\n3. **Consider time-weighted average prices (TWAP)** instead of spot prices\n4. **Use multi-chain indexing** to access higher-liquidity pools on major networks\n\nBy carefully choosing and implementing the right price data strategy, you can build robust indexers that provide accurate financial data for your blockchain applications.\n\n* * *\n\n## Scaffold-Eth-2 Envio Extension [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#scaffold-eth-2-envio-extension \"Direct link to Scaffold-Eth-2 Envio Extension\")\n\n**File:** `Tutorials/tutorial-scaffold-eth-2.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-7 \"Direct link to Introduction\")\n\nThe Scaffold-ETH 2 Envio extension makes indexing your deployed smart contracts as simple as possible. Generate a boilerplate indexer for your deployed contracts with a single click and start indexing their events immediately.\n\nWith this extension, you get:\n\n- 🔍 **Automatic indexer generation** from your deployed contracts\n- 📊 **Status dashboard** with links to Envio metrics and database\n- 🔄 **One-click regeneration** to update the indexer when you deploy new contracts\n- 📈 **GraphQL API** for querying your indexed blockchain data\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-6 \"Direct link to Prerequisites\")\n\nBefore starting, ensure you have the following installed:\n\n- **Node.js v20** _(v20 or newer required)_\n- **pnpm** _(for Envio indexer)_\n- **Docker Desktop** _(required to run the Envio indexer locally)_\n- **Yarn** _(for Scaffold-ETH)_\n\n## Step 1: Create a New Scaffold-ETH 2 Project with Envio Extension [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-create-a-new-scaffold-eth-2-project-with-envio-extension \"Direct link to Step 1: Create a New Scaffold-ETH 2 Project with Envio Extension\")\n\nTo create a new Scaffold-ETH 2 project with the Envio extension already integrated:\n\n```codeBlockLines_e6Vv\nnpx create-eth@latest -e enviodev/scaffold-eth-2-extension\n\n```\n\n## Step 2: Start the Local Blockchain [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-start-the-local-blockchain \"Direct link to Step 2: Start the Local Blockchain\")\n\nNavigate to your project directory and start the local blockchain:\n\n```codeBlockLines_e6Vv\ncd your-project-name\nyarn chain\n\n```\n\nThis will start a local blockchain node for development.\n\n## Step 3: Deploy Your Contracts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-deploy-your-contracts \"Direct link to Step 3: Deploy Your Contracts\")\n\nIn a new terminal window, navigate to your project directory and deploy the default smart contracts:\n\n```codeBlockLines_e6Vv\ncd your-project-name\nyarn deploy\n\n```\n\nThis will deploy the default contracts to the local blockchain. This step is optional and can also be done once you've created your own smart contracts and deployed them using `yarn deploy`.\n\n## Step 4: Start Scaffold-ETH Frontend [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-start-scaffold-eth-frontend \"Direct link to Step 4: Start Scaffold-ETH Frontend\")\n\nFrom your project directory, start the Scaffold-ETH frontend:\n\n```codeBlockLines_e6Vv\nyarn start\n\n```\n\nThis will start the Scaffold-ETH frontend at `http://localhost:3000`.\n\n## Step 5: Generate the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-5-generate-the-indexer \"Direct link to Step 5: Generate the Indexer\")\n\nNavigate to the Envio page in your Scaffold-ETH frontend at `http://localhost:3000/envio` and click the **\"Generate\"** button. This should only be done once you've created a smart contract and ran `yarn deploy`. This will create the boilerplate indexer from your deployed contracts.\n\nThe Envio page also includes a helpful \"How to Use\" section with step-by-step instructions.\n\n## Step 6: Start the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-6-start-the-indexer \"Direct link to Step 6: Start the Indexer\")\n\nNavigate to the Envio package directory and start the indexer:\n\n```codeBlockLines_e6Vv\ncd packages/envio\npnpm dev\n\n```\n\nThis will begin indexing your contract events.\n\n## Regenerating the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#regenerating-the-indexer \"Direct link to Regenerating the Indexer\")\n\nWhen you deploy new contracts or make changes to existing ones, you'll need to regenerate the indexer:\n\n### Via Frontend Dashboard [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#via-frontend-dashboard \"Direct link to Via Frontend Dashboard\")\n\n1. Go to the Envio page at `http://localhost:3000/envio`\n2. Click \"Generate\" to regenerate the boilerplate indexer\n\n### Via Command Line [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#via-command-line \"Direct link to Via Command Line\")\n\n```codeBlockLines_e6Vv\ncd packages/envio\npnpm update\npnpm codegen\n\n```\n\n> **Note:** Regenerating will overwrite any custom handlers, config, and schema changes, creating a fresh boilerplate indexer based on your deployed contracts. After regenerating, you'll need to stop the running indexer (Ctrl+C) and restart it with `pnpm dev` for the changes to take effect.\n\n* * *\n\n## Dynamic Contracts / Factories [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#dynamic-contracts--factories \"Direct link to Dynamic Contracts / Factories\")\n\n**File:** `Advanced/dynamic-contracts.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-8 \"Direct link to Introduction\")\n\nMany blockchain systems use factory patterns where new contracts are created dynamically. Common examples include:\n\n- DEXes like Uniswap where each trading pair creates a new contract\n- NFT platforms that deploy new collection contracts\n- Lending protocols that create new markets as isolated contracts\n\nWhen indexing these systems, you need a way to discover and track these dynamically created contracts. Envio provides powerful tools to handle this use case.\n\n### Contract Registration Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-registration-handler \"Direct link to Contract Registration Handler\")\n\nInstead of a template based approach, we've introduced a `contractRegister` handler that can be added to any event.\n\nThis allows you to easily:\n\n- Register contracts from any event handler.\n- Use conditions and any logic you want to register contracts.\n- Have nested factories which are registered by other factories.\n\n```codeBlockLines_e6Vv\n..contractRegister(({ event, context }) => {\ncontext.add();\n});\n\n```\n\n## Example: NFT Factory Pattern [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-nft-factory-pattern \"Direct link to Example: NFT Factory Pattern\")\n\nLet's look at a complete example using an NFT factory pattern.\n\n### Scenario [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#scenario \"Direct link to Scenario\")\n\n- `NftFactory` contract creates new `SimpleNft` contracts\n- We want to index events from all NFTs created by this factory\n- Each time a new NFT is created, the factory emits a `SimpleNftCreated` event\n\n### 1\\. Configure Your Contracts in config.yaml [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-configure-your-contracts-in-configyaml \"Direct link to 1. Configure Your Contracts in config.yaml\")\n\n```codeBlockLines_e6Vv\nname: nftindexer\ndescription: NFT Factory\nnetworks:\n  - id: 1337\n    start_block: 0\n    contracts:\n      - name: NftFactory\n        abi_file_path: abis/NftFactory.json\n        address: 0x4675a6B115329294e0518A2B7cC12B70987895C4 # Factory address is known\n        handler: src/EventHandlers.ts\n        events:\n          - event: SimpleNftCreated (string name, string symbol, uint256 maxSupply, address contractAddress)\n\n      - name: SimpleNft\n        abi_file_path: abis/SimpleNft.json\n        # No address field - we'll discover these addresses from events\n        handler: src/EventHandlers.ts\n        events:\n          - event: Transfer (address from, address to, uint256 tokenId)\n\n```\n\nNote that:\n\n- The `NftFactory` contract has a known address specified in the config\n- The `SimpleNft` contract has no address, as we'll register instances dynamically\n\n### 2\\. Create the Contract Registration Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-create-the-contract-registration-handler \"Direct link to 2. Create the Contract Registration Handler\")\n\nIn your `src/EventHandlers.ts` file:\n\n```codeBlockLines_e6Vv\n// Register SimpleNft contracts whenever they're created by the factory\nNftFactory.SimpleNftCreated.contractRegister(({ event, context }) => {\n// Register the new NFT contract using its address from the event\ncontext.addSimpleNft(event.params.contractAddress);\n\ncontext.log.info(\n    `Registered new SimpleNft at ${event.params.contractAddress}`\n);\n});\n\n// Handle Transfer events from all SimpleNft contracts\nSimpleNft.Transfer.handler(async ({ event, context }) => {\n// Your event handling logic here\ncontext.log.info(\n    `NFT Transfer at ${event.srcAddress} - Token ID: ${event.params.tokenId}`\n);\n\n// Example: Store transfer information in the database\n// ...\n});\n\n```\n\n## Async Contract Register [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#async-contract-register \"Direct link to Async Contract Register\")\n\nAs of version `2.21`, you can use async contract registration.\n\nThis is a unique feature of Envio that allows you to perform an external call to determine the address of the contract to register.\n\n```codeBlockLines_e6Vv\nNftFactory.SimpleNftCreated.contractRegister(async ({ event, context }) => {\nconst version = await getContractVersion(event.params.contractAddress);\nif (version === \"v2\") {\n    context.addSimpleNftV2(event.params.contractAddress);\n} else {\n    context.addSimpleNft(event.params.contractAddress);\n}\n});\n\n```\n\n## When to Use Dynamic Contract Registration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-use-dynamic-contract-registration \"Direct link to When to Use Dynamic Contract Registration\")\n\nUse dynamic contract registration when:\n\n- Your system includes factory contracts that deploy new contracts over time\n- You want to index events from all instances of a particular contract type\n- The addresses of these contracts aren't known at the time you create your indexer\n\n## Important Notes [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#important-notes \"Direct link to Important Notes\")\n\n- **Block Coverage**: When a dynamic contract is registered, Envio will index all events from that contract in the same block where it was created, even if those events happened in transactions before the registration event. This is particularly useful for contracts that emit events during their construction.\n\n- **Handler Organization**: You can register contracts from any event handler. For example, you might register a token contract when you see it being added to a registry, not just when it's created.\n\n- **Pre-registration**: Pre-registration was a recommended mode to optimize performance. But starting from version `2.19` the option is removed in favor of the default behavior, which got even faster.\n\n\n## Debugging Tips [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#debugging-tips \"Direct link to Debugging Tips\")\n\n- Use logging in your `contractRegister` function to confirm contracts are being registered.\n- If you're not seeing events from your dynamic contracts, verify they're being properly registered in database.\n\nFor more information on writing event handlers, see the Event Handlers Guide.\n\n* * *\n\n## Wildcard Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#wildcard-indexing \"Direct link to Wildcard Indexing\")\n\n**File:** `Advanced/wildcard-indexing.mdx`\n\nWildcard indexing is a feature that allows you to index all events matching a specified event signature without requiring the contract address from which the event was emitted. This is useful in cases such as indexing contracts deployed through factories, where the factory contract does not emit any events upon contract creation. It also enables indexing events from all contracts implementing a standard (e.g. all ERC20 transfers).\n\nnote\n\nWildcard Indexing is supported for HyperSync & HyperFuel data sources starting from `v2.3.0`.\nFor the RPC data source support added in the `v2.12.0` release.\n\n## Index all ERC20 transfers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#index-all-erc20-transfers \"Direct link to Index all ERC20 transfers\")\n\nAs an example, let's say we want to index all ERC20 `Transfer` events. Start with a `config.yaml` file:\n\n```codeBlockLines_e6Vv\nname: transefer-indexer\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: ERC20\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Transfer(address indexed from, address indexed to, uint256 value)\n\n```\n\nLet's also define some entities in `schema.graphql` file, so our handlers can store the processed data:\n\n```codeBlockLines_e6Vv\ntype Transfer {\nid: ID!\nfrom: String!\nto: String!\n}\n\n```\n\nAnd the last bit is to register an event handler in the `src/EventHandlers.ts`. Note how we pass the `wildcard: true` option to enable wildcard indexing:\n\n```codeBlockLines_e6Vv\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    context.Transfer.set({\n      id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n      from: event.params.from,\n      to: event.params.to,\n    });\n},\n{ wildcard: true }\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { ERC20 } = require(\"generated\");\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    context.Transfer.set({\n      id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n      from: event.params.from,\n      to: event.params.to,\n    });\n},\n{ wildcard: true }\n);\n\n```\n\n```codeBlockLines_e6Vv\nHandlers.ERC20.Transfer.handler(\nasync ({ event, context }) => {\n    context.Transfer.set({\n      id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n      from: event.params.from,\n      to: event.params.to,\n    })\n},\n~eventConfig={wildcard: true},\n)\n\n```\n\nAfter running your indexer with `pnpm dev` you will have all ERC20 `Transfer` events indexed, regardless of the contract address from which the event was emitted.\n\n## Topic Filtering [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#topic-filtering \"Direct link to Topic Filtering\")\n\nIndexing all ERC20 `Transfer` events is a lot of events, so ideally to reduce it only to the ones you trully need with the Topic Filtering feature.\n\nWhen you register an event handler or a contract register you can provide the `eventFilters` option. You can filter by each `indexed` parameter on the given event.\n\nLet's say you only want to index `Mint` events where the `from` address is equal to `ZERO_ADDRESS`:\n\n```codeBlockLines_e6Vv\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{ wildcard: true, eventFilters: { from: ZERO_ADDRESS } }\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { ERC20 } = require(\"generated\");\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{ wildcard: true, eventFilters: { from: ZERO_ADDRESS } }\n);\n\n```\n\n```codeBlockLines_e6Vv\nopen Types.SingleOrMultiple\n\nlet zeroAddress = Address.unsafeFromString(\"0x0000000000000000000000000000000000000000\")\n\nHandlers.ERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n~eventConfig={\n    wildcard: true,\n    eventFilters: Single({from: single(zeroAddress)}),\n},\n)\n\n```\n\n## Multiple Filters [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#multiple-filters \"Direct link to Multiple Filters\")\n\nIf you want to index both `Mint` and `Burn` events you can provide multiple filters as an array. Also, every parameter can accept an array to filter by multiple possible values. We'll use it to filter by a group of whitelisted addresses in the example below:\n\n```codeBlockLines_e6Vv\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst WHITELISTED_ADDRESSES = [\\\n\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\\\n\"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\\\n\"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\\\n];\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{\n    wildcard: true,\n    eventFilters: [\\\n      { from: ZERO_ADDRESS, to: WHITELISTED_ADDRESSES },\\\n      { from: WHITELISTED_ADDRESSES, to: ZERO_ADDRESS },\\\n    ],\n}\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { ERC20 } = require(\"generated\");\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst WHITELISTED_ADDRESSES = [\\\n\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\\\n\"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\\\n\"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\\\n];\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{\n    wildcard: true,\n    eventFilters: [\\\n      { from: ZERO_ADDRESS, to: WHITELISTED_ADDRESSES },\\\n      { from: WHITELISTED_ADDRESSES, to: ZERO_ADDRESS },\\\n    ],\n}\n);\n\n```\n\n```codeBlockLines_e6Vv\nopen Types.SingleOrMultiple\n\nlet zeroAddress = Address.unsafeFromString(\"0x0000000000000000000000000000000000000000\")\n\nlet whitelistedAddresses = [\\\nAddress.unsafeFromString(\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"),\\\nAddress.unsafeFromString(\"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\"),\\\nAddress.unsafeFromString(\"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\")\\\n]\n\nHandlers.ERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n~eventConfig={\n    wildcard: true,\n    eventFilters: Multiple([\\\n      { from: single(zeroAddress), to: multiple(whitelistedAddresses) },\\\n      { from: multiple(whitelistedAddresses), to: single(zeroAddress) }\\\n    ]),\n},\n)\n\n```\n\n## Different Filters per Network [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#different-filters-per-network \"Direct link to Different Filters per Network\")\n\nFor Multichain Indexers you can pass a function to `eventFilters` and use `chainId` to filter by different values per network:\n\n```codeBlockLines_e6Vv\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst WHITELISTED_ADDRESSES = {\n1: [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"],\n137: [\\\n    \"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\\\n    \"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\\\n],\n};\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{\n    wildcard: true,\n    eventFilters: ({ chainId }) => [\\\n      { from: ZERO_ADDRESS, to: WHITELISTED_ADDRESSES[chainId] },\\\n      { from: WHITELISTED_ADDRESSES[chainId], to: ZERO_ADDRESS },\\\n    ],\n}\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { ERC20 } = require(\"generated\");\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst WHITELISTED_ADDRESSES = {\n1: [\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"],\n137: [\\\n    \"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\\\n    \"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\\\n],\n};\n\nERC20.Transfer.handler(\nasync ({ event, context }) => {\n    //... your handler logic\n},\n{\n    wildcard: true,\n    eventFilters: ({ chainId }) => [\\\n      { from: ZERO_ADDRESS, to: WHITELISTED_ADDRESSES[chainId] },\\\n      { from: WHITELISTED_ADDRESSES[chainId], to: ZERO_ADDRESS },\\\n    ],\n}\n);\n\n```\n\n## Index all ERC20 transfers to your Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#index-all-erc20-transfers-to-your-contract \"Direct link to Index all ERC20 transfers to your Contract\")\n\nBesides `chainId` you can also access the `addresses` value to filter by.\n\nFor example, if you have a `Safe` contract, you can index all ERC20 transfers sent specifically to/from your `Safe` contracts. The event filter gets addresses belonging to the contract, so we need to define the `Transfer` event on the `Safe` contract:\n\n```codeBlockLines_e6Vv\nname: locker\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: Safe\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Transfer(address indexed from, address indexed to, uint256 value)\n        addresses:\n          - 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\n          - 0x70997970C51812dc3A010C7d01b50e0d17dc79C8\n          - 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\n\n```\n\n```codeBlockLines_e6Vv\n\nSafe.Transfer.handler(async ({ event, context }) => {}, {\nwildcard: true,\neventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n});\n\n```\n\n```codeBlockLines_e6Vv\nconst { Safe } = require(\"generated\");\n\nSafe.Transfer.handler(async ({ event, context }) => {}, {\nwildcard: true,\neventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n});\n\n```\n\nThis example is not much different from using a `WHITELISTED_ADDRESSES` constant, but this becomes much more powerful when the `Safe` contract addresses are registered dynamically by a factory contract:\n\n```codeBlockLines_e6Vv\nname: locker\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: SafeRegistry\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: NewSafe(address safe)\n        addresses:\n          - 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\n      - name: Safe\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Transfer(address indexed from, address indexed to, uint256 value)\n\n```\n\n```codeBlockLines_e6Vv\n\nSafeRegistry.NewSafe.contractRegister(async ({ event, context }) => {\ncontext.addSafe(event.params.safe);\n});\n\nSafe.Transfer.handler(async ({ event, context }) => {}, {\nwildcard: true,\neventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n});\n\n```\n\n```codeBlockLines_e6Vv\nconst { SafeRegistry, Safe } = require(\"generated\");\n\nSafeRegistry.NewSafe.contractRegister(async ({ event, context }) => {\ncontext.addSafe(event.params.safe);\n});\n\nSafe.Transfer.handler(async ({ event, context }) => {}, {\nwildcard: true,\neventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n});\n\n```\n\n### Assert ERC20 Transfers in Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#assert-erc20-transfers-in-handler \"Direct link to Assert ERC20 Transfers in Handler\")\n\nAfter you got all ERC20 Transfers relevant to your contracts, you can additionally filter them in the handler. For example, to get only `USDC` transfers:\n\n```codeBlockLines_e6Vv\n\nconst USDC_ADDRESS = {\n84532: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n11155111: \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n};\n\nSafe.Transfer.handler(\nasync ({ event, context }) => {\n    // Filter and store only the USDC transfers that involve a Safe address\n    if (event.srcAddress === USDC_ADDRESS[event.chainId]) {\n      context.Transfer.set({\n        id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n        from: event.params.from,\n        to: event.params.to,\n      });\n    }\n},\n{\n    wildcard: true,\n    eventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n}\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { Safe } = require(\"generated\");\n\nconst USDC_ADDRESS = {\n84532: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n11155111: \"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\",\n};\n\nSafe.Transfer.handler(\nasync ({ event, context }) => {\n    // Filter and store only the USDC transfers that involve a Safe address\n    if (event.srcAddress === USDC_ADDRESS[event.chainId]) {\n      context.Transfer.set({\n        id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n        from: event.params.from,\n        to: event.params.to,\n      });\n    }\n},\n{\n    wildcard: true,\n    eventFilters: ({ addresses }) => [{ from: addresses }, { to: addresses }],\n}\n);\n\n```\n\n## Contract Register Example [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-register-example \"Direct link to Contract Register Example\")\n\nThe same `eventFilters` can be applied to `contractRegister` and `handlerWithLoader` APIs. Here is an example where we only register Uniswap pools that contain DAI token:\n\n```codeBlockLines_e6Vv\n\nconst DAI_ADDRESS = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\n\nUniV3Factory.PoolCreated.contractRegister(\nasync ({ event, context }) => {\n    const poolAddress = event.params.pool;\n    context.UniV3Pool.add(poolAddress);\n},\n{ eventFilters: [{ token0: DAI_ADDRESS }, { token1: DAI_ADDRESS }] }\n);\n\n```\n\n```codeBlockLines_e6Vv\nconst { UniV3Factory } = require(\"generated\");\n\nconst DAI_ADDRESS = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\";\n\nUniV3Factory.PoolCreated.contractRegister(\nasync ({ event, context }) => {\n    const poolAddress = event.params.pool;\n    context.UniV3Pool.add(poolAddress);\n},\n{ eventFilters: [{ token0: DAI_ADDRESS }, { token1: DAI_ADDRESS }] }\n);\n\n```\n\n```codeBlockLines_e6Vv\nopen Types.SingleOrMultiple\n\nlet daiAddress = Address.unsafeFromString(\"0x6B175474E89094C44Da98b954EedeAC495271d0F\")\n\nHandlers.UniV3Factory.PoolCreated.contractRegister(\nasync ({ event, context }) => {\n    let poolAddress = event.params.pool\n    context.UniV3Pool.add(poolAddress)\n},\n~eventConfig={\n    eventFilters: Multiple([\\\n      { token0: single(daiAddress) },\\\n      { token1: single(daiAddress) }\\\n    ])\n},\n)\n\n```\n\n## Handler With Loader Example [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#handler-with-loader-example \"Direct link to Handler With Loader Example\")\n\nFor `handlerWithLoader` API simply add `wildcard` or `eventFilters` options to the single argument object:\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handlerWithLoader({\nloader: async ({ event, context }) => {},\nhandler: async ({ event, context }) => {},\nwildcard: ...,\neventFilters: ...,\n});\n\n```\n\n## Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#limitations \"Direct link to Limitations\")\n\n- For any given network, only one event of a given signature can be indexed using wildcard indexing. This means that if you have multiple contract definitions in your config that contain the same event signature. Only one of them is allowed to be set to `wildcard: true`\n\n- Either the `contractRegister` or the `handler` function can take an event config object (with wildcard/eventFilters fields) but not both.\n\n- The RPC data source currently supports Topic Filtering only applied to a single wildcard event.\n\n\n* * *\n\n## Preload Optimization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#preload-optimization-1 \"Direct link to Preload Optimization\")\n\n**File:** `Advanced/preload-optimization.md`\n\n> **Important!** Preload optimization makes your handlers run **twice**.\n\nStarting from `envio@2.27` all new indexers are created with preload optimization pre-configured by default.\n\nThis optimization enables HyperIndex to efficiently preload entities used by handlers through batched database queries, while ensuring events are processed synchronously in their original order. When combined with the Effect API for external calls, this feature delivers performance improvements of multiple orders of magnitude compared to other indexing solutions.\n\n## Configure [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configure \"Direct link to Configure\")\n\nCurrently, you need to explicitly enable the preloaded configuration in your `config.yaml` file. In the future, this will be enabled by default.\n\n```codeBlockLines_e6Vv\npreload_handlers: true\n\n```\n\n## Why Preload? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-preload \"Direct link to Why Preload?\")\n\nTo ensure reliable data, HyperIndex guarantees that all events will be processed in the same order as they occurred on-chain.\n\nThis guarantee is crucial as it allows you to build indexers that depend on the sequential order of events.\n\nHowever, this leads to a challenge: Handlers must run one at a time, sequentially for each event. Any asynchronous operations will block the entire process.\n\nTo solve this, we introduced Preload Optimization.\n\nIt combines in-memory storage, batching, deduplication, and the Effect API to parallelize asynchronous operations across batches of events.\n\n## How It Works? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-it-works-1 \"Direct link to How It Works?\")\n\nWith Preload Optimization handlers run twice per event:\n\n1. **First Run (Preload Phase)**: All event handlers run concurrently for the whole batch of events. During the phase all DB write operations are skipped and only DB read operations and external calls are performed.\n2. **Second Run (Processing Phase)**: Each event handler runs sequentially in the on-chain order. During the phase it'll get the data from the in-memory store, reflecting changes made by previously processed events.\n\nThis double execution pattern ensures that entities created by earlier events in the batch are available to later events.\n\n### The Database I/O Problem [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#the-database-io-problem \"Direct link to The Database I/O Problem\")\n\nConsider this common pattern of getting entities in event handlers:\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\nconst sender = await context.Account.get(event.params.from);\nconst receiver = await context.Account.get(event.params.to);\n// Process the transfer...\n});\n\n```\n\n**Without Preload Optimization:** If you're processing 5,000 transfer events, each with unique `from` and `to` addresses, this results in **10,000 total database roundtrips**—one for each sender and receiver lookup (2 per event × 5,000 events). This creates a significant bottleneck that slows down your entire indexing process.\n\n**With Preload Optimization:** During the Preload Phase, all 5,000 events are processed in parallel. HyperIndex batches database reads that occur simultaneously into single database queries - one query for sender lookups and one for receiver lookups. The loaded accounts are cached in memory. After the Preload Phase completes, the second processing phase begins. This phase runs handlers sequentially in on-chain order, but instead of making database calls, it retrieves the data from the in-memory cache.\n\nFor our example of 5,000 transfer events, this optimization reduces database roundtrips from 10,000 calls to just 2!\n\n#### Optimizing for Concurrency [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimizing-for-concurrency \"Direct link to Optimizing for Concurrency\")\n\nYou can further optimize performance by requesting multiple entities concurrently:\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\n// Request sender and receiver concurrently for maximum efficiency\nconst [sender, receiver] = await Promise.all([\\\n    context.Account.get(event.params.from),\\\n    context.Account.get(event.params.to),\\\n]);\n// Process the transfer...\n});\n\n```\n\nThis approach can reduce the database roundtrips to just 1 for the entire batch of events!\n\n### The External Calls Problem [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#the-external-calls-problem \"Direct link to The External Calls Problem\")\n\nLet's say you want to populate your indexer with offchain data:\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\n// Without Preload: Blocking external calls\nconst metadata = await fetch(\n    `https://api.example.com/metadata/${event.params.from}`\n);\n\n// Process the transfer...\n});\n\n```\n\n**Without Preload Optimization:** If you're processing 5,000 transfer events, each with an external call, this results in **5,000 sequential external calls**—each waiting for the previous one to complete. This can turn a fast indexing process into a slow, sequential crawl.\n\n**With Preload Optimization:** Since handlers run **twice** for each event, making direct external calls can be problematic. The Effect API provides a solution. During the Preload Phase, it batches all external calls and runs them in parallel. Then during the Processing Phase, it runs the handlers sequentially, retrieving the already requested data from the in-memory store.\n\n```codeBlockLines_e6Vv\n\nconst fetchMetadata = experimental_createEffect(\n{\n    name: \"fetchMetadata\",\n    input: {\n      from: S.string,\n    },\n    output: {\n      decimals: S.number,\n      symbol: S.string,\n    },\n},\nasync ({ input }) => {\n    const metadata = await fetch(\n      `https://api.example.com/metadata/${input.from}`\n    );\n    return metadata;\n}\n);\n\nERC20.Transfer.handler(async ({ event, context }) => {\n// With Preload: Performs the call in parallel\nconst metadata = await context.effect(fetchMetadata, {\n    from: event.params.from,\n});\n\n// Process the transfer...\n});\n\n```\n\nAssuming an average call takes 200ms, this optimization reduces the total processing time for 5,000 events from ~16 minutes to ~200 milliseconds - making it 5,000 times faster!\n\nLearn more about the Effect API in our dedicated guide.\n\n### Preload Phase Behavior [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#preload-phase-behavior \"Direct link to Preload Phase Behavior\")\n\nThe Preload Phase is a special phase that runs before the actual event processing. It's designed to preload data that will be used during event processing.\n\nKey characteristics of the Preload Phase:\n\n- It runs in parallel for all events in the batch\n- Exceptions won't crash the indexer but will silently abort the Preload Phase for that specific event (Starting from `envio@2.23`)\n- All storage updates are ignored\n- All `context.log` calls are ignored\n\nDuring the second run (Processing Phase), all operations become fully enabled:\n\n- Exceptions will crash the indexer if not handled\n- Entity setting operations will persist to the database\n- Logging will output to the console\n\nThis two-phase design allows the Preload Phase to optimistically attempt loading data that may not exist yet, while ensuring data consistency during the Processing Phase when all operations are executed normally.\n\nIf you're using an earlier version of `envio`, we strongly recommend upgrading to the latest version using `pnpm install envio@latest` to benefit from this improved Preload Phase behavior.\n\n## Double-Run Footgun [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#double-run-footgun \"Direct link to Double-Run Footgun\")\n\nAs mentioned above, the Preload Phase gives a lot of benefits for the event processing, but also it means that you must be aware of its table run nature:\n\n- Never call `fetch` or other external calls directly in the handler.\n\n  - Use the Effect API instead.\n  - Or use `context.isPreload` to guarantee that the code will run once.\n\nDue to the optimistic nature of the Preload Phase, the Effect API may occasionally execute with stale data, leading to redundant external calls. If you need to ensure that external calls are made with the most up-to-date data, you can use the `context.isPreload` check to restrict execution to only the processing phase.\n\n> Note: This will disable the Preload Optimization for the external calls.\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\nconst sender = await context.Account.get(event.params.from);\n\nif (context.isPreload) {\n    return;\n}\n\nconst metadata = await fetch(\n    `https://api.example.com/metadata/${sender.metadataId}`\n);\n});\n\n```\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-2 \"Direct link to Best Practices\")\n\n- Use `Promise.all` to load multiple entities concurrently for better performance\n- Place database reads and external calls at the beginning of your handler to maximize the benefits of Preload Optimization\n- Consider using `context.isPreload` to exit early from the Preload Phase after loading required data\n\n## Migrating from Loaders [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#migrating-from-loaders \"Direct link to Migrating from Loaders\")\n\nThe Preload Optimization for handlers was born from a concept we had before called Loaders. If you're using loaders, we recommend you to migrate to preload optimization by enabling it in the config and moving all your code to the handler.\n\n```codeBlockLines_e6Vv\n// Before:\nERC20.Transfer.handlerWithLoader({\nloader: async ({ event, context }) => {\n    // Load sender and receiver accounts efficiently\n    const sender = await context.Account.get(event.params.from);\n    const receiver = await context.Account.get(event.params.to);\n\n    // Return the loaded data to the handler\n    return {\n      sender,\n      receiver,\n    };\n},\n\nhandler: async ({ event, context, loaderReturn }) => {\n    const { sender, receiver } = loaderReturn;\n\n    // Process the transfer with the pre-loaded data\n    // No database lookups needed here!\n},\n});\n\n// After:\nERC20.Transfer.handler(async ({ event, context }) => {\n// Load sender and receiver accounts efficiently\nconst sender = await context.Account.get(event.params.from);\nconst receiver = await context.Account.get(event.params.to);\n\n// To imitate the behavior of the loader,\n// we can use `context.isPreload` to make next code run only once.\n// Note: This is not required, but might be useful for CPU-intensive operations.\nif (context.isPreload) {\n    return;\n}\n\n// Process the transfer with the pre-loaded data\n});\n\n```\n\n* * *\n\n## Effect Api [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#effect-api \"Direct link to Effect Api\")\n\n**File:** `Advanced/effect-api.md`\n\nThe Effect API provides a powerful and convenient way to perform external calls from your handlers. It's especially effective when used with Preload Optimization:\n\n- **Automatic batching**: Calls of the same kind are automatically batched together\n- **Intelligent memoization**: Calls are memoized, so you don't need to worry about the handler function being called multiple times\n- **Deduplication**: Calls with the same arguments are deduplicated to prevent overfetching\n- **Persistence**: Built-in support for result persistence for indexer reruns (opt-in via `cache: true`)\n- **Future enhancements**: We're working on automatic retry logic and enhanced caching workflows 🏗️\n\nTo use the Effect API, you first need to define an effect using `experimental_createEffect` function from the `envio` package:\n\n```codeBlockLines_e6Vv\n\nexport const getMetadata = experimental_createEffect(\n{\n    name: \"getMetadata\",\n    input: S.string,\n    output: {\n      description: S.string,\n      value: S.bigint,\n    },\n    cache: true,\n},\nasync ({ input, context }) => {\n    const response = await fetch(`https://api.example.com/metadata/${input}`);\n    const data = await response.json();\n    context.log.info(`Fetched metadata for ${input}`);\n    return {\n      description: data.description,\n      value: data.value,\n    };\n}\n);\n\n```\n\nThe first argument is an options object that describes the effect:\n\n- `name` (required) - the name of the effect used for debugging and logging\n- `input` (required) - the input type of the effect\n- `output` (required) - the output type of the effect\n- `cache` (optional) - save effect results in the database to prevent duplicate calls (Starting from `envio@2.26.0`)\n\nThe second argument is a function that will be called with the effect's input.\n\n> **Note:** For type definitions, you should use `S` from the `envio` package, which uses Sury library under the hood.\n\nAfter defining an effect, you can use `context.effect` to call it from your handler, loader, or another effect.\n\nThe `context.effect` function accepts an effect as the first argument and the effect's input as the second argument:\n\n```codeBlockLines_e6Vv\nERC20.Transfer.handler(async ({ event, context }) => {\nconst metadata = await context.effect(getMetadata, event.params.from);\n// Process the event with the metadata\n});\n\n```\n\n### Viem Transport Batching [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#viem-transport-batching \"Direct link to Viem Transport Batching\")\n\nYou can use `viem` or any other blockchain client inside your effect functions. When doing so, it's highly recommended to enable the `batch` option to group all effect calls into fewer RPC requests:\n\n```codeBlockLines_e6Vv\n// Create a public client to interact with the blockchain\nconst client = createPublicClient({\nchain: mainnet,\n// Enable batching to group calls into fewer RPC requests\ntransport: http(rpcUrl, { batch: true }),\n});\n\n// Get the contract instance for your contract\nconst lbtcContract = getContract({\nabi: erc20Abi,\naddress: \"0x8236a87084f8B84306f72007F36F2618A5634494\",\nclient: client,\n});\n\n// Effect to get the balance of a specific address at a specific block\nexport const getBalance = experimental_createEffect(\n{\n    name: \"getBalance\",\n    input: {\n      address: S.string,\n      blockNumber: S.optional(S.bigint),\n    },\n    output: S.bigint,\n    cache: true,\n},\nasync ({ input, context }) => {\n    try {\n      // If blockNumber is provided, use it to get balance at that specific block\n      const options = input.blockNumber\n        ? { blockNumber: input.blockNumber }\n        : undefined;\n      const balance = await lbtcContract.read.balanceOf(\n        [input.address as `0x${string}`],\n        options\n      );\n\n      return balance;\n    } catch (error) {\n      context.log.error(`Error getting balance for ${input.address}: ${error}`);\n      // Return 0 on error to prevent processing failures\n      return BigInt(0);\n    }\n}\n);\n\n```\n\n### Persistence [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#persistence \"Direct link to Persistence\")\n\nBy default, effect results are not persisted in the database. This means if the effect with the same input is called again, the function will be executed the second time.\n\nTo persist effect results, you can set the `cache` option to `true` when creating the effect. This will save the effect results in the database and reuse them in future indexer runs.\n\nEvery effect cache creates a new table in the database `envio_effect_${effectName}`. You can see it and query in Hasura console with admin secret.\n\nAlso, use our Development Console to track the cache size and see number of calls which didn't hit the cache.\n\n### Reuse Effect Cache on Indexer Reruns [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#reuse-effect-cache-on-indexer-reruns \"Direct link to Reuse Effect Cache on Indexer Reruns\")\n\nTo prevent invalid data we don't keep the effect cache on indexer reruns. But you can explicitly configure cache, which should be preloaded when the indexer is rerun.\n\nOpen Development Console of the running indexer which accumulated the cache. You'll be able to see the `Sync Cache` button right at the `Effects` section. Clicking the button will load the cache from the indexer database to the `.envio/cache` directory in your indexer project.\n\nWhen the indexer is rerun by using `envio dev` or `envio start -r` call, the initial cache will be loaded from the `.envio/cache` directory and used for the indexer run.\n\n> **Note:** This feature is available starting from `envio@2.26.0`. It also doesn't support rollbacks on reorgs. The support for reorgs will be added in the future.\n\n### Cache on Hosted Service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#cache-on-hosted-service \"Direct link to Cache on Hosted Service\")\n\nThe same `.envio/cache` can be also used to populate the initial cache on the hosted service.\n\nAlthough this solution is very limited, and we're actively working on a better integration:\n\n- It requires to commit `.envio/cache` to the GitHub repository, increasing the repository and git history size\n- The file size is limited to 100MB, which is not enough for some use cases\n- There might be issues with pulling big caches from the GitHub repository\n\nJoin our Discord to get updates on the progress of the hosted service integration.\n\n### Why Experimental? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-experimental \"Direct link to Why Experimental?\")\n\nThe Effect API is currently marked as experimental, but we don't expect major breaking changes in the future. This designation simply means we're actively iterating on the feature and may add new capabilities that could subtly change indexer behavior. We plan to remove the `experimental` tag soon, and your feedback is invaluable in this process!\n\n* * *\n\n## Accessing Contract State in Event Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#accessing-contract-state-in-event-handlers \"Direct link to Accessing Contract State in Event Handlers\")\n\n**File:** `Guides/contract-state.md`\n\n> **Example Repository:** The complete code for this guide can be found here\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-9 \"Direct link to Introduction\")\n\nThis guide demonstrates how to access on-chain contract state from your event handlers. You'll learn how to:\n\n1. Make RPC calls to external contracts within your event handlers\n2. Batch multiple calls using multicall for efficiency\n3. Learn about Preload Optimisation and how it makes your indexer thousands of times faster\n4. Use Effect API with built-in caching and Viem transport level batching\n5. Handle common edge cases that arise when accessing token contract data\n\n## The Challenge: Token Data from Pool Creation Events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#the-challenge-token-data-from-pool-creation-events \"Direct link to The Challenge: Token Data from Pool Creation Events\")\n\n### Scenario [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#scenario-1 \"Direct link to Scenario\")\n\nWe want to track token information (name, symbol, decimals) for every token involved in a Uniswap V3 pool creation event.\n\n### Problem [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#problem \"Direct link to Problem\")\n\nThe Uniswap V3 factory `PoolCreated` event only provides token addresses, not their metadata:\n\n```codeBlockLines_e6Vv\nPoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool)\n\n```\n\nTo get the token name, symbol, and decimals, we need to:\n\n1. Extract the token addresses from the event\n2. Make RPC calls to each token's contract\n3. Store this data alongside our pool information\n\n## Prerequisites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#prerequisites-7 \"Direct link to Prerequisites\")\n\nThis guide assumes:\n\n- Basic familiarity with Envio indexing\n- Understanding of the viem library for making contract calls\n- Access to an Ethereum RPC endpoint (dRPC recommended)\n\nFor a gentle introduction to viem with a similar example, check out this medium article.\n\n## Implementation Steps [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#implementation-steps \"Direct link to Implementation Steps\")\n\n### Step 1: Setup the Indexer Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-setup-the-indexer-configuration \"Direct link to Step 1: Setup the Indexer Configuration\")\n\nFirst, create a new indexer:\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\nWhen prompted, enter the Ethereum mainnet Uniswap V3 Factory address: `0x1F98431c8aD98523631AE4a59f267346ea31F984`\n\nThen modify your configuration to focus only on the PoolCreated event:\n\n```codeBlockLines_e6Vv\n# config.yaml\nname: uniswap-v3-factory-token-indexer\npreload_handlers: true\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: UniswapV3Factory\n        address:\n          - 0x1F98431c8aD98523631AE4a59f267346ea31F984\n        handler: src/EventHandlers.ts\n        events:\n          - event: PoolCreated(address indexed token0, address indexed token1, uint24 indexed fee, int24 tickSpacing, address pool)\n\n```\n\n### Step 2: Define the Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-define-the-schema \"Direct link to Step 2: Define the Schema\")\n\nCreate a schema that captures both pool and token information:\n\n```codeBlockLines_e6Vv\n# schema.graphql\ntype Token {\nid: ID! # token address\nname: String!\nsymbol: String!\ndecimals: Int!\n}\n\ntype Pool {\nid: ID! # unique identifier\ntoken0: Token!\ntoken1: Token!\nfee: BigInt!\ntickSpacing: BigInt!\npool: String! # pool address\n}\n\n```\n\n### Step 3: Implement the Event Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-3-implement-the-event-handler \"Direct link to Step 3: Implement the Event Handler\")\n\nThe event handler needs to:\n\n1. Create a Pool entity from the event data\n2. Make RPC calls to fetch token information for both token0 and token1\n3. Create Token entities with the retrieved data\n\n**Important!** Preload optimization makes your handlers run **twice**. So instead of direct RPC calls, we're doing it through `context.effect` \\- the Effect API.\n\nLearn how Preload Optimization works in a dedicated guide. It might be a new mental model for you, but this is what can make indexing thousands of times faster.\n\n```codeBlockLines_e6Vv\n// src/EventHandlers.ts\n\nUniswapV3Factory.PoolCreated.handler(async ({ event, context }) => {\n// Create Pool entity\ncontext.Pool.set({\n    id: `${event.chainId}_${event.block.number}_${event.logIndex}`,\n    token0_id: event.params.token0,\n    token1_id: event.params.token1,\n    fee: event.params.fee,\n    tickSpacing: event.params.tickSpacing,\n    pool: event.params.pool,\n});\n\n// Fetch and store token0 information\ntry {\n    const tokenMetadata0 = await context.effect(getTokenMetadata, {\n      tokenAddress: event.params.token0,\n      chainId: event.chainId,\n    });\n    context.Token.set({\n      id: event.params.token0,\n      name: tokenMetadata0.name,\n      symbol: tokenMetadata0.symbol,\n      decimals: tokenMetadata0.decimals,\n    });\n} catch (error) {\n    context.log.error(\"Failed to fetch token0 metadata\", {\n      tokenAddress: event.params.token0,\n      chainId: event.chainId,\n      pool: event.params.pool,\n      err: error,\n    });\n    return;\n}\n\n// Fetch and store token1 information\ntry {\n    const tokenMetadata1 = await context.effect(getTokenMetadata, {\n      tokenAddress: event.params.token1,\n      chainId: event.chainId,\n    });\n    context.Token.set({\n      id: event.params.token1,\n      name: tokenMetadata1.name,\n      symbol: tokenMetadata1.symbol,\n      decimals: tokenMetadata1.decimals,\n    });\n} catch (error) {\n    context.log.error(\"Failed to fetch token1 metadata\", {\n      tokenAddress: event.params.token1,\n      chainId: event.chainId,\n      pool: event.params.pool,\n      err: error,\n    });\n    return;\n}\n});\n\n```\n\n### Step 4: Create the Token Metadata Effect [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-4-create-the-token-metadata-effect \"Direct link to Step 4: Create the Token Metadata Effect\")\n\nThis is where the magic happens. We need to:\n\n1. Make RPC calls to token contracts\n2. Use multicall to batch multiple calls for efficiency\n3. Handle edge cases like non-standard ERC20 implementations\n4. Cache results to avoid redundant calls\n\n```codeBlockLines_e6Vv\n// src/tokenDetails.ts\n\nconst RPC_URL = process.env.RPC_URL;\n\nconst client = createPublicClient({\nchain: mainnet,\nbatch: { multicall: true }, // Enable multicall batching for efficiency\ntransport: http(RPC_URL, { batch: true }), // Thanks to automatic Effect API batching, we can also enable batching for Viem transport level\n});\n\n// Use Sury library to define the schema\nconst tokenMetadataSchema = S.schema({\nname: S.string,\nsymbol: S.string,\ndecimals: S.number,\n});\n\n// Infer the type from the schema\ntype TokenMetadata = S.Infer;\n\nexport const getTokenMetadata = experimental_createEffect(\n{\n    name: \"getTokenMetadata\",\n    input: {\n      tokenAddress: S.string,\n      chainId: S.number,\n    },\n    output: tokenMetadataSchema,\n    // Enable caching to avoid duplicated calls\n    cache: true,\n},\nasync ({ input, context }) => {\n    const { tokenAddress, chainId } = input;\n\n    // Prepare contract instances for different token standard variations\n    const erc20 = getERC20Contract(tokenAddress as `0x${string}`);\n    const erc20Bytes = getERC20BytesContract(tokenAddress as `0x${string}`);\n    let results: [number, string, string];\n    try {\n      // Try standard ERC20 interface first (most common)\n      results = await client.multicall({\n        allowFailure: false,\n        contracts: [\\\n          {\\\n            ...erc20,\\\n            functionName: \"decimals\",\\\n          },\\\n          {\\\n            ...erc20,\\\n            functionName: \"name\",\\\n          },\\\n          {\\\n            ...erc20,\\\n            functionName: \"symbol\",\\\n          },\\\n        ],\n      });\n    } catch (error) {\n      try {\n        // Some tokens use bytes32 for name/symbol instead of string\n        const alternateResults = await client.multicall({\n          allowFailure: false,\n          contracts: [\\\n            {\\\n              ...erc20Bytes,\\\n              functionName: \"decimals\",\\\n            },\\\n            {\\\n              ...erc20Bytes,\\\n              functionName: \"name\",\\\n            },\\\n            {\\\n              ...erc20Bytes,\\\n              functionName: \"symbol\",\\\n            },\\\n          ],\n        });\n        results = [\\\n          alternateResults[0],\\\n          hexToString(alternateResults[1]).replace(/\\u0000/g, \"\"), // Remove null byte padding\\\n          hexToString(alternateResults[2]).replace(/\\u0000/g, \"\"), // Remove null byte padding\\\n        ];\n      } catch (alternateError) {\n        results = [0, \"unknown\", \"unknown\"]; // Fallback for completely non-standard tokens\n      }\n    }\n\n    const [decimals, name, symbol] = results;\n\n    return {\n      name,\n      symbol,\n      decimals,\n    };\n}\n);\n\n```\n\n> **Important:** The `hexToString` method from Viem adds byte padding to the string. We remove this padding with `replace(/\\u0000/g, '')` to avoid errors when writing to the database.\n\n> **Note:** Read more about Effect API and caching in the Effect API guide.\n\n## Key Considerations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#key-considerations \"Direct link to Key Considerations\")\n\n### Understanding Current vs. Historical State [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-current-vs-historical-state \"Direct link to Understanding Current vs. Historical State\")\n\nStandard RPC requests return the **current state** of a contract, not the state at a specific historical block. For token metadata (name, symbol, decimals), this isn't typically an issue since these values rarely change.\n\nHowever, if you need historical state (like an account balance at a specific block), you would need a specialized RPC method like eth\\_getBalanceAt.\n\n### Handling Rate Limiting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#handling-rate-limiting \"Direct link to Handling Rate Limiting\")\n\nRPC providers often limit the number of requests per time period. To avoid hitting rate limits:\n\n1. **Use multicall** (as shown in our example) to batch multiple contract calls into a single RPC request\n2. **Learn about Preload Optimization** to make your indexer thousands of times faster\n3. **Enable caching** to avoid redundant requests\n4. **Use a paid, unthrottled RPC provider** for production indexers\n5. **Implement request throttling** to space out requests when needed\n6. **Use multiple RPC providers** and rotate between them for high-volume indexing\n\n## Conclusion [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#conclusion-2 \"Direct link to Conclusion\")\n\nAccessing contract state from your event handlers opens up powerful possibilities for enriching your indexed data. By following the patterns in this guide, you can efficiently retrieve and store contract state while maintaining good performance.\n\nFor more advanced techniques, explore:\n\n- Implementing retry logic for failed RPC calls\n- Handling complex contract interactions beyond basic ERC20 tokens\n\n* * *\n\n## Indexing IPFS Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-ipfs-data-with-envio \"Direct link to Indexing IPFS Data with Envio\")\n\n**File:** `Guides/ipfs.md`\n\n> **Example Repository:** The complete code for this guide can be found here\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-10 \"Direct link to Introduction\")\n\nThis guide demonstrates how to fetch and index data stored on IPFS within your Envio indexer. We'll use the Bored Ape Yacht Club NFT collection as a practical example, showing you how to retrieve and store token metadata from IPFS.\n\nIPFS (InterPlanetary File System) is commonly used in blockchain applications to store larger data like images and metadata that would be prohibitively expensive to store on-chain. By integrating IPFS fetching capabilities into your indexers, you can provide a more complete data model that combines on-chain events with off-chain metadata.\n\n## Implementation Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#implementation-overview \"Direct link to Implementation Overview\")\n\nOur implementation will follow these steps:\n\n1. Create a basic indexer for Bored Ape Yacht Club NFT transfers\n2. Extend the indexer to fetch and store metadata from IPFS\n3. Handle IPFS connection issues with fallback gateways\n\n## Step 1: Setting Up the Basic NFT Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-1-setting-up-the-basic-nft-indexer \"Direct link to Step 1: Setting Up the Basic NFT Indexer\")\n\nFirst, let's create a basic indexer that tracks NFT ownership:\n\n### Initialize the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialize-the-indexer \"Direct link to Initialize the Indexer\")\n\n```codeBlockLines_e6Vv\npnpx envio init\n\n```\n\nWhen prompted, enter the Bored Ape Yacht Club contract address: `0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D`\n\n### Configure the Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configure-the-indexer \"Direct link to Configure the Indexer\")\n\nModify the configuration to focus on the Transfer events:\n\n```codeBlockLines_e6Vv\n# config.yaml\nname: bored-ape-yacht-club-nft-indexer\npreload_handlers: true\nnetworks:\n  - id: 1\n    start_block: 0\n    end_block: 12299114 # Optional: limit blocks for development\n    contracts:\n      - name: BoredApeYachtClub\n        address:\n          - 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\n        handler: src/EventHandlers.ts\n        events:\n          - event: Transfer(address indexed from, address indexed to, uint256 indexed tokenId)\n\n```\n\n### Define the Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#define-the-schema \"Direct link to Define the Schema\")\n\nCreate a schema to store NFT ownership data:\n\n```codeBlockLines_e6Vv\n# schema.graphql\ntype Nft {\nid: ID! # tokenId\nowner: String!\n}\n\n```\n\n### Implement the Event Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#implement-the-event-handler \"Direct link to Implement the Event Handler\")\n\nTrack ownership changes by handling Transfer events:\n\n```codeBlockLines_e6Vv\n// src/EventHandler.ts\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nBoredApeYachtClub.Transfer.handler(async ({ event, context }) => {\nif (event.params.from === ZERO_ADDRESS) {\n    // mint\n    context.Nft.set({\n      id: event.params.tokenId.toString(),\n      owner: event.params.to,\n    });\n} else {\n    // transfer\n    const nft = await context.Nft.getOrThrow(event.params.tokenId.toString());\n    context.Nft.set({\n      ...nft,\n      owner: event.params.to,\n    });\n}\n});\n\n```\n\nRun your indexer with `pnpm dev` and visit [http://localhost:8080](http://localhost:8080/) to see the ownership data:\n\n!Basic NFT ownership data\n\n## Step 2: Fetching IPFS Metadata [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#step-2-fetching-ipfs-metadata \"Direct link to Step 2: Fetching IPFS Metadata\")\n\nNow, let's enhance our indexer to fetch metadata from IPFS:\n\n### Update the Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#update-the-schema \"Direct link to Update the Schema\")\n\nExtend the schema to include metadata fields:\n\n```codeBlockLines_e6Vv\n# schema.graphql\ntype Nft {\nid: ID! # tokenId\nowner: String!\nimage: String!\nattributes: String! # JSON string of attributes\n}\n\n```\n\n### Create IPFS Effect [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#create-ipfs-effect \"Direct link to Create IPFS Effect\")\n\n**Important!** Preload optimization makes your handlers run **twice**. So instead of direct RPC calls, we're doing it through the Effect API.\n\nLearn how Preload Optimization works in a dedicated guide. It might be a new mental model for you, but this is what can make indexing thousands of times faster.\n\nLet's create the `getIpfsMetadata` effect in the `src/utils/ipfs.ts` file:\n\n```codeBlockLines_e6Vv\n\n// Define the schema for the IPFS metadata\n// It uses Sury library to define the schema\nconst nftMetadataSchema = S.schema({\nimage: S.string,\nattributes: S.string,\n});\n\n// Infer the type from the schema\ntype NftMetadata = S.Infer;\n\n// Unique identifier for the BoredApeYachtClub IPFS tokenURI\nconst BASE_URI_UID = \"QmeSjSinHpPnmXmspMjwiXyN6zS4E9zccariGR3jxcaWtq\";\n\nconst endpoints = [\\\n// Try multiple endpoints to ensure data availability\\\n// Optional paid gateway (set in .env)\\\n...(process.env.PINATA_IPFS_GATEWAY ? [process.env.PINATA_IPFS_GATEWAY] : []),\\\n\"https://cloudflare-ipfs.com/ipfs\",\\\n\"https://ipfs.io/ipfs\",\\\n];\n\nasync function fetchFromEndpoint(\ncontext: EffectContext,\nendpoint: string,\ntokenId: string\n): Promise {\ntry {\n    const response = await fetch(`${endpoint}/${BASE_URI_UID}/${tokenId}`);\n    if (response.ok) {\n      const metadata: any = await response.json();\n      return {\n        image: metadata.image,\n        attributes: JSON.stringify(metadata.attributes),\n      };\n    } else {\n      context.log.warn(`IPFS didn't return 200`, { tokenId, endpoint });\n      return null;\n    }\n} catch (e) {\n    context.log.warn(`IPFS fetch failed`, { tokenId, endpoint, err: e });\n    return null;\n}\n}\n\nexport const getIpfsMetadata = experimental_createEffect(\n{\n    name: \"getIpfsMetadata\",\n    input: S.string,\n    output: nftMetadataSchema,\n},\nasync ({ input: tokenId, context }) => {\n    for (const endpoint of endpoints) {\n      const metadata = await fetchFromEndpoint(context, endpoint, tokenId);\n      if (metadata) {\n        return metadata;\n      }\n    }\n\n    // ⚠️ Dangerous: Sometimes it's better to crash, to prevent corrupted data\n    // But we're going to use a fallback value, to keep the indexer process running.\n    // Both approaches have their pros and cons.\n    context.log.warn(\n      \"Unable to fetch IPFS. Continuing with fallback metadata.\",\n      {\n        tokenId,\n      }\n    );\n    return { attributes: `[\"unknown\"]`, image: \"unknown\" };\n}\n);\n\n```\n\n### Update the Event Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#update-the-event-handler \"Direct link to Update the Event Handler\")\n\nLet's modify the event handler to fetch and store metadata using the `getIpfsMetadata` effect:\n\n```codeBlockLines_e6Vv\n// src/EventHandlers.ts\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nBoredApeYachtClub.Transfer.handler(async ({ event, context }) => {\nif (event.params.from === ZERO_ADDRESS) {\n    // mint\n    const metadata = await context.effect(\n      getIpfsMetadata,\n      event.params.tokenId.toString()\n    );\n    context.Nft.set({\n      id: event.params.tokenId.toString(),\n      owner: event.params.to,\n      image: metadata.image,\n      attributes: metadata.attributes,\n    });\n} else {\n    // transfer\n    const nft = await context.Nft.getOrThrow(event.params.tokenId.toString());\n    context.Nft.set({\n      ...nft,\n      owner: event.params.to,\n    });\n}\n});\n\n```\n\nWhen you run the indexer now, it will populate both ownership data and token metadata:\n\n!NFT ownership and metadata\n\n## Best Practices for IPFS Integration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-for-ipfs-integration \"Direct link to Best Practices for IPFS Integration\")\n\nWhen working with IPFS in your indexers, consider these best practices:\n\n### 1\\. Use Multiple Gateways [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-use-multiple-gateways \"Direct link to 1. Use Multiple Gateways\")\n\nIPFS gateways can be unreliable, so always implement multiple fallback options:\n\n```codeBlockLines_e6Vv\nconst endpoints = [\\\n...(process.env.PAID_IPFS_GATEWAY ? [process.env.PAID_IPFS_GATEWAY] : []),\\\n\"https://cloudflare-ipfs.com/ipfs\",\\\n\"https://ipfs.io/ipfs\",\\\n\"https://gateway.pinata.cloud/ipfs\",\\\n];\n\n```\n\n### 2\\. Handle Failures Gracefully [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-handle-failures-gracefully \"Direct link to 2. Handle Failures Gracefully\")\n\nAlways include error handling and provide fallback values:\n\n```codeBlockLines_e6Vv\ntry {\n// IPFS fetch logic\n} catch (error) {\ncontext.log.error(`Failed to fetch from IPFS`, error as Error);\nreturn { attributes: [], image: \"default-image-url\" };\n}\n\n```\n\n### 3\\. Implement Local Caching (For Local Development) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-implement-local-caching-for-local-development \"Direct link to 3. Implement Local Caching (For Local Development)\")\n\nFollow the Effect API Persistence guide to implement caching for local development. This should allow you to avoid repeatedly fetching the same data.\n\n```codeBlockLines_e6Vv\nexport const getIpfsMetadata = experimental_createEffect(\n{\n    name: \"getIpfsMetadata\",\n    input: S.string,\n    output: nftMetadataSchema,\n    cache: true, // Enable caching\n},\nasync ({ input: tokenId, context }) => {...}\n);\n\n```\n\n> **Important:** While the example repository includes SQLite-based caching, this approach is outdated and leads to many indexing issues.\n\n> **Note:** We're working on a better integration with the hosted service. Currently, due to the cache size, it's not recommended to commit the `.envio/cache` directory to the GitHub repository.\n\n### 4\\. Learn about Preload Optimization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#4-learn-about-preload-optimization \"Direct link to 4. Learn about Preload Optimization\")\n\nLearn how Preload Optimization works and the Double-Run Footgun in a dedicated guide. It might be a new mental model for you, but this is what can make indexing thousands of times faster.\n\n## Understanding IPFS [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-ipfs \"Direct link to Understanding IPFS\")\n\n### What is IPFS? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-is-ipfs \"Direct link to What is IPFS?\")\n\nIPFS (InterPlanetary File System) is a distributed system for storing and accessing files, websites, applications, and data. It works by:\n\n1. Splitting files into chunks\n2. Creating content-addressed identifiers (CIDs) based on the content itself\n3. Distributing these chunks across a network of nodes\n4. Retrieving data based on its CID rather than its location\n\n### Common Use Cases with Smart Contracts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#common-use-cases-with-smart-contracts \"Direct link to Common Use Cases with Smart Contracts\")\n\nIPFS is frequently used alongside smart contracts for:\n\n- **NFTs**: Storing images, videos, and metadata while the contract manages ownership\n- **Decentralized Identity Systems**: Storing credential documents and personal information\n- **DAOs**: Maintaining governance documents, proposals, and organizational assets\n- **dApps**: Hosting front-end interfaces and application assets\n\n### IPFS Challenges [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ipfs-challenges \"Direct link to IPFS Challenges\")\n\nIPFS integration comes with several challenges:\n\n1. **Slow Retrieval Times**: IPFS data can be slow to retrieve, especially for less widely replicated content\n2. **Gateway Reliability**: Public gateways can be inconsistent in their availability\n3. **Data Persistence**: Content may become unavailable if nodes stop hosting it\n\nTo mitigate these issues:\n\n- Use pinning services like Pinata or Infura to ensure data persistence\n- Implement multiple gateway fallbacks\n- Consider paid gateways for production applications\n\n* * *\n\n## Using HyperSync as Your Indexing Data Source [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-hypersync-as-your-indexing-data-source \"Direct link to Using HyperSync as Your Indexing Data Source\")\n\n**File:** `Advanced/hypersync.md`\n\n> **\"Beam me up, Scotty!\"** 🖖 — Just like the Star Trek transporter, HyperSync delivers your blockchain data at warp speed.\n\n## What is HyperSync? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-is-hypersync \"Direct link to What is HyperSync?\")\n\nHyperSync is a purpose built data-node that helps powers the exceptional performance of HyperIndex. It's a specialized data source optimized for indexing that provides:\n\n- **100x faster sync speeds** compared to traditional RPC methods\n- **Cost-effective data retrieval** with optimized resource usage\n- **Flexibility** with the ability to fetch multiple data points in a single round trip with more complex filtering\n\n## How HyperSync Powers Your Indexers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-hypersync-powers-your-indexers \"Direct link to How HyperSync Powers Your Indexers\")\n\n### The Performance Advantage [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#the-performance-advantage \"Direct link to The Performance Advantage\")\n\nTraditional blockchain indexing relies on RPC (Remote Procedure Call) endpoints to query blockchain data. While functional, RPCs become highly inefficient when:\n\n- Indexing millions of events\n- Processing historical blockchain data\n- Extracting data across multiple networks\n- Working with thousands of contracts\n\nHyperSync addresses these limitations by providing a streamlined data access layer that dramatically reduces sync times from days to minutes.\n\n### Default Enablement [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#default-enablement \"Direct link to Default Enablement\")\n\n**HyperSync is used by default** as the data source for all HyperIndex networks. This means:\n\n- No additional configuration is required to benefit from its speed\n- No need to worry about RPC rate limiting\n- No management of multiple RPC providers\n- No costs for external RPC services\n\n## Using HyperSync in Your Projects [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-hypersync-in-your-projects \"Direct link to Using HyperSync in Your Projects\")\n\n### Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration \"Direct link to Configuration\")\n\nTo use HyperSync (the default), simply don't set an RPC for historical sync in your config. HyperIndex will automatically use HyperSync for supported networks:\n\n```codeBlockLines_e6Vv\nname: Greeter\ndescription: Greeter indexer\nnetworks:\n  - id: 137 # Polygon\n    start_block: 0 # With HyperSync, you can use 0 regardless of contract deployment time\n    contracts:\n      - name: PolygonGreeter\n        abi_file_path: abis/greeter-abi.json\n        address: 0x9D02A17dE4E68545d3a58D3a20BbBE0399E05c9c\n        handler: ./src/EventHandlers.bs.js\n        events:\n          - event: NewGreeting\n          - event: ClearGreeting\n\n```\n\n### Smart Block Detection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#smart-block-detection \"Direct link to Smart Block Detection\")\n\nWhen using HyperSync, you can specify `start_block: 0` in your configuration. HyperSync will automatically:\n\n1. Detect the first block where your contract was deployed\n2. Begin indexing from that block\n3. Skip unnecessary processing of earlier blocks\n\nThis feature eliminates the need to manually determine the deployment block of your contract, saving setup time and reducing configuration errors.\n\n## Availability and Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#availability-and-support \"Direct link to Availability and Support\")\n\nHyperSync is maintained and hosted by Envio for all supported networks. We handle the infrastructure, allowing you to focus on building your indexer logic.\n\n### Improving resilience with RPC fallback [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#improving-resilience-with-rpc-fallback \"Direct link to Improving resilience with RPC fallback\")\n\nHyperIndex allows you to configure additional RPC providers as fallback data sources. This redundancy is **recommended** for production deployments to ensure continuous operation of your indexer. If HyperSync experiences any interruption, your indexer will automatically switch to the fallback RPC provider.\n\nAdding an RPC fallback provides these benefits:\n\n- **High availability**: Your indexer continues to function even during temporary HyperSync outages\n- **Automatic failover**: The system detects issues and switches to fallback RPC without manual intervention\n- **Operational control**: You can specify which RPC providers to use as fallbacks based on your requirements\n\nConfigure a fallback RPC by adding the `rpc` field to your network configuration:\n\n```codeBlockLines_e6Vv\nname: Greeter\ndescription: Greeter indexer\nnetworks:\n  - id: 137 # Polygon\n+   # Short and simple\n+   rpc: https://eth-mainnet.your-rpc-provider.com?API_KEY={ENVIO_MAINNET_API_KEY}\n+   # Or provide multiple RPC endpoints with more flexibility\n+   rpc:\n+     - url: https://eth-mainnet.your-rpc-provider.com?API_KEY={ENVIO_MAINNET_API_KEY}\n+       for: fallback\n+     - url: https://eth-mainnet.your-free-rpc-provider.com\n+       for: fallback\n+       initial_block_interval: 1000\n    start_block: 0 # With HyperSync, you can use 0 regardless of contract deployment time\n    contracts:\n      - name: PolygonGreeter\n        abi_file_path: abis/greeter-abi.json\n        address: 0x9D02A17dE4E68545d3a58D3a20BbBE0399E05c9c\n        handler: ./src/EventHandlers.bs.js\n        events:\n          - event: NewGreeting\n          - event: ClearGreeting\n\n```\n\ninfo\n\nThis feature is available starting from version `2.14.0`. The fallback RPC is activated only when a primary data source doesn't receive a new block for more than 20 seconds.\n\n### Supported Networks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#supported-networks \"Direct link to Supported Networks\")\n\nHyperSync supports numerous EVM networks including Ethereum, Unichain, Arbitrum, Optimism, and more. For a complete and up-to-date list of supported networks, see the HyperSync Supported Networks documentation.\n\n### Alternatives [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#alternatives \"Direct link to Alternatives\")\n\nHyperSync data source is vendorlock-free. While HyperSync is recommended for optimal performance, you can always switch to RPCs without the need to change your indexer code. For information on configuring RPC-based indexing, visit the RPC Data Source documentation.\n\n## Performance Comparison [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#performance-comparison \"Direct link to Performance Comparison\")\n\n| Metric | Traditional RPC | HyperSync |\n| --- | --- | --- |\n| Indexing 1M Events | Hours to days | Minutes |\n| Resource Usage | High | Optimized |\n| Network Calls | Many individual calls | Batched for efficiency |\n| Rate Limiting | Common issue | Not applicable |\n| Cost | Pay per API call | Included with Hosted Service |\n\n## Summary [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#summary \"Direct link to Summary\")\n\nHyperSync provides a significant competitive advantage for Envio indexers by dramatically reducing sync times, lowering costs, and simplifying configuration. By using HyperSync as your default data source, you'll experience:\n\n- Faster indexing performance\n- Support for previously impossible indexing cases\n- Enhanced reliability\n- Reduced operational complexity\n\nTo learn more about HyperSync's underlying technology, visit the HyperSync documentation.\n\n* * *\n\n## Using RPC as Your Indexing Data Source [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-rpc-as-your-indexing-data-source \"Direct link to Using RPC as Your Indexing Data Source\")\n\n**File:** `Advanced/rpc-sync.md`\n\nHyperIndex supports indexing any EVM blockchain using RPC (Remote Procedure Call) as the data source. This page explains when and how to use RPC for your indexing needs.\n\n## When to Use RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-use-rpc \"Direct link to When to Use RPC\")\n\nWhile HyperSync is the recommended and default data source for optimal performance, there are scenarios where you might need to use RPC instead:\n\n1. **Unsupported Networks**: When indexing a blockchain network that isn't yet supported by HyperSync\n2. **Custom Requirements**: When you need specific RPC functionality not available in HyperSync\n3. **Private Chains**: When working with private or development EVM chains\n\n> **Note**: For networks that HyperSync supports, we strongly recommend using HyperSync rather than RPC. HyperSync provides significantly faster indexing performance (up to 100x) and doesn't require managing RPC endpoints or worrying about rate limits.\n\n## Configuring RPC in Your Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuring-rpc-in-your-indexer \"Direct link to Configuring RPC in Your Indexer\")\n\n### Basic Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#basic-configuration \"Direct link to Basic Configuration\")\n\nTo use RPC as your data source, you need to add an `rpc_config` section to your network configuration in the `config.yaml` file:\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1 # Ethereum Mainnet\n    rpc_config:\n      url: https://eth-mainnet.your-rpc-provider.com # Your RPC endpoint\n    start_block: 15000000\n    contracts:\n      - name: MyContract\n        address: \"0x1234...\"\n        # Additional contract configuration...\n\n```\n\nThe presence of the `rpc_config` section tells HyperIndex to use RPC instead of HyperSync for this network.\n\n### Advanced RPC Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#advanced-rpc-configuration \"Direct link to Advanced RPC Configuration\")\n\nFor more control over how your indexer interacts with the RPC endpoint, you can configure additional parameters:\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    rpc_config:\n      url: https://eth-mainnet.your-rpc-provider.com\n      initial_block_interval: 10000 # Initial number of blocks to fetch in each request\n      backoff_multiplicative: 0.8 # Factor to scale back block request size after errors\n      acceleration_additive: 2000 # How many more blocks to request when successful\n      interval_ceiling: 10000 # Maximum blocks to request in a single call\n      backoff_millis: 5000 # Milliseconds to wait after an error\n      query_timeout_millis: 20000 # Milliseconds before timing out a request\n    start_block: 15000000\n    # Additional network configuration...\n\n```\n\n### Configuration Parameters Explained [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-parameters-explained \"Direct link to Configuration Parameters Explained\")\n\n| Parameter | Description | Recommended Value |\n| --- | --- | --- |\n| `url` | Your RPC endpoint URL | Depends on provider |\n| `initial_block_interval` | Starting block batch size | 1,000 - 10,000 |\n| `backoff_multiplicative` | How much to reduce batch size after errors | 0.5 - 0.9 |\n| `acceleration_additive` | How much to increase batch size on success | 500 - 2,000 |\n| `interval_ceiling` | Maximum blocks per request | 5,000 - 10,000 |\n| `backoff_millis` | Wait time after errors (ms) | 1,000 - 10,000 |\n| `query_timeout_millis` | Request timeout (ms) | 10,000 - 30,000 |\n\nThe optimal values depend on your RPC provider's performance and limits, as well as the complexity of your contracts and the data being indexed.\n\n## RPC Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rpc-best-practices \"Direct link to RPC Best Practices\")\n\n### Selecting an RPC Provider [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#selecting-an-rpc-provider \"Direct link to Selecting an RPC Provider\")\n\nWhen choosing an RPC provider, consider:\n\n- **Rate limits**: Most providers have limits on requests per second/minute\n- **Node performance**: Some providers offer faster nodes for premium tiers\n- **Archive nodes**: Required if you need historical state (e.g., balances at past blocks)\n- **Geographic location**: Choose nodes closest to your indexer deployment\n\n### Performance Optimization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#performance-optimization \"Direct link to Performance Optimization\")\n\nTo get the best performance when using RPC:\n\n1. **Start from a recent block** if possible, rather than indexing from genesis\n2. **Tune batch parameters** based on your provider's capabilities\n3. **Use a paid service** for better reliability and higher rate limits\n4. **Consider multiple fallback RPCs** for redundancy\n\n## Enhanced RPC with eRPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#enhanced-rpc-with-erpc \"Direct link to Enhanced RPC with eRPC\")\n\nFor more robust RPC usage, you can implement eRPC - a fault-tolerant EVM RPC proxy with advanced features like caching and failover.\n\n### What eRPC Provides [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-erpc-provides \"Direct link to What eRPC Provides\")\n\n- **Permanent caching**: Stores historical responses to reduce redundant requests\n- **Auto failover**: Automatically switches between multiple RPC providers\n- **Re-org awareness**: Properly handles blockchain reorganizations\n- **Auto-batching**: Optimizes requests to minimize network overhead\n- **Load balancing**: Distributes requests across multiple providers\n\n### Setting Up eRPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#setting-up-erpc \"Direct link to Setting Up eRPC\")\n\n1. **Create your eRPC configuration file** ( `erpc.yaml`):\n\n```codeBlockLines_e6Vv\nlogLevel: debug\nprojects:\n  - id: main\n    upstreams:\n      # Add HyperRPC as primary source\n      - endpoint: evm+envio://rpc.hypersync.xyz\n      # Add fallback RPC endpoints\n      - endpoint: https://eth-mainnet-provider1.com\n      - endpoint: https://eth-mainnet-provider2.com\n      - endpoint: https://eth-mainnet-provider3.com\n\n```\n\n2. **Run eRPC using Docker**:\n\n```codeBlockLines_e6Vv\ndocker run -v $(pwd)/erpc.yaml:/root/erpc.yaml -p 4000:4000 -p 4001:4001 ghcr.io/erpc/erpc:latest\n\n```\n\nOr add it to your existing Docker Compose setup:\n\n```codeBlockLines_e6Vv\nservices:\n# Your existing services...\n\nerpc:\n    image: ghcr.io/erpc/erpc:latest\n    platform: linux/amd64\n    volumes:\n      - \"${PWD}/erpc.yaml:/root/erpc.yaml\"\n    ports:\n      - 4000:4000\n      - 4001:4001\n    restart: always\n\n```\n\n3. **Configure HyperIndex to use eRPC** in your `config.yaml`:\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    rpc_config:\n      url: http://erpc:4000/main/evm/1 # eRPC endpoint for Ethereum Mainnet\n    start_block: 15000000\n    # Additional network configuration...\n\n```\n\nFor more detailed configuration options, refer to the eRPC documentation.\n\n## Comparing HyperSync and RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#comparing-hypersync-and-rpc \"Direct link to Comparing HyperSync and RPC\")\n\n| Feature | HyperSync | RPC |\n| --- | --- | --- |\n| Speed | 10-100x faster | Baseline |\n| Configuration | Minimal | Requires tuning |\n| Rate Limits | None | Depends on provider |\n| Cost | Included with Hosted Service | Pay per request/subscription |\n| Network Support | Supported networks | Any EVM network |\n| Maintenance | Managed by Envio | Self-managed |\n\n## Summary [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#summary-1 \"Direct link to Summary\")\n\nWhile RPC provides the flexibility to index any EVM blockchain, it comes with performance limitations and configuration complexity. For supported networks, we recommend using HyperSync as your data source for optimal performance.\n\nIf you must use RPC:\n\n- Choose a reliable provider\n- Configure your indexer for optimal performance\n- Consider implementing eRPC for enhanced reliability and performance\n- Start from recent blocks when possible to reduce indexing time\n\nFor any questions about using RPC with HyperIndex, please contact the Envio team.\n\n* * *\n\n## Config Schema Reference [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#config-schema-reference \"Direct link to Config Schema Reference\")\n\n**File:** `Advanced/config-schema-reference.md`\n\nStatic, deep-linkable reference for the `config.yaml` Schema.\n\n> Tip: Use the Table of Contents to jump to a field or definition.\n\n## Top-level Properties [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#top-level-properties \"Direct link to Top-level Properties\")\n\n- description\n- name (required)\n- ecosystem\n- schema\n- output\n- contracts\n- networks (required)\n- unordered\\_multichain\\_mode\n- event\\_decoder\n- rollback\\_on\\_reorg\n- save\\_full\\_history\n- field\\_selection\n- raw\\_events\n- preload\\_handlers\n- address\\_format\n\n### description [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#description \"Direct link to description\")\n\nDescription of the project\n\n- **type**: `string | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\ndescription: Greeter indexer\n\n```\n\n### name [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#name \"Direct link to name\")\n\nName of the project\n\n- **type**: `string`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nname: MyIndexer\n\n```\n\n### ecosystem [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ecosystem \"Direct link to ecosystem\")\n\nEcosystem of the project.\n\n- **type**: `anyOf(object | null)`\n\nVariants:\n\n- `1`: EcosystemTag\n- `2`: `null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\necosystem: evm\n\n```\n\n### schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schema \"Direct link to schema\")\n\nCustom path to schema.graphql file\n\n- **type**: `string | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nschema: ./schema.graphql\n\n```\n\n### output [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#output \"Direct link to output\")\n\nPath where the generated directory will be placed. By default it's 'generated' relative to the current working directory. If set, it'll be a path relative to the config file location.\n\n- **type**: `string | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\noutput: ./generated\n\n```\n\n### contracts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contracts \"Direct link to contracts\")\n\nGlobal contract definitions that must contain all definitions except addresses. You can share a single handler/abi/event definitions for contracts across multiple chains.\n\n- **type**: `array | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\ncontracts:\n  - name: Greeter\n    handler: src/EventHandlers.ts\n    events:\n      - event: \"NewGreeting(address user, string greeting)\"\n\n```\n\n### networks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#networks \"Direct link to networks\")\n\nConfiguration of the blockchain networks that the project is deployed on.\n\n- **type**: `array>`\n- **items**: `object`\n- **items ref**: Network\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: Greeter\n        address: 0x9D02A17dE4E68545d3a58D3a20BbBE0399E05c9c\n\n```\n\n### unordered\\_multichain\\_mode [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#unorderedmultichainmode \"Direct link to unordered_multichain_mode\")\n\nA flag to indicate if the indexer should use a single queue for all chains or a queue per chain (default: false)\n\n- **type**: `boolean | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nunordered_multichain_mode: true\n\n```\n\n### event\\_decoder [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#eventdecoder \"Direct link to event_decoder\")\n\nThe event decoder to use for the indexer (default: hypersync-client)\n\n- **type**: `anyOf(object | null)`\n\nVariants:\n\n- `1`: EventDecoder\n- `2`: `null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nevent_decoder: hypersync-client\n\n```\n\n### rollback\\_on\\_reorg [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rollbackonreorg \"Direct link to rollback_on_reorg\")\n\nA flag to indicate if the indexer should rollback to the last known valid block on a reorg. This currently incurs a performance hit on historical sync and is recommended to turn this off while developing (default: true)\n\n- **type**: `boolean | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nrollback_on_reorg: true\n\n```\n\n### save\\_full\\_history [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#savefullhistory \"Direct link to save_full_history\")\n\nA flag to indicate if the indexer should save the full history of events. This is useful for debugging but will increase the size of the database (default: false)\n\n- **type**: `boolean | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nsave_full_history: false\n\n```\n\n### field\\_selection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#fieldselection \"Direct link to field_selection\")\n\nSelect the block and transaction fields to include in all events globally\n\n- **type**: `anyOf(object | null)`\n\nVariants:\n\n- `1`: FieldSelection\n- `2`: `null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nfield_selection:\ntransaction_fields:\n    - hash\nblock_fields:\n    - miner\n\n```\n\n### raw\\_events [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rawevents \"Direct link to raw_events\")\n\nIf true, the indexer will store the raw event data in the database. This is useful for debugging, but will increase the size of the database and the amount of time it takes to process events (default: false)\n\n- **type**: `boolean | null`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nraw_events: true\n\n```\n\n### preload\\_handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#preloadhandlers \"Direct link to preload_handlers\")\n\nMakes handlers run twice to enable preload optimisations. Removes handlerWithLoader API, since it's not needed. (recommended, default: false)\n\n- **type**: `boolean | null`\n\n### address\\_format [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#addressformat \"Direct link to address_format\")\n\nAddress format for Ethereum addresses: 'checksum' or 'lowercase' (default: checksum)\n\n- **type**: `anyOf(object | null)`\n\nVariants:\n\n- `1`: AddressFormat\n- `2`: `null`\n\n## Definitions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#definitions \"Direct link to Definitions\")\n\n### EcosystemTag [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-ecosystemtag \"Direct link to EcosystemTag\")\n\n- **type**: `enum (1 values)`\n- **allowed**: `evm`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\necosystem: evm\n\n```\n\n### GlobalContract\\_for\\_ContractConfig [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-globalcontractforcontractconfig \"Direct link to GlobalContract_for_ContractConfig\")\n\n- **type**: `object`\n- **required**: `name`, `handler`, `events`\n\nProperties:\n\n- `name`: `string` – A unique project-wide name for this contract (no spaces)\n- `abi_file_path`: `string | null` – Relative path (from config) to a json abi. If this is used then each configured event should simply be referenced by its name\n- `handler`: `string` – The relative path to a file where handlers are registered for the given contract\n- `events`: `array>` – A list of events that should be indexed on this contract\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\ncontracts:\n  - name: Greeter\n    handler: src/EventHandlers.ts\n    events:\n      - event: \"NewGreeting(address user, string greeting)\"\n\n```\n\n### EventConfig [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-eventconfig \"Direct link to EventConfig\")\n\n- **type**: `object`\n- **required**: `event`\n\nProperties:\n\n- `event`: `string` – The human readable signature of an event 'eg. Transfer(address indexed from, address indexed to, uint256 value)' OR a reference to the name of an event in a json ABI file defined in your contract config. A provided signature will take precedence over what is defined in the json ABI\n- `name`: `string | null` – Name of the event in the HyperIndex generated code. When ommitted, the event field will be used. Should be unique per contract\n- `field_selection`: `anyOf(object | null)` – Select the block and transaction fields to include in the specific event\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\ncontracts:\n  - name: Greeter\n    handler: src/EventHandlers.ts\n    events:\n      - event: \"Assigned(address indexed recipientId, uint256 amount, address token)\"\n        name: Assigned\n        field_selection:\n          transaction_fields:\n            - transactionIndex\n\n```\n\n### FieldSelection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-fieldselection \"Direct link to FieldSelection\")\n\n- **type**: `object`\n\nProperties:\n\n- `transaction_fields`: `array | null` – The transaction fields to include in the event, or in all events if applied globally\n\n  - Available values:\n    `transactionIndex`, `hash`, `from`, `to`, `gas`, `gasPrice`, `maxPriorityFeePerGas`, `maxFeePerGas`, `cumulativeGasUsed`, `effectiveGasPrice`, `gasUsed`, `input`, `nonce`, `value`, `v`, `r`, `s`, `contractAddress`, `logsBloom`, `root`, `status`, `yParity`, `chainId`, `accessList`, `maxFeePerBlobGas`, `blobVersionedHashes`, `kind`, `l1Fee`, `l1GasPrice`, `l1GasUsed`, `l1FeeScalar`, `gasUsedForL1`, `authorizationList`\n- `block_fields`: `array | null` – The block fields to include in the event, or in all events if applied globally\n\n  - Available values:\n    `parentHash`, `nonce`, `sha3Uncles`, `logsBloom`, `transactionsRoot`, `stateRoot`, `receiptsRoot`, `miner`, `difficulty`, `totalDifficulty`, `extraData`, `size`, `gasLimit`, `gasUsed`, `uncles`, `baseFeePerGas`, `blobGasUsed`, `excessBlobGas`, `parentBeaconBlockRoot`, `withdrawalsRoot`, `l1BlockNumber`, `sendCount`, `sendRoot`, `mixHash`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nevents:\n  - event: \"Assigned(address indexed user, uint256 amount)\"\n    # can be within an event as shown here, or globally for all events\n    field_selection:\n      transaction_fields:\n        - transactionIndex\n      block_fields:\n        - miner\n\n```\n\n### Network [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-network \"Direct link to Network\")\n\n- **type**: `object`\n- **required**: `id`, `start_block`, `contracts`\n\nProperties:\n\n- `id`: `integer` – The public blockchain network ID.\n- `rpc_config`: `anyOf(object | null)` – RPC configuration for utilizing as the network's data-source. Typically optional for chains with HyperSync support, which is highly recommended. HyperSync dramatically enhances performance, providing up to a 1000x speed boost over traditional RPC.\n- `rpc`: `anyOf(object | null)` – RPC configuration for your indexer. If not specified otherwise, for networks supported by HyperSync, RPC serves as a fallback for added reliability. For others, it acts as the primary data-source. HyperSync offers significant performance improvements, up to a 1000x faster than traditional RPC.\n- `hypersync_config`: `anyOf(object | null)` – Optional HyperSync Config for additional fine-tuning\n- `confirmed_block_threshold`: `integer | null` – The number of blocks from the head that the indexer should account for in case of reorgs.\n- `start_block`: `integer` – The block at which the indexer should start ingesting data\n- `end_block`: `integer | null` – The block at which the indexer should terminate.\n- `contracts`: `array>` – All the contracts that should be indexed on the given network\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    start_block: 0\n    end_block: 19000000\n    contracts:\n      - name: Greeter\n        address: 0x1111111111111111111111111111111111111111\n\n```\n\n### RpcConfig [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-rpcconfig \"Direct link to RpcConfig\")\n\n- **type**: `object`\n- **required**: `url`\n\nProperties:\n\n- `url`: `anyOf(string | array)` – URL of the RPC endpoint. Can be a single URL or an array of URLs. If multiple URLs are provided, the first one will be used as the primary RPC endpoint and the rest will be used as fallbacks.\n- `initial_block_interval`: `integer | null` – The starting interval in range of blocks per query\n- `backoff_multiplicative`: `number | null` – After an RPC error, how much to scale back the number of blocks requested at once\n- `acceleration_additive`: `integer | null` – Without RPC errors or timeouts, how much to increase the number of blocks requested by for the next batch\n- `interval_ceiling`: `integer | null` – Do not further increase the block interval past this limit\n- `backoff_millis`: `integer | null` – After an error, how long to wait before retrying\n- `fallback_stall_timeout`: `integer | null` – If a fallback RPC is provided, the amount of time in ms to wait before kicking off the next provider\n- `query_timeout_millis`: `integer | null` – How long to wait before cancelling an RPC request\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    rpc_config:\n      url: https://eth.llamarpc.com\n      initial_block_interval: 1000\n\n```\n\n### NetworkRpc [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-networkrpc \"Direct link to NetworkRpc\")\n\n- **type**: `anyOf(string | object | array>)`\n\nVariants:\n\n- `1`: `string`\n- `2`: Rpc\n- `3`: `array>`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    rpc: https://eth.llamarpc.com\n\n```\n\n### Rpc [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-rpc \"Direct link to Rpc\")\n\n- **type**: `object`\n- **required**: `url`, `for`\n\nProperties:\n\n- `url`: `string` – The RPC endpoint URL.\n- `for`: `object` – Determines if this RPC is for historical sync, real-time chain indexing, or as a fallback.\n- `initial_block_interval`: `integer | null` – The starting interval in range of blocks per query\n- `backoff_multiplicative`: `number | null` – After an RPC error, how much to scale back the number of blocks requested at once\n- `acceleration_additive`: `integer | null` – Without RPC errors or timeouts, how much to increase the number of blocks requested by for the next batch\n- `interval_ceiling`: `integer | null` – Do not further increase the block interval past this limit\n- `backoff_millis`: `integer | null` – After an error, how long to wait before retrying\n- `fallback_stall_timeout`: `integer | null` – If a fallback RPC is provided, the amount of time in ms to wait before kicking off the next provider\n- `query_timeout_millis`: `integer | null` – How long to wait before cancelling an RPC request\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    rpc:\n      - url: https://eth.llamarpc.com\n        for: sync\n\n```\n\n### For [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-for \"Direct link to For\")\n\n- **type**: `oneOf(const sync | const fallback)`\n\nVariants:\n\n- `1`: `const sync`\n- `2`: `const fallback`\n\n### HypersyncConfig [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-hypersyncconfig \"Direct link to HypersyncConfig\")\n\n- **type**: `object`\n- **required**: `url`\n\nProperties:\n\n- `url`: `string` – URL of the HyperSync endpoint (default: The most performant HyperSync endpoint for the network)\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    hypersync_config:\n      url: https://eth.hypersync.xyz\n\n```\n\n### NetworkContract\\_for\\_ContractConfig [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-networkcontractforcontractconfig \"Direct link to NetworkContract_for_ContractConfig\")\n\n- **type**: `object`\n- **required**: `name`\n\nProperties:\n\n- `name`: `string` – A unique project-wide name for this contract if events and handler are defined OR a reference to the name of contract defined globally at the top level\n- `address`: `object` – A single address or a list of addresses to be indexed. This can be left as null in the case where this contracts addresses will be registered dynamically.\n- `start_block`: `integer | null` – The block at which the indexer should start ingesting data for this specific contract. If not specified, uses the network start\\_block. Can be greater than the network start\\_block for more specific indexing.\n- `abi_file_path`: `string | null` – Relative path (from config) to a json abi. If this is used then each configured event should simply be referenced by its name\n- `handler`: `string` – The relative path to a file where handlers are registered for the given contract\n- `events`: `array>` – A list of events that should be indexed on this contract\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    start_block: 0\n    contracts:\n      - name: Greeter\n        address:\n          - 0x1111111111111111111111111111111111111111\n        handler: src/EventHandlers.ts\n        events:\n          - event: Transfer(address indexed from, address indexed to, uint256 value)\n\n```\n\n### Addresses [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-addresses \"Direct link to Addresses\")\n\n- **type**: `anyOf(anyOf(string | integer) | array)`\n\nVariants:\n\n- `1`: `anyOf(string | integer)`\n- `2`: `array`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1\n    contracts:\n      - name: Greeter\n        address:\n          - 0x1111111111111111111111111111111111111111\n          - 0x2222222222222222222222222222222222222222\n\n```\n\n### EventDecoder [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-eventdecoder \"Direct link to EventDecoder\")\n\n- **type**: `enum (2 values)`\n- **allowed**: `viem`, `hypersync-client`\n\nExample (config.yaml):\n\n```codeBlockLines_e6Vv\nevent_decoder: hypersync-client\n\n```\n\n### AddressFormat [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#def-addressformat \"Direct link to AddressFormat\")\n\n- **type**: `enum (2 values)`\n- **allowed**: `checksum`, `lowercase`\n\n* * *\n\n## Envio Command Line Interface [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-command-line-interface \"Direct link to Envio Command Line Interface\")\n\n**File:** `Guides/cli-commands.md`\n\nThis comprehensive reference guide covers all available commands and options in the Envio CLI tool. Use this documentation to explore the full capabilities of the `envio` command and its subcommands for managing your indexing projects.\n\n## Getting Started [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-5 \"Direct link to Getting Started\")\n\nThe Envio CLI provides a powerful set of tools for creating, developing, and managing your indexers. Whether you're starting a new project, running a development server, or deploying to production, the CLI offers commands to simplify and automate your workflow.\n\n## Command Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#command-overview \"Direct link to Command Overview\")\n\nThe commands are organized into the following categories:\n\n### Initialization Commands [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialization-commands \"Direct link to Initialization Commands\")\n\n- `envio init` \\- Create new indexer projects\n- `envio init contract-import` \\- Import from existing contracts\n- `envio init template` \\- Use pre-built templates\n\n### Development Commands [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#development-commands \"Direct link to Development Commands\")\n\n- `envio dev` \\- Run in development mode with hot reloading\n- `envio codegen` \\- Generate code from configuration files\n- `envio start` \\- Start the indexer without code generation\n\n### Environment Management [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-management \"Direct link to Environment Management\")\n\n- `envio stop` \\- Stop running processes\n- `envio local` \\- Manage local environment\n- `envio local docker` \\- Control Docker containers\n- `envio local db-migrate` \\- Manage database schema\n\n### Analysis Tools [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#analysis-tools \"Direct link to Analysis Tools\")\n\n- `envio benchmark-summary` \\- View performance data\n\n## Global Command [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#global-command \"Direct link to Global Command\")\n\n### `envio` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio \"Direct link to envio\")\n\nThe base command that provides access to all Envio functionality.\n\n**Usage:** `envio [OPTIONS] `\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options \"Direct link to options\")\n\n- `-d`, `--directory ` — The directory of the project. Defaults to current dir (\"./\")\n- `-o`, `--output-directory ` — The directory within the project that generated code should output to (Default: `generated`)\n- `--config ` — The file in the project containing config (Default: `config.yaml`)\n\n## Initialization Commands [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialization-commands-1 \"Direct link to Initialization Commands\")\n\nThese commands help you create and set up new indexing projects quickly.\n\n### `envio init` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init \"Direct link to envio-init\")\n\nInitialize an indexer with one of the initialization options.\n\n**Usage:** `envio init [OPTIONS] [COMMAND]`\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands \"Direct link to subcommands\")\n\n- `contract-import` — Initialize Evm indexer by importing config from a contract for a given chain\n- `template` — Initialize Evm indexer from an example template\n- `fuel` — Initialization option for creating Fuel indexer\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-1 \"Direct link to options-1\")\n\n- `-n`, `--name ` — The name of your project\n- `-l`, `--language ` — The language used to write handlers (Options: `javascript`, `typescript`, `rescript`)\n- `--api-token ` — The hypersync API key to be initialized in your templates .env file\n\n### `envio init contract-import` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-contract-import \"Direct link to envio-init-contract-import\")\n\nInitialize Evm indexer by importing config from a contract for a given chain.\n\n**Usage:** `envio init contract-import [OPTIONS] [COMMAND]`\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-1 \"Direct link to subcommands-1\")\n\n- `explorer` — Initialize by pulling the contract ABI from a block explorer\n- `local` — Initialize from a local json ABI file\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-2 \"Direct link to options-2\")\n\n- `-c`, `--contract-address ` — Contract address to generate the config from\n- `--single-contract` — If selected, prompt will not ask for additional contracts/addresses/networks\n- `--all-events` — If selected, prompt will not ask to confirm selection of events on a contract\n\n### `envio init contract-import explorer` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-contract-import-explorer \"Direct link to envio-init-contract-import-explorer\")\n\nInitialize by pulling the contract ABI from a block explorer.\n\n**Usage:** `envio init contract-import explorer [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-3 \"Direct link to options-3\")\n\n- `-b`, `--blockchain ` — Network to import the contract from (Options include `ethereum-mainnet`, `polygon`, `arbitrum-one`, etc. For complete list, run: `envio init contract-import explorer --help`)\n\n### `envio init contract-import local` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-contract-import-local \"Direct link to envio-init-contract-import-local\")\n\nInitialize from a local json ABI file.\n\n**Usage:** `envio init contract-import local [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-4 \"Direct link to options-4\")\n\n- `-a`, `--abi-file ` — The path to a json abi file\n- `--contract-name ` — The name of the contract\n- `-b`, `--blockchain ` — Name or ID of the contract network\n- `-r`, `--rpc-url ` — The rpc url to use if the network id used is unsupported by our hypersync\n- `-s`, `--start-block ` — The start block to use on this network\n\n### `envio init template` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-template \"Direct link to envio-init-template\")\n\nInitialize Evm indexer from an example template.\n\n**Usage:** `envio init template [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-5 \"Direct link to options-5\")\n\n- `-t`, `--template ` — Template to use (Options: `greeter`, `erc20`)\n\n### `envio init fuel` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-fuel \"Direct link to envio-init-fuel\")\n\nInitialization option for creating Fuel indexer.\n\n**Usage:** `envio init fuel [COMMAND]`\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-2 \"Direct link to subcommands-2\")\n\n- `contract-import` — Initialize Fuel indexer by importing config from a contract\n- `template` — Initialize Fuel indexer from an example template\n\n### `envio init fuel contract-import` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-fuel-contract-import \"Direct link to envio-init-fuel-contract-import\")\n\nInitialize Fuel indexer by importing config from a contract for a given chain.\n\n**Usage:** `envio init fuel contract-import [OPTIONS] [COMMAND]`\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-3 \"Direct link to subcommands-3\")\n\n- `local` — Initialize from a local json ABI file\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-6 \"Direct link to options-6\")\n\n- `-c`, `--contract-address ` — Contract address to generate the config from\n- `--single-contract` — If selected, prompt will not ask for additional contracts/addresses/networks\n- `--all-events` — If selected, prompt will not ask to confirm selection of events on a contract\n\n### `envio init fuel contract-import local` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-fuel-contract-import-local \"Direct link to envio-init-fuel-contract-import-local\")\n\nInitialize from a local json ABI file.\n\n**Usage:** `envio init fuel contract-import local [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-7 \"Direct link to options-7\")\n\n- `-a`, `--abi-file ` — The path to a json abi file\n- `--contract-name ` — The name of the contract\n\n### `envio init fuel template` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-init-fuel-template \"Direct link to envio-init-fuel-template\")\n\nInitialize Fuel indexer from an example template.\n\n**Usage:** `envio init fuel template [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-8 \"Direct link to options-8\")\n\n- `-t`, `--template ` — Name of the template (Options: `greeter`)\n\n## Development Commands [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#development-commands-1 \"Direct link to Development Commands\")\n\nThese commands help you develop, test, and run your indexers locally.\n\n### `envio dev` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-dev \"Direct link to envio-dev\")\n\nDevelopment commands for starting, stopping, and restarting the indexer with automatic codegen for any changed files.\n\n**Usage:** `envio dev`\n\n### `envio stop` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-stop \"Direct link to envio-stop\")\n\nStop the local environment - delete the database and stop all processes (including Docker) for the current directory.\n\n**Usage:** `envio stop`\n\n### `envio codegen` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-codegen \"Direct link to envio-codegen\")\n\nGenerate indexing code from user-defined configuration & schema files.\n\n**Usage:** `envio codegen`\n\n### `envio start` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-start \"Direct link to envio-start\")\n\nStart the indexer without any automatic codegen.\n\n**Usage:** `envio start [OPTIONS]`\n\n###### **Options:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#options-9 \"Direct link to options-9\")\n\n- `-r`, `--restart` — Clear your database and restart indexing from scratch\n- `-b`, `--bench` — Saves benchmark data to a file during indexing\n\n## Environment Management Commands [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#environment-management-commands \"Direct link to Environment Management Commands\")\n\nThese commands help you manage your local development environment.\n\n### `envio local` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local \"Direct link to envio-local\")\n\nPrepare local environment for envio testing.\n\n**Usage:** `envio local `\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-4 \"Direct link to subcommands-4\")\n\n- `docker` — Local Envio and ganache environment commands\n- `db-migrate` — Local Envio database commands\n\n### `envio local docker` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-docker \"Direct link to envio-local-docker\")\n\nLocal Envio and ganache environment commands.\n\n**Usage:** `envio local docker `\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-5 \"Direct link to subcommands-5\")\n\n- `up` — Create docker images required for local environment\n- `down` — Delete existing docker images on local environment\n\n### `envio local docker up` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-docker-up \"Direct link to envio-local-docker-up\")\n\nCreate docker images required for local environment.\n\n**Usage:** `envio local docker up`\n\n### `envio local docker down` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-docker-down \"Direct link to envio-local-docker-down\")\n\nDelete existing docker images on local environment.\n\n**Usage:** `envio local docker down`\n\n### `envio local db-migrate` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-db-migrate \"Direct link to envio-local-db-migrate\")\n\nLocal Envio database commands.\n\n**Usage:** `envio local db-migrate `\n\n###### **Subcommands:** [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#subcommands-6 \"Direct link to subcommands-6\")\n\n- `up` — Migrate latest schema to database\n- `down` — Drop database schema\n- `setup` — Setup database by dropping schema and then running migrations\n\n### `envio local db-migrate up` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-db-migrate-up \"Direct link to envio-local-db-migrate-up\")\n\nMigrate latest schema to database.\n\n**Usage:** `envio local db-migrate up`\n\n### `envio local db-migrate down` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-db-migrate-down \"Direct link to envio-local-db-migrate-down\")\n\nDrop database schema.\n\n**Usage:** `envio local db-migrate down`\n\n### `envio local db-migrate setup` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-local-db-migrate-setup \"Direct link to envio-local-db-migrate-setup\")\n\nSetup database by dropping schema and then running migrations.\n\n**Usage:** `envio local db-migrate setup`\n\n## Analysis Tools [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#analysis-tools-1 \"Direct link to Analysis Tools\")\n\nThese commands help you analyze and optimize your indexer's performance.\n\n### `envio benchmark-summary` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-benchmark-summary \"Direct link to envio-benchmark-summary\")\n\nPrints a summary of the benchmark data after running the indexer with envio start --bench flag or setting 'ENVIO\\_SAVE\\_BENCHMARK\\_DATA=true'.\n\n**Usage:** `envio benchmark-summary`\n\n## Command Reference Table [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#command-reference-table \"Direct link to Command Reference Table\")\n\n| Command | Description | Common Use Case |\n| --- | --- | --- |\n| `envio init` | Create new indexer | Starting a new project |\n| `envio dev` | Run in development mode | Local development with hot reload |\n| `envio start` | Start indexer | Production or testing runs |\n| `envio stop` | Stop all processes | Cleaning up environment |\n| `envio codegen` | Generate code | After changing config or schema |\n| `envio local docker up` | Start Docker containers | Setting up environment |\n| `envio local db-migrate setup` | Initialize database | Before first run |\n\n## Complete One-Line Examples [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#complete-one-line-examples \"Direct link to Complete One-Line Examples\")\n\nThese examples show the full command with all options to initialize and start an indexer in one line.\n\n### Contract Import from Block Explorer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-import-from-block-explorer \"Direct link to Contract Import from Block Explorer\")\n\nCreate and start a USDC indexer on Ethereum:\n\n```codeBlockLines_e6Vv\npnpx envio init contract-import explorer -n usdc-indexer -c 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 -b ethereum-mainnet --single-contract --all-events -l typescript -d usdc-indexer --api-token \"your-api-token\" && cd usdc-indexer && pnpm dev\n\n```\n\n**What each part does:**\n\n- `pnpx envio init contract-import explorer` \\- Initialize from block explorer\n- `-n usdc-indexer` \\- Project name\n- `-c 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48` \\- USDC contract address\n- `-b ethereum-mainnet` \\- Network\n- `--single-contract` \\- Don't prompt for more contracts\n- `--all-events` \\- Index all events\n- `-l typescript` \\- Use TypeScript\n- `-d usdc-indexer` \\- Output directory\n- `--api-token \"your-api-token\"` \\- API token\n- `&& cd usdc-indexer` \\- Navigate to project\n- `&& pnpm dev` \\- Start the indexer\n\n### Contract Import from Local ABI [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-import-from-local-abi \"Direct link to Contract Import from Local ABI\")\n\nFor unverified contracts or custom networks:\n\n```codeBlockLines_e6Vv\npnpx envio init contract-import local -n my-indexer -a ./abis/MyContract.json -c 0xYourContractAddress -b ethereum-mainnet --contract-name MyContract --single-contract --all-events -l typescript -d my-indexer --api-token \"your-api-token\" && cd my-indexer && pnpm dev\n\n```\n\n**What each part does:**\n\n- `pnpx envio init contract-import local` \\- Initialize from local ABI file\n- `-a ./abis/MyContract.json` \\- Path to ABI file\n- `--contract-name MyContract` \\- Name for the contract\n- `-b ethereum-mainnet` \\- Network name (or use chain ID for local import)\n- All other flags same as above\n\n### Template Initialization [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#template-initialization \"Direct link to Template Initialization\")\n\nQuick start with an ERC20 template:\n\n```codeBlockLines_e6Vv\npnpx envio init template -n erc20-example -t erc20 -l typescript -d erc20-indexer --api-token \"your-api-token\" && cd erc20-indexer && pnpm dev\n\n```\n\n**What each part does:**\n\n- `pnpx envio init template` \\- Initialize from template\n- `-t erc20` \\- Use ERC20 template\n- Other flags same as above\n\n### Running Benchmarks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#running-benchmarks \"Direct link to Running Benchmarks\")\n\n```codeBlockLines_e6Vv\nenvio start --bench\nenvio benchmark-summary\n\n```\n\n* * *\n\n## Understanding and Handling Chain Reorganizations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-and-handling-chain-reorganizations \"Direct link to Understanding and Handling Chain Reorganizations\")\n\n**File:** `Advanced/reorgs-support.md`\n\n## What Are Chain Reorganizations? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-are-chain-reorganizations \"Direct link to What Are Chain Reorganizations?\")\n\nChain reorganizations (reorgs) occur when the blockchain temporarily forks and then resolves to a single chain, causing some previously confirmed blocks to be replaced by different blocks. This is a normal part of blockchain consensus mechanisms, especially in proof-of-work chains.\n\nWhen a reorg happens:\n\n- Transactions that were previously considered confirmed may be dropped\n- New transactions may be added to the blockchain\n- The order of transactions might change\n\nFor indexers, this presents a challenge: data that was previously indexed may no longer be valid, requiring a rollback and reprocessing of the affected blocks.\n\n## Automatic Reorg Handling in HyperIndex [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#automatic-reorg-handling-in-hyperindex \"Direct link to Automatic Reorg Handling in HyperIndex\")\n\nHyperIndex includes built-in support for handling chain reorganizations, ensuring your indexed data remains consistent with the blockchain's canonical state. This feature is **enabled by default** to protect your data integrity.\n\n## Configuration Options [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-options \"Direct link to Configuration Options\")\n\n### Enabling or Disabling Reorg Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#enabling-or-disabling-reorg-support \"Direct link to Enabling or Disabling Reorg Support\")\n\nYou can control reorg handling through the `rollback_on_reorg` flag in your `config.yaml` file:\n\n```codeBlockLines_e6Vv\n# Enable reorg handling (default)\nrollback_on_reorg: true\nnetworks:\n# network configurations...\n\n# OR\n\n# Disable reorg handling (not recommended for production)\nrollback_on_reorg: false\nnetworks:\n# network configurations...\n\n```\n\n### Configuring Confirmation Thresholds [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuring-confirmation-thresholds \"Direct link to Configuring Confirmation Thresholds\")\n\nYou can customize the number of blocks required before considering a block \"confirmed\" and no longer subject to reorgs:\n\n```codeBlockLines_e6Vv\nrollback_on_reorg: true\nnetworks:\n  - id: 137 # Polygon\n    confirmed_block_threshold: 150\n  - id: 1 # Ethereum\n    # Using default threshold\n\n```\n\nThe `confirmed_block_threshold` defines how many blocks below the chain head are considered safe from reorganizations. Any reorg deeper than this threshold won't trigger a rollback in your indexer.\n\n## Default Confirmation Thresholds [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#default-confirmation-thresholds \"Direct link to Default Confirmation Thresholds\")\n\nCurrently, all chains default to a threshold of **200 blocks**. In future releases, these thresholds will be tailored per chain based on their specific characteristics and historical reorg depths.\n\n| Network Type | Default Threshold | Notes |\n| --- | --- | --- |\n| All Networks | 200 blocks | Will be customized per chain in future releases |\n\n## Technical Details and Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#technical-details-and-limitations \"Direct link to Technical Details and Limitations\")\n\n### Guaranteed Detection [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#guaranteed-detection \"Direct link to Guaranteed Detection\")\n\nReorg detection is guaranteed when using HyperSync as your data source. HyperSync's architecture ensures that any reorganization in the blockchain will be properly detected and handled.\n\n### RPC Limitations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rpc-limitations \"Direct link to RPC Limitations\")\n\nWhen using a custom RPC endpoint as your data source, there are some edge cases where reorgs might go undetected, depending on the RPC provider's implementation and your indexing pattern.\n\n### Scope of Rollbacks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#scope-of-rollbacks \"Direct link to Scope of Rollbacks\")\n\nDuring a reorg-triggered rollback:\n\n✅ **What is rolled back:**\n\n- All entities defined in your schema\n- All data that your handlers read or write to the database\n\n❌ **What is not rolled back:**\n\n- Side effects in your handler code (API calls, external services)\n- Custom caching mechanisms outside of HyperIndex\n- Logs or external files written by your handlers\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-3 \"Direct link to Best Practices\")\n\n1. **Keep reorg support enabled** for production indexers\n2. **Use HyperSync** when possible for guaranteed reorg detection\n3. **Avoid external side effects** in your handlers that cannot be rolled back\n4. **Consider higher thresholds** for high-value applications or networks with historically deep reorgs\n\n## Example Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-configuration \"Direct link to Example Configuration\")\n\nHere's a complete example showing reorg handling configuration for multiple networks:\n\n```codeBlockLines_e6Vv\nrollback_on_reorg: true\nnetworks:\n  - id: 1 # Ethereum Mainnet\n    confirmed_block_threshold: 250 # Higher threshold for Ethereum\n    # other network config...\n\n  - id: 137 # Polygon\n    confirmed_block_threshold: 150 # Lower threshold for Polygon\n    # other network config...\n\n  - id: 42161 # Arbitrum One\n    # Using default threshold (200)\n    # other network config...\n\n```\n\nBy properly configuring reorg support, you ensure that your indexed data remains consistent with the blockchain, even when the chain reorganizes.\n\n* * *\n\n## Understanding Generated Indexing Files [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-generated-indexing-files \"Direct link to Understanding Generated Indexing Files\")\n\n**File:** `Advanced/generated-files.md`\n\n## Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-3 \"Direct link to Overview\")\n\nThe `/generated` directory contains files automatically created by Envio's code generation system. These files form the backbone of your indexer's runtime operations, translating your configuration, schema, and event handlers into executable code that processes blockchain data.\n\n> **Important:** Generated files should never be manually edited. Any changes will be overwritten the next time code generation runs.\n\n## Purpose of Generated Files [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#purpose-of-generated-files \"Direct link to Purpose of Generated Files\")\n\nGenerated files serve several critical functions:\n\n1. **Type-Safe Data Access** \\- They provide strongly-typed interfaces to interact with your defined entities\n2. **Event Processing** \\- They contain the logic to decode and process contract events\n3. **Database Interactions** \\- They manage database operations for storing and retrieving indexed data\n4. **Runtime Orchestration** \\- They coordinate the indexing workflow\n\n## Real-World Example: Uniswap V4 Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#real-world-example-uniswap-v4-indexer \"Direct link to Real-World Example: Uniswap V4 Indexer\")\n\nLet's examine how specific elements from a real Uniswap V4 indexer translate into generated files:\n\n### From Schema to Generated Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#from-schema-to-generated-types \"Direct link to From Schema to Generated Types\")\n\nFor a schema entity like this:\n\n```codeBlockLines_e6Vv\ntype Pool {\nid: ID!\nchainId: BigInt!\ncurrency0: String!\ncurrency1: String!\nfee: BigInt!\ntickSpacing: BigInt!\nhooks: String!\nnumberOfSwaps: BigInt! @index\ncreatedAtTimestamp: BigInt!\ncreatedAtBlockNumber: BigInt!\n}\n\n```\n\nThe codegen process generates:\n\n1. **Type Definition** in `EntityModels.res`:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   type pool = {\n     id: string,\n     chainId: BigInt.t,\n     currency0: string,\n     currency1: string,\n     fee: BigInt.t,\n     tickSpacing: BigInt.t,\n     hooks: string,\n     numberOfSwaps: BigInt.t,\n     createdAtTimestamp: BigInt.t,\n     createdAtBlockNumber: BigInt.t,\n   }\n\n   ```\n\n2. **Constructor Function**:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   let makePool = (\n     ~id: string,\n     ~chainId: BigInt.t,\n     ~currency0: string,\n     ~currency1: string,\n     ~fee: BigInt.t,\n     ~tickSpacing: BigInt.t,\n     ~hooks: string,\n     ~numberOfSwaps: BigInt.t,\n     ~createdAtTimestamp: BigInt.t,\n     ~createdAtBlockNumber: BigInt.t,\n   ) => {\n     {\n       id,\n       chainId,\n       currency0,\n       currency1,\n       fee,\n       tickSpacing,\n       hooks,\n       numberOfSwaps,\n       createdAtTimestamp,\n       createdAtBlockNumber,\n     }\n   }\n\n   ```\n\n3. **Database Functions** in `Queries.res`:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   let getPoolById = (id: string): option => {\n     // Database retrieval logic\n   }\n\n   let savePool = (entity: EntityModels.pool): unit => {\n     // Database save logic\n   }\n\n   ```\n\n\n### From Config to Generated Event Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#from-config-to-generated-event-handlers \"Direct link to From Config to Generated Event Handlers\")\n\nGiven a contract event in `config.yaml`:\n\n```codeBlockLines_e6Vv\ncontracts:\n  - name: PoolManager\n    handler: src/EventHandlers.ts\n    events:\n      - event: Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee)\n\n```\n\nThe codegen process generates handler wrappers like:\n\n```codeBlockLines_e6Vv\n// In Handlers.res\nlet handlePoolManager_Swap = (\n~blockHeader: Types.blockHeader,\n~txHash: string,\n~logIndex: int,\n~id: string,\n~sender: string,\n~amount0: BigInt.t,\n~amount1: BigInt.t,\n~sqrtPriceX96: BigInt.t,\n~liquidity: BigInt.t,\n~tick: BigInt.t,\n~fee: BigInt.t,\n): unit => {\n// Call the user-defined handler\nlet context = makeEventContext(\n    ~blockHeader,\n    ~txHash,\n    ~logIndex,\n    ~eventIdx,\n    ~contractName=\"PoolManager\",\n    ~eventName=\"Swap\"\n)\nUserHandlers.handlePoolManager_Swap(\n    ~context,\n    ~id,\n    ~sender,\n    ~amount0,\n    ~amount1,\n    ~sqrtPriceX96,\n    ~liquidity,\n    ~tick,\n    ~fee,\n)\n}\n\n```\n\n### From Multi-Network Config to Generated Network Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#from-multi-network-config-to-generated-network-handlers \"Direct link to From Multi-Network Config to Generated Network Handlers\")\n\nYour config has multiple networks:\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1 # Ethereum Mainnet\n    # ...\n  - id: 10 # Optimism\n    # ...\n  - id: 42161 # Arbitrum\n    # ...\n\n```\n\nThe generated code will include configuration parsing that handles all three networks:\n\n```codeBlockLines_e6Vv\n// In Config.res\nlet networks = [\\\n{\\\n    id: 1,\\\n    name: \"ethereum-mainnet\",\\\n    startBlock: 0,\\\n    contracts: [\\\n      {\\\n        name: \"PositionManager\",\\\n        addresses: [\"0xbD216513d74C8cf14cf4747E6AaA6420FF64ee9e\"],\\\n        // ...\\\n      },\\\n      {\\\n        name: \"PoolManager\",\\\n        addresses: [\"0x000000000004444c5dc75cB358380D2e3dE08A90\"],\\\n        // ...\\\n      },\\\n    ],\\\n},\\\n{\\\n    id: 10,\\\n    name: \"optimism\",\\\n    startBlock: 0,\\\n    // Similar contract configuration for Optimism\\\n},\\\n{\\\n    id: 42161,\\\n    name: \"arbitrum-one\",\\\n    startBlock: 0,\\\n    // Similar contract configuration for Arbitrum\\\n},\\\n]\n\n```\n\n## When to Run Code Generation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-run-code-generation \"Direct link to When to Run Code Generation\")\n\nYou should run code generation using the Envio CLI whenever you:\n\n```codeBlockLines_e6Vv\npnpm envio codegen\n\n```\n\nCodegen should be run after:\n\n1. Modifying your `config.yaml` file\n2. Changing your GraphQL schema\n3. Adding or updating event handlers\n4. Switching to a new contract or ABI\n5. After pulling changes from version control\n\n## Troubleshooting Generation Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting-generation-errors \"Direct link to Troubleshooting Generation Errors\")\n\nWhen code generation fails, the errors typically point to issues in your setup files. Here are common error patterns and their solutions:\n\n### Configuration Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-errors \"Direct link to Configuration Errors\")\n\nError messages containing `Config validation failed` typically mean there's an issue in your `config.yaml` file:\n\n- Check for syntax errors in YAML formatting\n- Verify that all required fields are present\n- Ensure contract addresses are in the correct format\n- Confirm that referenced networks are valid\n\nFor example, if you see an error about invalid network IDs, check that all network IDs in your config are valid:\n\n```codeBlockLines_e6Vv\nnetworks:\n  - id: 1 # Valid Ethereum mainnet\n  - id: 10 # Valid Optimism\n  - id: 999 # Might be invalid if this network ID isn't recognized\n\n```\n\n### Schema Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schema-errors \"Direct link to Schema Errors\")\n\nErrors mentioning `Schema parsing error` point to issues in your GraphQL schema:\n\n- Check for invalid GraphQL syntax\n- Ensure entity names match those referenced in handlers\n- Verify that relationships between entities are properly defined\n- Check for unsupported types or directives\n\nFor example, if you're using the `@index` directive as in your `Pool` entity's `numberOfSwaps` field, make sure it's correctly placed:\n\n```codeBlockLines_e6Vv\ntype Pool {\nid: ID!\nnumberOfSwaps: BigInt! @index # Correct placement of @index directive\n}\n\n```\n\n### Handler Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#handler-errors \"Direct link to Handler Errors\")\n\nIf you see `Handler validation failed` errors:\n\n- Check that handler function signatures match expected patterns\n- Ensure all referenced entities exist in your schema\n- Verify proper import syntax for entities and contract events\n\n## Relationship with Setup Files [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#relationship-with-setup-files \"Direct link to Relationship with Setup Files\")\n\nThe generated files directly reflect the structure defined in your setup files:\n\n- **config.yaml** → Determines which networks, contracts, and events are indexed\n- **schema.graphql** → Defines the entities and relationships that are generated\n- **EventHandlers** → Provides the business logic that the generated code wraps\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-4 \"Direct link to Best Practices\")\n\n1. **Never modify generated files directly** \\- Always change the source files\n2. **Run codegen before starting your indexer** \\- Ensure all files are up to date\n3. **Check error messages carefully** \\- They often pinpoint issues in your setup files\n\n## Summary [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#summary-2 \"Direct link to Summary\")\n\nGenerated files form the critical bridge between your indexing specifications and the actual runtime execution. While you shouldn't modify them directly, understanding their structure and purpose can help you debug issues and optimize your indexing process.\n\nIf you encounter persistent errors in generated files, ensure your configuration, schema, and handlers follow Envio's best practices, or contact support for assistance.\n\n* * *\n\n## Metadata Query [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#metadata-query \"Direct link to Metadata Query\")\n\n**File:** `Advanced/metadata-query.md`\n\nStarting from `envio@2.28` HyperIndex exposes an official `_meta` query to get indexing metadata per chain.\n\n```codeBlockLines_e6Vv\n{\n_meta {\n    chainId\n    progressBlock\n    eventsProcessed\n    bufferBlock\n    firstEventBlock\n    sourceBlock\n    readyAt\n    isReady\n    startBlock\n    endBlock\n}\n}\n\n```\n\nResult:\n\n```codeBlockLines_e6Vv\n{\n\"data\": {\n    \"_meta\": [\\\n      {\\\n        \"chainId\": 1,\\\n        \"progressBlock\": 22817138,\\\n        \"eventsProcessed\": 2380000,\\\n        \"bufferBlock\": 22820499,\\\n        \"firstEventBlock\": 21688545,\\\n        \"sourceBlock\": 23368264,\\\n        \"readyAt\": null,\\\n        \"isReady\": false,\\\n        \"startBlock\": 0,\\\n        \"endBlock\": null\\\n      },\\\n      {\\\n        \"chainId\": 10,\\\n        \"progressBlock\": 137848820,\\\n        \"eventsProcessed\": 2455000,\\\n        \"bufferBlock\": 137873621,\\\n        \"firstEventBlock\": 130990676,\\\n        \"sourceBlock\": 141168975,\\\n        \"readyAt\": null,\\\n        \"isReady\": false,\\\n        \"startBlock\": 0,\\\n        \"endBlock\": null\\\n      }\\\n    ]\n}\n}\n\n```\n\n## Usage [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#usage \"Direct link to Usage\")\n\nYou can use this query to track the indexing progress for each chain. For example, wait until the block data is ready before querying actuall data, building custom dashboards, health checks or sending notifications.\n\n## Metadata fields [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#metadata-fields \"Direct link to Metadata fields\")\n\n### Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-1 \"Direct link to Configuration\")\n\nThe fields are populated on the indexer startup and don't change during the indexer process.\n\n- `chainId` \\- Metadata for the Chain ID. The metadata is sorted by chainId in ascending order. You can use `_meta(where: { chainId: { _eq: 1 } })` to get the metadata for a specific chain.\n- `startBlock` \\- Start block number from `config.yaml`\n- `endBlock` \\- End block number from `config.yaml`\n\n### Transactional [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#transactional \"Direct link to Transactional\")\n\nThe fields are updated in the batch write transaction, and guaranteed to be written to the Database at the same time. This means that the `progressBlock` and `eventsProcessed` will increase at the same time as the data for the processed events is written to the Database and available for querying.\n\n- `progressBlock` \\- Block number fully processed and written to the DB\n- `eventsProcessed` \\- Number of processed events and written to the DB. (not reorg resistant)\n\n### Throttled [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#throttled \"Direct link to Throttled\")\n\nThe fields are updated outside of the batch transaction and throttled to avoid performance overhead. There might be a small delay between the event processing and the metadata update.\n\n- `bufferBlock` \\- Block number of the latest event ready for processing\n- `firstEventBlock` \\- Block number of the first processed event for the chain\n- `sourceBlock` \\- The latest known block number of the actively using data source\n- `readyAt` \\- Timestamp when the chain finished historical sync or reached End Block\n- `isReady` \\- Whether the chain finished historical sync or reached End Block\n\n* * *\n\n## HyperIndex Terminology & Key Concepts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperindex-terminology--key-concepts \"Direct link to HyperIndex Terminology & Key Concepts\")\n\n**File:** `Advanced/terminology.md`\n\nThis comprehensive glossary explains the key terms and concepts used throughout the Envio documentation and ecosystem. Terms are organized by category for easier reference.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#table-of-contents \"Direct link to Table of Contents\")\n\n- Blockchain Fundamentals\n- Smart Contract Concepts\n- Indexing & Data\n- Development Tools\n- Programming Languages\n- Envio Platform\n- Mathematical Concepts\n\n## Blockchain Fundamentals [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#blockchain-fundamentals \"Direct link to Blockchain Fundamentals\")\n\n### Address [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#address \"Direct link to Address\")\n\nA unique identifier representing an account or entity within a blockchain network. Addresses are typically represented as hexadecimal strings (e.g., `0x1234...abcd`) and used to send, receive, or interact with blockchain resources.\n\n### Block [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#block \"Direct link to Block\")\n\nA collection of data containing a set of transactions that are bundled together and added to the blockchain. Blocks are linked together chronologically to form the blockchain.\n\n### EVM [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#evm \"Direct link to EVM\")\n\n**Ethereum Virtual Machine (EVM)** is a runtime environment that executes smart contracts on the Ethereum blockchain. It provides a sandboxed and deterministic execution environment for smart contract code.\n\n### EVM Compatible [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#evm-compatible \"Direct link to EVM Compatible\")\n\nThe ability for a blockchain to run the EVM and execute Ethereum smart contracts. In the context of Envio, it's the ability to deploy a unified API to retrieve data from multiple EVM-compatible blockchains (e.g., Ethereum, BSC, Arbitrum, Polygon, Avalanche, Optimism, Fantom, Cronos, etc.).\n\n### Node [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#node \"Direct link to Node\")\n\nA device or computer that participates in a blockchain network, maintaining a copy of the blockchain and validating transactions.\n\n### Transaction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#transaction \"Direct link to Transaction\")\n\nAn action or set of actions recorded on the blockchain, typically involving the transfer of assets, execution of smart contracts, or other network interactions. Once confirmed, transactions become a permanent part of the blockchain.\n\n## Smart Contract Concepts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#smart-contract-concepts \"Direct link to Smart Contract Concepts\")\n\n### Event [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event \"Direct link to Event\")\n\nA specific occurrence or action within a blockchain system that is specified in smart contracts and used to emit data from the blockchain. Smart contracts can emit events to essentially communicate that something has happened on the blockchain.\n\nWeb applications or any kind of application (e.g., mobile app, backend job, etc.) can listen to events and take actions when they occur. Events are typically data that are not stored on-chain as it would be considerably more expensive to store.\n\n**Example:**\n\nDeclaring an event:\n\n```codeBlockLines_e6Vv\nevent Deposit(address indexed _from, bytes32 indexed _id, uint _value);\n\n```\n\nEmitting an event:\n\n```codeBlockLines_e6Vv\nemit Deposit(msg.sender, _id, msg.value);\n\n```\n\n### Event Handler [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-handler \"Direct link to Event Handler\")\n\nA function that listens for a specific event from a smart contract and either updates or inserts new data into your Envio API. Event handlers define the business logic for processing blockchain events.\n\n### Smart Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#smart-contract \"Direct link to Smart Contract\")\n\nA self-executing program with the terms of an agreement directly written into code that runs on the blockchain. Smart contracts are not controlled by a user but are deployed to the network and run as programmed. User accounts can interact with smart contracts by submitting transactions that execute defined functions.\n\n### Tokens [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#tokens \"Direct link to Tokens\")\n\nDigital representations of assets or utilities within a blockchain system that follow a specific standard. Common token standards include:\n\n- **ERC-20**: Standard for fungible tokens (identical and interchangeable)\n- **ERC-721**: Standard for non-fungible tokens (unique and non-interchangeable)\n- **ERC-1155**: Multi-token standard supporting both fungible and non-fungible tokens\n\n## Indexing & Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing--data \"Direct link to Indexing & Data\")\n\n### API [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#api \"Direct link to API\")\n\n**Application Programming Interface** is a set of protocols and tools for building software applications. APIs define how different software components should interact with each other.\n\n### Endpoint [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#endpoint \"Direct link to Endpoint\")\n\nA URL that can be used to query an Envio custom API. Endpoints provide a structured way to request specific data from the indexer.\n\n### GraphQL [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#graphql \"Direct link to GraphQL\")\n\nA query language for interacting with APIs, commonly used in blockchain systems for retrieving specific data from blockchain platforms. As an alternative to REST, GraphQL lets developers construct requests that pull data from multiple data sources in a single API call.\n\n### GraphQL API [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#graphql-api \"Direct link to GraphQL API\")\n\nThe data presentation part of an Envio indexer. Typically, it's a GraphQL API auto-generated from the schema file, allowing flexible and efficient data queries.\n\n### Indexer [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexer \"Direct link to Indexer\")\n\nA specialized database management system (DBMS) that indexes and organizes blockchain data, making it easier for developers to efficiently query, retrieve, and utilize on-chain data.\n\nWeb2 apps usually rely on indexers like Google to pre-sort information into indices for data retrieval and filtering. In blockchain and Web3, applications need indexers to achieve similar data retrieval capabilities.\n\n### Query [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#query \"Direct link to Query\")\n\nA request for data. In the context of Envio, a query is a request for data from an Envio API that will be answered by an Envio Indexer.\n\n### Schema File [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schema-file-1 \"Direct link to Schema File\")\n\nA file that defines entities based on events emitted from smart contracts and specifies the data types for these entities. The schema serves as the blueprint for your indexed data structure.\n\n## Development Tools [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#development-tools \"Direct link to Development Tools\")\n\n### Codegen [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#codegen \"Direct link to Codegen\")\n\nThe process of automatically generating code based on a given input. In blockchain development, codegen is often used for generating client libraries, interfaces, or type-safe data access layers from schemas or specifications.\n\n### Envio CLI [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-cli \"Direct link to Envio CLI\")\n\nA command line interface tool for building and deploying Envio indexers. The CLI provides commands for initializing, developing, and managing your indexer projects.\n\n### SDK [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#sdk \"Direct link to SDK\")\n\n**Software Development Kit** is a collection of tools, libraries, and documentation that facilitates the development of applications for a specific platform or system.\n\n## Programming Languages [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#programming-languages \"Direct link to Programming Languages\")\n\n### JavaScript [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#javascript \"Direct link to JavaScript\")\n\nA high-level, interpreted programming language primarily used for client-side scripting in web browsers. It is the de facto language for web development, enabling developers to create interactive and dynamic web applications.\n\n### ReScript [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rescript \"Direct link to ReScript\")\n\nA robustly typed language that compiles to efficient and human-readable JavaScript. ReScript aims to bring the power and expressiveness of functional programming to JavaScript development. It offers seamless integration with JavaScript and provides features like static typing, pattern matching, and immutable data structures.\n\n### TypeScript [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#typescript \"Direct link to TypeScript\")\n\nA superset of JavaScript that adds static typing and other advanced features to the language. It compiles down to plain JavaScript, making it compatible with existing JavaScript codebases. TypeScript helps developers catch errors during development by providing type-checking and improved tooling support. It enhances JavaScript by adding features like interfaces, classes, modules, and generics.\n\n## Envio Platform [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-platform \"Direct link to Envio Platform\")\n\n### Hosted Service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-1 \"Direct link to Hosted Service\")\n\nA managed service platform for building, hosting, and querying Envio's Indexers with guaranteed uptime and performance service level agreements. The Hosted Service removes the operational burden of running indexers.\n\n### Ploffen [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ploffen \"Direct link to Ploffen\")\n\nPloffen (meaning \"Pop\" in Dutch) is a fun game based on an ERC20 token contract, where users can deposit a game token (i.e., make a contribution) into a savings pool.\n\nThe last user to add a contribution to the savings pool has a chance of winning the entire pool if no other user deposits a contribution within 1 hour of the previous contribution. For example, if 30 persons play the game, and each person contributes a small amount, the last person can win the _total contributions_ made by all 30 persons in the savings pool.\n\nThe Ploffen project demonstrates a Hardhat framework example. It includes a sample contract, a test for that contract, a deployment script, and the Envio integration to index emitted events from the Ploffen smart contract.\n\n## Mathematical Concepts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#mathematical-concepts \"Direct link to Mathematical Concepts\")\n\n### Commutative Property [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#commutative-property \"Direct link to Commutative Property\")\n\nA fundamental property of certain binary operations in mathematics. An operation is said to be commutative if the order in which you apply the operation to two operands does not affect the result. In other words, for a commutative operation:\n\na + b = b + a\n\n**Examples of commutative operations:**\n\n1. **Addition**: 2 + 3 = 3 + 2\n2. **Multiplication**: 2 \\_ 3 = 3 \\_ 2\n\n**Examples of non-commutative operations:**\n\n1. **Subtraction**: 5 - 3 ≠ 3 - 5\n2. **Division**: 8 / 4 ≠ 4 / 8\n3. **String Concatenation**: \"Hello\" + \"World\" ≠ \"World\" + \"Hello\"\n\nThe commutative property is a property of the operation itself, not necessarily the numbers involved. If an operation is commutative, you can switch the order of the operands without changing the result.\n\n* * *\n\n## Optimizing Database Performance in HyperIndex [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimizing-database-performance-in-hyperindex \"Direct link to Optimizing Database Performance in HyperIndex\")\n\n**File:** `Advanced/performance/database-performance-optimization.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-11 \"Direct link to Introduction\")\n\nAs your indexed data grows, database performance becomes critical to maintaining responsive queries and efficient operations. This guide explains how to optimize your HyperIndex database through strategic indexing and schema design to ensure your applications remain fast even as data volume increases.\n\n## Understanding Database Indices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-database-indices \"Direct link to Understanding Database Indices\")\n\nDatabase indices are special data structures that improve the speed of data retrieval operations. Think of them like the index at the back of a book — rather than scanning every page (row) to find what you're looking for, indices allow the database to quickly locate the relevant data.\n\n### Why Indices Matter [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-indices-matter \"Direct link to Why Indices Matter\")\n\nWithout proper indices, your database must perform \"full table scans\" when searching for data, examining every row to find matches. As your data grows, this becomes increasingly inefficient:\n\n| Data Size | Without Indices | With Proper Indices |\n| --- | --- | --- |\n| 1,000 records | ~10ms | ~1ms |\n| 100,000 records | ~500ms | ~2ms |\n| 1,000,000+ records | 5+ seconds | ~5ms |\n\n_Note: Actual performance varies based on hardware, query complexity, and database load._\n\n## Creating Custom Indices in Your Schema [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#creating-custom-indices-in-your-schema \"Direct link to Creating Custom Indices in Your Schema\")\n\nHyperIndex provides several ways to define indices in your GraphQL schema, giving you control over database performance.\n\n### Single-Column Indices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#single-column-indices \"Direct link to Single-Column Indices\")\n\nThe simplest form of indexing is on individual fields using the `@index` directive:\n\n```codeBlockLines_e6Vv\ntype Transaction {\nid: ID!\nuserAddress: String! @index\ntokenAddress: String! @index\namount: BigInt!\ntimestamp: BigInt! @index\n}\n\n```\n\nIn this example:\n\n- Queries filtering on `userAddress` (e.g., finding all transactions for a user)\n- Queries filtering on `tokenAddress` (e.g., finding all transactions for a token)\n- Queries filtering on `timestamp` (e.g., finding transactions in a date range)\n\nAll become significantly faster because the database can use the indices to quickly locate matching records.\n\n### Composite Indices for Multi-Field Queries [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#composite-indices-for-multi-field-queries \"Direct link to Composite Indices for Multi-Field Queries\")\n\nWhen you frequently query using multiple fields together, composite indices provide better performance:\n\n```codeBlockLines_e6Vv\ntype Transfer @index(fields: [\"from\", \"to\", \"tokenId\"]) {\nid: ID!\nfrom: String! @index\nto: String! @index\ntokenId: BigInt!\nvalue: BigInt!\ntimestamp: BigInt!\n}\n\n```\n\nThis creates:\n\n1. Individual indices on `from` and `to` fields\n2. A composite index on the combination of `from`, `to`, and `tokenId`\n\nComposite indices are particularly valuable for complex queries that filter on multiple columns simultaneously, such as \"find all transfers from address X to address Y for token Z.\"\n\n### Automatic Indices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#automatic-indices \"Direct link to Automatic Indices\")\n\nHyperIndex automatically creates indices for:\n\n- All `ID` fields\n- All fields marked with `@derivedFrom`\n\nThere's no need to manually add indices for these fields.\n\n## Strategic Indexing: When to Use Each Type [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#strategic-indexing-when-to-use-each-type \"Direct link to Strategic Indexing: When to Use Each Type\")\n\n### When to Use Single-Column Indices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-use-single-column-indices \"Direct link to When to Use Single-Column Indices\")\n\nUse single-column indices when:\n\n- You frequently filter by a specific field\n- You sort results by a specific field\n- The field has high \"cardinality\" (many different values)\n\n**Example use case**: Indexing `userAddress` in a transaction table when users frequently look up their transaction history.\n\n### When to Use Composite Indices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#when-to-use-composite-indices \"Direct link to When to Use Composite Indices\")\n\nUse composite indices when:\n\n- You frequently query using multiple fields together\n- Your queries consistently filter on the same combination of fields\n- You need to optimize complex queries with multiple conditions\n\n**Example use case**: Indexing `(tokenAddress, timestamp)` together when users frequently view token transaction history within specific time ranges.\n\n## Performance Tradeoffs [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#performance-tradeoffs \"Direct link to Performance Tradeoffs\")\n\nWhile indices improve query performance, they come with tradeoffs:\n\n### Write Performance Impact [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#write-performance-impact \"Direct link to Write Performance Impact\")\n\nEach index requires additional updates when data is inserted or modified:\n\n- **No indices**: Fastest write performance, but slow reads\n- **Few targeted indices**: Slight write slowdown (5-10%), much faster reads\n- **Many indices**: Noticeable write slowdown (15%+), fastest possible reads\n\nFor most applications, the read performance benefits outweigh the write performance costs, especially since blockchain data is primarily read-intensive.\n\n### Storage Considerations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#storage-considerations \"Direct link to Storage Considerations\")\n\nIndices increase database storage requirements:\n\n- Each index typically requires 2-10 bytes per row\n- For large datasets (millions of records), this can add up\n- Consider storage requirements when designing indices for very large tables\n\n## Practical Examples [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#practical-examples \"Direct link to Practical Examples\")\n\n### Optimizing Token Transfer Queries [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimizing-token-transfer-queries \"Direct link to Optimizing Token Transfer Queries\")\n\nConsider a token transfer entity:\n\n```codeBlockLines_e6Vv\ntype TokenTransfer {\nid: ID!\ntoken: Token! @index\nfrom: String! @index\nto: String! @index\namount: BigInt!\nblockNumber: BigInt! @index\ntimestamp: BigInt! @index\n}\n\n```\n\nWith this schema, the following queries will be optimized:\n\n- Find all transfers for a specific token\n- Find all transfers from a specific address\n- Find all transfers to a specific address\n- Find transfers within a specific block range\n- Find transfers within a specific time range\n\n### Optimizing Complex NFT Marketplace Queries [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimizing-complex-nft-marketplace-queries \"Direct link to Optimizing Complex NFT Marketplace Queries\")\n\nFor an NFT marketplace with listings and sales:\n\n```codeBlockLines_e6Vv\ntype NFTListing\n@index(fields: [\"collection\", \"status\", \"price\"])\n@index(fields: [\"seller\", \"status\"]) {\nid: ID!\ncollection: String! @index\ntokenId: BigInt!\nseller: String! @index\nprice: BigInt!\nstatus: String! @index # \"active\", \"sold\", \"cancelled\"\ncreatedAt: BigInt! @index\n}\n\n```\n\nThis schema efficiently supports:\n\n- Finding all active listings for a collection, sorted by price\n- Finding all listings by a specific seller with a specific status\n- Finding recently created listings across all collections\n\n## Optimizing GraphQL Queries [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimizing-graphql-queries \"Direct link to Optimizing GraphQL Queries\")\n\nBeyond schema design, how you write your GraphQL queries affects performance:\n\n### Fetch Only What You Need [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#fetch-only-what-you-need \"Direct link to Fetch Only What You Need\")\n\nRequest only the fields you actually need:\n\n```codeBlockLines_e6Vv\n# Good\nquery {\ntokenTransfers(where: { token: { _eq: \"0x123\" } }, limit: 10) {\n    id\n    amount\n}\n}\n\n# Bad - fetches unnecessary fields\nquery {\ntokenTransfers(where: { token: { _eq: \"0x123\" } }, limit: 10) {\n    id\n    amount\n    from\n    to\n    timestamp\n    blockNumber\n    transactionHash\n    # other fields you don't need\n}\n}\n\n```\n\n### Use Pagination for Large Result Sets [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-pagination-for-large-result-sets \"Direct link to Use Pagination for Large Result Sets\")\n\nAlways paginate large result sets:\n\n```codeBlockLines_e6Vv\nquery {\ntokenTransfers(\n    where: { token: { _eq: \"0x123\" } }\n    limit: 20\n    offset: 40 # Skip first 40 results (page 3 with 20 items per page)\n) {\n    id\n    amount\n}\n}\n\n```\n\n### Use Timestamps for Efficient Polling [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-timestamps-for-efficient-polling \"Direct link to Use Timestamps for Efficient Polling\")\n\nWhen building applications that poll for updates, use timestamps to fetch only new data:\n\n```codeBlockLines_e6Vv\nquery getUpdatedTransfers($lastFetched: BigInt!) {\ntokenTransfers(where: { timestamp: { _gt: $lastFetched } }) {\n    id\n    from\n    to\n    amount\n}\n}\n\n```\n\n## Summary [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#summary-3 \"Direct link to Summary\")\n\nProper database indexing is essential for maintaining performance as your indexed data grows. By strategically placing indices on frequently queried fields and field combinations, you can ensure fast query responses even with large datasets.\n\n**Key takeaways:**\n\n- Use `@index` for frequently filtered or sorted individual fields\n- Use composite indices for multi-field query patterns\n- Consider performance tradeoffs for write-heavy applications\n- Design your schema and queries with performance in mind from the start\n- Always use pagination for large result sets\n\n* * *\n\n## Understanding Chain Head Latency [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-chain-head-latency \"Direct link to Understanding Chain Head Latency\")\n\n**File:** `Advanced/performance/latency-at-head.md`\n\nMaintaining low latency at the chain head is crucial for ensuring timely data updates in your indexed data. This page explains how HyperSync handles this important aspect of blockchain indexing.\n\n## HyperSync Block Retrieval [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hypersync-block-retrieval \"Direct link to HyperSync Block Retrieval\")\n\n- **Efficient Processing**: We pull new blocks from HyperSync using a highly efficient process, ensuring your indexer stays up-to-date with minimal delay.\n- **Reliable Operation**: This process typically runs smoothly without significant issues.\n- **Redundancy Plans**: We're developing a system to sync new blocks from both RPC and HyperSync simultaneously, improving robustness if one source experiences issues.\n\n## Network-Specific Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#network-specific-performance \"Direct link to Network-Specific Performance\")\n\n### Optimized Major Networks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimized-major-networks \"Direct link to Optimized Major Networks\")\n\n- **Priority Networks**: We've dedicated significant resources to maintaining extremely low latency on popular networks including Ethereum, Optimism, and Arbitrum.\n- **User Experience**: Users should experience seamless, near real-time data updates on these networks.\n\n### Smaller Chain Networks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#smaller-chain-networks \"Direct link to Smaller Chain Networks\")\n\n- **Standard Performance**: On smaller chains, latency might be slightly higher as these networks have received less optimization.\n- **Improvement Process**: Your feedback helps us prioritize which chains to optimize next. Please let us know in Discord if low latency on specific smaller chains is important for your use case.\n\n## Special Configuration Options [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#special-configuration-options \"Direct link to Special Configuration Options\")\n\n### Multi-Chain Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#multi-chain-indexing \"Direct link to Multi-Chain Indexing\")\n\n- **Unordered Multi-Chain Mode**: For applications indexing multiple chains, our unordered multi-chain mode allows each chain to continue syncing independently.\n- **Resilient Design**: With this configuration, even if one chain experiences latency, your other chains will continue syncing normally.\n\n### Chain Reorganization Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#chain-reorganization-support \"Direct link to Chain Reorganization Support\")\n\n- **Reorg Handling**: Our reorg support system ensures data consistency even when chains reorganize.\n- **Documentation**: Contact our team on Discord if you have concerns about reorg support while we finalize documentation.\n\n## Hosted Service Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hosted-service-performance \"Direct link to Hosted Service Performance\")\n\nOur hosted service offers reliable performance with ongoing improvements:\n\n- **Continuous Enhancement**: We're actively improving sync and build times on our hosted service.\n- **Relative Performance**: Currently, indexers may run slightly slower on the hosted service compared to high-performance local machines.\n- **Enterprise Solutions**: For applications requiring exceptional performance, contact us on Discord to discuss our enterprise hosting plans.\n\nBy leveraging these features and providing feedback on your specific needs, you can help us continually improve the HyperIndex head latency performance.\n\n* * *\n\n## Benchmarking Your Indexer Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#benchmarking-your-indexer-performance \"Direct link to Benchmarking Your Indexer Performance\")\n\n**File:** `Advanced/performance/benchmarking.md`\n\n## Why Benchmark Your Indexer? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-benchmark-your-indexer \"Direct link to Why Benchmark Your Indexer?\")\n\nBenchmarking is a critical tool for understanding and optimizing your indexer's performance. By collecting and analyzing performance metrics, you can:\n\n- Identify bottlenecks in your indexing pipeline\n- Determine if performance issues are due to data fetching, processing, or database operations\n- Measure the impact of code optimizations\n- Set realistic expectations for indexing speed\n- Plan infrastructure requirements for production deployments\n\n## Running Benchmarks [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#running-benchmarks-1 \"Direct link to Running Benchmarks\")\n\n### Capturing Benchmark Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#capturing-benchmark-data \"Direct link to Capturing Benchmark Data\")\n\nTo collect performance metrics while your indexer is running:\n\n```codeBlockLines_e6Vv\npnpm envio start --bench\n\n```\n\n> **Note:** Benchmarking adds some memory and processing overhead. It should not be enabled in production environments, as it holds benchmark data points in memory and periodically writes them to disk.\n\n### Viewing Benchmark Results [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#viewing-benchmark-results \"Direct link to Viewing Benchmark Results\")\n\nAfter running your indexer with benchmarking enabled, you can generate a performance summary:\n\n```codeBlockLines_e6Vv\npnpm envio benchmark-summary\n\n```\n\nThis command processes the collected benchmark data and displays a comprehensive performance report.\n\n## Understanding Benchmark Output [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-benchmark-output \"Direct link to Understanding Benchmark Output\")\n\nThe benchmark output is divided into several sections, each providing insights into different aspects of your indexer's performance:\n\n### Time Breakdown [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#time-breakdown \"Direct link to Time Breakdown\")\n\n```codeBlockLines_e6Vv\nTime breakdown\n┌─────────────────────────────────────────┬─────────┐\n│ (index)                                 │ seconds │\n├─────────────────────────────────────────┼─────────┤\n│ Total Runtime                           │ 45      │\n│ Total Time Fetching Chain 1 Partition 0 │ 44      │\n│ Total Time Processing                   │ 9       │\n└─────────────────────────────────────────┴─────────┘\n\n```\n\n**What This Tells You:**\n\n- **Total Runtime**: Overall time the indexer has been running\n- **Total Time Fetching**: Time spent retrieving data from the blockchain\n- **Total Time Processing**: Time spent in event handlers and database operations\n\n**How to Interpret:**\n\n- If fetching time dominates (as in this example), your bottleneck is data retrieval, not processing\n- If processing time is high relative to fetching, your handlers may need optimization\n- Note that fetching and processing can overlap, so the sum may exceed total runtime\n\n### General Performance Metrics [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#general-performance-metrics \"Direct link to General Performance Metrics\")\n\n```codeBlockLines_e6Vv\nGeneral\n┌─────────────────────┬─────────┐\n│ (index)             │ Values  │\n├─────────────────────┼─────────┤\n│ batch sizes sum     │ 158205  │\n│ total runtime (sec) │ 45.801  │\n│ events per second   │ 3454.18 │\n└─────────────────────┴─────────┘\n\n```\n\n**What This Tells You:**\n\n- **Batch Sizes Sum**: Total number of events processed\n- **Total Runtime**: Precise runtime in seconds\n- **Events Per Second**: Overall processing throughput\n\n**How to Interpret:**\n\n- Events per second is your key performance indicator\n- Over 10,000 events/second represents excellent performance\n- 1,000-5,000 events/second indicates good performance\n- Under 500 events/second may indicate optimization opportunities\n\n### Block Fetching Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#block-fetching-performance \"Direct link to Block Fetching Performance\")\n\n```codeBlockLines_e6Vv\nBlockRangeFetched Summary for Chain 1 Root Register\n┌───────────────────────────┬────┬───────────┬────────────┬──────┬──────────┬──────────┐\n│ (index)                   │ n  │ mean      │ std-dev    │ min  │ max      │ sum      │\n├───────────────────────────┼────┼───────────┼────────────┼──────┼──────────┼──────────┤\n│ Total Time Elapsed (ms)   │ 12 │ 3675.17   │ 1147.69    │ 2329 │ 5972     │ 44102    │\n│ Parsing Time Elapsed (ms) │ 12 │ 142.17    │ 40.15      │ 80   │ 235      │ 1706     │\n│ Page Fetch Time (ms)      │ 12 │ 3481.58   │ 1042.93    │ 2249 │ 5737     │ 41779    │\n│ Num Events                │ 12 │ 13183.75  │ 3858.92    │ 7579 │ 22426    │ 158205   │\n│ Block Range Size          │ 12 │ 906593.17 │ 3006127.15 │ 149  │ 10876789 │ 10879118 │\n└───────────────────────────┴────┴───────────┴────────────┴──────┴──────────┴──────────┘\n\n```\n\n**What This Tells You:**\n\n- **Total Time Elapsed**: Time spent fetching and parsing each batch of blocks\n- **Parsing Time**: Time spent decoding and preparing event data\n- **Page Fetch Time**: Time spent retrieving data from the blockchain\n- **Num Events**: Number of events in each batch\n- **Block Range Size**: Number of blocks in each fetch operation\n\n**How to Interpret:**\n\n- Compare Page Fetch Time to Total Time to see if data retrieval is your bottleneck\n- Large standard deviations (std-dev) indicate inconsistent performance\n- If Block Range Size varies significantly, your indexer may be adjusting batch sizes dynamically\n\n### Event Processing Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-processing-performance \"Direct link to Event Processing Performance\")\n\n```codeBlockLines_e6Vv\nEventProcessing Summary\n┌─────────────────────────────────┬────┬─────────┬─────────┬─────┬──────┬────────┐\n│ (index)                         │ n  │ mean    │ std-dev │ min │ max  │ sum    │\n├─────────────────────────────────┼────┼─────────┼─────────┼─────┼──────┼────────┤\n│ Batch Size                      │ 38 │ 4163.29 │ 1424.85 │ 89  │ 5000 │ 158205 │\n│ Contract Register Duration (ms) │ 38 │ 0.11    │ 0.38    │ 0   │ 2    │ 4      │\n│ Load Duration (ms)              │ 38 │ 80.79   │ 32.58   │ 5   │ 149  │ 3070   │\n│ Handler Duration (ms)           │ 38 │ 22.18   │ 9.07    │ 0   │ 47   │ 843    │\n│ DB Write Duration (ms)          │ 38 │ 135.92  │ 52.09   │ 8   │ 220  │ 5165   │\n│ Total Time Elapsed (ms)         │ 38 │ 239     │ 83.24   │ 13  │ 370  │ 9082   │\n└─────────────────────────────────┴────┴─────────┴─────────┴─────┴──────┴────────┘\n\n```\n\n**What This Tells You:**\n\n- **Batch Size**: Number of events in each processing batch\n- **Contract Register Duration**: Time spent preparing contract data\n- **Load Duration**: Time spent loading entities from the database\n- **Handler Duration**: Time spent executing your event handler logic\n- **DB Write Duration**: Time spent writing updated entities to the database\n- **Total Time Elapsed**: Overall time for the processing phase\n\n**How to Interpret:**\n\n- Compare Load, Handler, and DB Write durations to identify bottlenecks\n- In this example, DB Write (135ms) and Load (80ms) operations dominate processing time\n- If Load Duration is high, consider implementing entity loaders\n- If DB Write Duration is high, check if you're updating too many entities per event\n\n### Per-Handler Performance [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#per-handler-performance \"Direct link to Per-Handler Performance\")\n\n```codeBlockLines_e6Vv\nHandlers Per Event\n┌─────────────────────────────┬────────┬────────┬─────────┬────────┬────────┬──────────┐\n│ (index)                     │ n      │ mean   │ std-dev │ min    │ max    │ sum      │\n├─────────────────────────────┼────────┼────────┼─────────┼────────┼────────┼──────────┤\n│ ERC20 Transfer Handler (ms) │ 158205 │ 0.0021 │ 0.0364  │ 0.0007 │ 4.6752 │ 329.7264 │\n└─────────────────────────────┴────────┴────────┴─────────┴────────┴────────┴──────────┘\n\n```\n\n**What This Tells You:**\n\n- Detailed timing for each specific event handler\n- Shows average and total execution time across all events\n\n**How to Interpret:**\n\n- Compare different handlers to identify which ones are most expensive\n- Look for handlers with high maximum values (max column), which may indicate inconsistent performance\n- Handlers averaging above 1ms per event may benefit from optimization\n\n## Interpreting Results and Taking Action [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#interpreting-results-and-taking-action \"Direct link to Interpreting Results and Taking Action\")\n\n### Identifying Your Bottleneck [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#identifying-your-bottleneck \"Direct link to Identifying Your Bottleneck\")\n\nBased on the benchmark data, determine your primary performance bottleneck:\n\n1. **Data Fetching Bottleneck**\n   - **Symptoms**: Most time spent in \"Total Time Fetching\"\n   - **Solutions**:\n\n     - Use HyperSync if available for your network\n     - If using RPC, consider a more performant provider\n     - Adjust block batch sizes in your configuration\n2. **Data Loading Bottleneck**\n   - **Symptoms**: High \"Load Duration\" in Event Processing\n   - **Solutions**:\n\n     - Implement entity loaders to batch database operations\n     - Add appropriate database indices for frequently queried fields\n     - Optimize your entity relationships to reduce join complexity\n3. **Handler Logic Bottleneck**\n   - **Symptoms**: High \"Handler Duration\" relative to other metrics\n   - **Solutions**:\n\n     - Simplify complex calculations in your handlers\n     - Move complex operations to a post-processing step\n     - Consider caching frequently accessed values\n4. **Database Write Bottleneck**\n   - **Symptoms**: High \"DB Write Duration\"\n   - **Solutions**:\n\n     - Reduce the number of entities updated per event\n     - Batch related updates where possible\n     - Check if you're updating the same entity multiple times unnecessarily\n\n### Benchmarking Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#benchmarking-best-practices \"Direct link to Benchmarking Best Practices\")\n\n1. **Benchmark Before and After Optimizations**\n   - Run benchmarks before making changes to establish a baseline\n   - Run again after each optimization to measure impact\n2. **Focus on the Largest Bottleneck First**\n   - Prioritize optimizations based on where time is being spent\n   - Small improvements to the critical path yield the greatest results\n3. **Watch for Memory Usage**\n   - Monitor memory consumption alongside performance metrics\n   - High memory usage can lead to degraded performance over time\n4. **Consider Real-World Conditions**\n   - Test with realistic data volumes and event patterns\n   - Include periods of high activity in your benchmark tests\n\n## Advanced Performance Tuning [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#advanced-performance-tuning \"Direct link to Advanced Performance Tuning\")\n\nFor cases where standard optimizations aren't sufficient:\n\n1. **Custom Database Indices**\n   - Create indices tailored to your specific query patterns\n   - Add composite indices for multi-field filters\n2. **Handler Specialization**\n   - Create specialized handlers for high-volume events\n   - Simplify logic for the most common paths\n3. **Speak to the Envio Team**\n   - We can help!\n\nBy regularly benchmarking your indexer and methodically addressing performance bottlenecks, you can achieve significant improvements in indexing speed and efficiency.\n\n* * *\n\n## Loaders Optimization (Deprecated) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#loaders-optimization-deprecated \"Direct link to Loaders Optimization (Deprecated)\")\n\n**File:** `Advanced/loaders.md`\n\nwarning\n\nLoaders are a predecessor of Preload Optimization. We recommend using Preload Optimization instead of loaders. This guide is kept for historical purposes.\n\n## What Are Loaders? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#what-are-loaders \"Direct link to What Are Loaders?\")\n\nLoaders were a feature in early versions of HyperIndex that significantly improved database access performance for event handlers.\n\nThey worked by implementing the Preload Optimization - loading required data upfront before processing events.\n\nThe preloaded data would then be available to event handlers through a `loaderReturn` object, eliminating the need for individual database queries during event processing.\n\nCompared to the current Preload Optimization approach, handlers with loaders didn't have the Preload Phase, and always ran once.\n\n```codeBlockLines_e6Vv\nContractName.EventName.handlerWithLoader({\n// The loader function runs before event processing starts\nloader: async ({ event, context }) => {\n    // Load all required data from the database\n    // Return the data needed for event processing\n    return {}; // This will be available in the handler as loaderReturn\n},\n\n// The handler function processes each event with pre-loaded data\nhandler: async ({ event, context, loaderReturn }) => {\n    // Process the event using the data returned by the loader\n},\n});\n\n```\n\n## How It Works? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-it-works-2 \"Direct link to How It Works?\")\n\nFind more information about how Loaders work by reading the Preload Optimization - How It Works? guide. Loaders share the same concept, but with a different API.\n\nFor example, this is how a loader can be turned into a handler with Preload Optimization enabled:\n\n```codeBlockLines_e6Vv\n// Before:\nERC20.Transfer.handlerWithLoader({\nloader: async ({ event, context }) => {\n    // Load sender and receiver accounts efficiently\n    const sender = await context.Account.get(event.params.from);\n    const receiver = await context.Account.get(event.params.to);\n\n    // Return the loaded data to the handler\n    return {\n      sender,\n      receiver,\n    };\n},\n\nhandler: async ({ event, context, loaderReturn }) => {\n    const { sender, receiver } = loaderReturn;\n\n    // Process the transfer with the pre-loaded data\n    // No database lookups needed here!\n},\n});\n\n// After:\nERC20.Transfer.handler(async ({ event, context }) => {\n// Load sender and receiver accounts efficiently\nconst sender = await context.Account.get(event.params.from);\nconst receiver = await context.Account.get(event.params.to);\n\n// To imitate the behavior of the loader,\n// we can use `context.isPreload` to make next code run only once.\n// Note: This is not required, but might be useful for CPU-intensive operations.\nif (context.isPreload) {\n    return;\n}\n\n// Process the transfer with the pre-loaded data\n});\n\n```\n\n* * *\n\n## Logging [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#logging-1 \"Direct link to Logging\")\n\n**File:** `Troubleshoot/logging.mdx`\n\n# Logging in Envio HyperIndex\n\nEffective logging is essential for monitoring your indexer's performance, diagnosing issues, and gathering insights. The Envio indexer uses pino, a high-performance logging library for JavaScript. These logs can be integrated with analytics tools such as Kibana to generate metrics and visualizations.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#table-of-contents-1 \"Direct link to Table of Contents\")\n\n- User Logging - How to implement logging in your event handlers\n- Configuration & Output Formats - Configuring log output and formats\n- Log Levels - Understanding available log levels\n- Troubleshooting - Common issues and solutions\n\n## Users [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#users \"Direct link to Users\")\n\nWhen implementing handlers for your indexer, use the logging functions provided in the context object. These functions allow you to record events and errors at different severity levels.\n\n### Available Logging Methods [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#available-logging-methods \"Direct link to Available Logging Methods\")\n\n- `.log.debug` \\- For detailed debugging information\n- `.log.info` \\- For general information about application flow\n- `.log.warn` \\- For potentially problematic situations\n- `.log.error` \\- For error events that might still allow the application to continue\n\n### Examples by Language [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#examples-by-language \"Direct link to Examples by Language\")\n\n```codeBlockLines_e6Vv\n// Inside your handler\ncontext.log.debug(\n`Processing event with block hash: ${event.blockHash} (debug)`\n);\ncontext.log.info(`Processing event with block hash: ${event.blockHash} (info)`);\ncontext.log.warn(`Potential issue with event: ${event.blockHash} (warn)`);\ncontext.log.error(`Failed to process event: ${event.blockHash} (error)`);\n\n// With exception:\ncontext.log.error(\n`Failed to process event: ${event.blockHash}`,\nnew Error(\"Error processing event\")\n);\n\n// You can also provide an object as the second argument for structured logging:\ncontext.log.info(\"Processing blockchain event\", {\ntype: \"info\",\nextra: \"Additional debugging context\",\ndata: { blockHash: event.blockHash },\n});\n\n```\n\n```codeBlockLines_e6Vv\n// Inside your handler\ncontext.log.debug(\n`Processing event with block hash: ${event.blockHash} (debug)`\n);\ncontext.log.info(`Processing event with block hash: ${event.blockHash} (info)`);\ncontext.log.warn(`Potential issue with event: ${event.blockHash} (warn)`);\ncontext.log.error(`Failed to process event: ${event.blockHash} (error)`);\n\n// With exception:\ncontext.log.error(\n`Failed to process event: ${event.blockHash}`,\nnew Error(\"Error processing event\")\n);\n\n// You can also provide an object as the second argument for structured logging:\ncontext.log.info(\"Processing blockchain event\", {\ntype: \"info\",\nextra: \"Additional debugging context\",\ndata: { blockHash: event.blockHash },\n});\n\n```\n\n```codeBlockLines_e6Vv\n// Inside your handler\nexception ExampleException(string) // Example of an exception\n\n// Basic string logging\ncontext.log.debug(`Processing event with block hash: ${event.blockHash} (debug)`)\ncontext.log.info(`Processing event with block hash: ${event.blockHash} (info)`)\ncontext.log.warn(`Potential issue with event: ${event.blockHash} (warn)`)\ncontext.log.error(`Failed to process event: ${event.blockHash} (error)`)\n\n// With exception:\ncontext.log.errorWithExn(\n`Failed to process event: ${event.blockHash}`,\nExampleException(\"Error processing event\")\n)\n\n// You can also provide an object as the second argument for structured logging:\ncontext.log.info(\"Processing blockchain event\", ~params={\n\"type\": \"info\",\n\"extra\": \"Additional debugging context\",\n\"data\": { \"blockHash\": event.blockHash },\n});\n\n```\n\n## Metrics, Debugging, and Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#metrics-debugging-and-troubleshooting \"Direct link to Metrics, Debugging, and Troubleshooting\")\n\nThe Envio indexer provides flexible logging configurations to suit different environments and use cases.\n\n### Output Formats [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#output-formats \"Direct link to Output Formats\")\n\nThe default output format is human-readable with color-coded log levels ( `console-pretty`). You can modify the output format using environment variables:\n\n```codeBlockLines_e6Vv\n# Available log strategies\nLOG_STRATEGY=\"console-pretty\"  # Default: Human-readable logs with colors in terminal\nLOG_STRATEGY=\"ecs-file\"        # ECS format logs to file (standard for Elastic Stack)\nLOG_STRATEGY=\"ecs-console\"     # ECS format logs to console\nLOG_STRATEGY=\"file-only\"       # Logs to file in Pino format (most efficient)\nLOG_STRATEGY=\"console-raw\"     # Raw Pino format logs to console\nLOG_STRATEGY=\"both-prettyconsole\"  # Pretty logs to console, Pino format to file\n\n# Specify log file location when using file output\nLOG_FILE=\"\"\n\n```\n\nFor production environments or detailed analytics, consider integrating logs with Kibana or similar tools. We're developing Kibana dashboards for self-hosting and UI dashboards for our hosting solution. If you have specific dashboard requirements, please contact us on Discord.\n\n## Developer Logging [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#developer-logging \"Direct link to Developer Logging\")\n\n### Log Levels [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#log-levels \"Direct link to Log Levels\")\n\nThe indexer supports the following log levels in ascending order of severity:\n\n```codeBlockLines_e6Vv\n- trace     # Most verbose level, detailed tracing information\n- debug     # Debugging information for developers\n- info      # General information about system operation\n- udebug    # User-level debug logs\n- uinfo     # User-level info logs\n- uwarn     # User-level warning logs\n- uerror    # User-level error logs\n- warn      # System warning logs\n- error     # System error logs\n- fatal     # Critical errors causing system shutdown\n\n```\n\n> **Note**: Log levels prefixed with `u` (like `udebug`) are user-level logs emitted from the context for handlers or loaders.\n\n### Configuring Log Levels [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuring-log-levels \"Direct link to Configuring Log Levels\")\n\nSet log levels using these environment variables:\n\n```codeBlockLines_e6Vv\nLOG_LEVEL=\"info\"      # Controls log level for console output (default: \"info\")\nFILE_LOG_LEVEL=\"trace\"  # Controls log level for file output (default: \"trace\")\n\n```\n\nExample:\n\n```codeBlockLines_e6Vv\nexport LOG_LEVEL=\"trace\"  # Set console log level to the most verbose option\n\n```\n\n### Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#troubleshooting-2 \"Direct link to Troubleshooting\")\n\nWhen debugging issues in development:\n\n1. **Terminal UI Issues**: The Terminal UI may sometimes hide errors. To disable it:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   export TUI_OFF=\"true\"  # Or use --tui-off flag when starting\n\n   ```\n\n2. **Log Visibility**: To maintain the Terminal UI while capturing detailed logs:\n\n\n\n\n\n   ```codeBlockLines_e6Vv\n   export LOG_STRATEGY=\"both-prettyconsole\"\n   export LOG_FILE=\"./debug.log\"\n\n   ```\n\n\nThis approach allows you to view essential information in the UI while capturing comprehensive logs for troubleshooting.\n\n* * *\n\n## Common Issues and Troubleshooting [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#common-issues-and-troubleshooting \"Direct link to Common Issues and Troubleshooting\")\n\n**File:** `Troubleshoot/common-issues.md`\n\nThis guide helps you identify and resolve common issues you might encounter when working with Envio HyperIndex. If you don't find a solution to your problem here, please join our Discord community for additional support.\n\n## Table of Contents [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#table-of-contents-2 \"Direct link to Table of Contents\")\n\n- Setup and Configuration Issues\n  - Module Not Found Errors\n  - Smart Contract Updates\n  - Node.js Version Compatibility\n  - PNPM Version Compatibility\n- Runtime Issues\n  - Indexer Start Block Issues\n  - Tables Not Registered in Hasura\n  - RPC-Related Issues\n- Infrastructure Conflicts\n  - Local Postgres Conflicts\n\n## Setup and Configuration Issues [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#setup-and-configuration-issues \"Direct link to Setup and Configuration Issues\")\n\n### Cannot find module errors on `pnpm start` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#cannot-find-module-errors-on-pnpm-start \"Direct link to cannot-find-module-errors-on-pnpm-start\")\n\n**Problem:** Errors like `Cannot find module` when starting your indexer indicate missing generated files.\n\n**Cause:** The indexer cannot find necessary files, typically because the code generation step was skipped after cloning the repository.\n\n**Solution:**\n\n1. Delete the `generated` folder if it exists\n2. Run the code generation command:\n\n```codeBlockLines_e6Vv\npnpm codegen\n\n```\n\n> **Important:** Always run `pnpm codegen` immediately after cloning an indexer repository using Envio.\n\n### Smart contract updated after the initial codegen [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#smart-contract-updated-after-the-initial-codegen \"Direct link to Smart contract updated after the initial codegen\")\n\n**Problem:** Changes to smart contracts aren't reflected in your indexer.\n\n**Cause:** When smart contracts are modified after initial setup, the ABIs need to be regenerated and the indexer needs to be updated.\n\n**Solution:**\n\n1. Re-export smart contract ABIs (example using Hardhat):\n\n```codeBlockLines_e6Vv\ncd contracts/\npnpm hardhat export-abi\n\n```\n\n2. Verify that the ABI directory in `config.yaml` points to the correct location where ABIs were freshly generated\n3. Run codegen again:\n\n```codeBlockLines_e6Vv\npnpm codegen\n\n```\n\n### Using the correct version of Node.js [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-the-correct-version-of-nodejs \"Direct link to Using the correct version of Node.js\")\n\n**Problem:** Compatibility issues or unexpected errors when running the indexer.\n\n**Solution:** Envio requires Node.js v22 or newer. If you're using Node.js v16 or older, please update:\n\n```codeBlockLines_e6Vv\n# Using nvm (recommended)\nnvm install 22\nnvm use 22\n\n# Or download directly from https://nodejs.org/\n\n```\n\n### Using the correct version of PNPM [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-the-correct-version-of-pnpm \"Direct link to Using the correct version of PNPM\")\n\n**Problem:** Package management issues or build failures.\n\n**Solution:** Envio requires pnpm v8 or newer. If you're using v7.8 or older, please update:\n\n```codeBlockLines_e6Vv\n# Update pnpm\nnpm install -g pnpm@latest\n\n# Verify version\npnpm --version\n\n```\n\n## Runtime Issues [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#runtime-issues \"Direct link to Runtime Issues\")\n\n### Indexer not starting at the specified start block [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexer-not-starting-at-the-specified-start-block \"Direct link to Indexer not starting at the specified start block\")\n\n**Problem:** The indexer runs but doesn't start from the `start_block` defined in your configuration.\n\n**Cause:** This typically happens when the indexer's state is persisted from a previous run.\n\n**Solution:** Stop the indexer completely before restarting:\n\n```codeBlockLines_e6Vv\n# First stop the indexer\npnpm envio stop\n\n# Then restart it\npnpm dev\n\n```\n\n### Tables for entities are not registered on Hasura [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#tables-for-entities-are-not-registered-on-hasura \"Direct link to Tables for entities are not registered on Hasura\")\n\n**Problem:** Entity tables defined in your schema don't appear in Hasura.\n\n**Cause:** Database schema might be out of sync with your entity definitions.\n\n**Solution:** Reset the indexer environment to recreate the necessary tables:\n\n```codeBlockLines_e6Vv\n# Stop the indexer\npnpm envio stop\n\n# Restart it (this will recreate tables)\npnpm dev\n\n```\n\n### RPC-Related issues [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rpc-related-issues \"Direct link to RPC-Related issues\")\n\n**Problem:** The indexer shows warnings such as:\n\n- `Error getting events, will retry after backoff time`\n- `Failed Combined Query Filter from block`\n- `Issue while running fetching batch of events from the RPC. Will wait ()ms and try again.`\n\n**Cause:** Issues connecting to or retrieving data from the blockchain RPC endpoint.\n\n**Solutions:**\n\n1. **Recommended:** Use HyperSync if your network is supported, as it provides better performance and reliability\n\n2. If HyperSync isn't an option, try:\n   - Using a different RPC endpoint in your `config.yaml`\n   - Verifying your RPC endpoint is stable and has archive data if needed\n   - Checking if your RPC provider has rate limits you're exceeding\n\n```codeBlockLines_e6Vv\n# Example of updating RPC in config.yaml\nnetwork:\n# Replace with a more reliable RPC\nrpc_url: \"https://mainnet.infura.io/v3/YOUR-API-KEY\"\n\n```\n\n## Infrastructure Conflicts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#infrastructure-conflicts \"Direct link to Infrastructure Conflicts\")\n\n### Postgres running locally [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#postgres-running-locally \"Direct link to Postgres running locally\")\n\n**Problem:** Conflicts when Postgres is already running on port 5432.\n\n**Cause:** The default Postgres port (5432) is already in use by another instance.\n\n**Solution:** Configure Envio to use a different port by setting environment variables:\n\n```codeBlockLines_e6Vv\n# Option 1: Set variables inline\nENVIO_PG_PORT=5433 pnpm codegen\nENVIO_PG_PORT=5433 pnpm dev\n\n# Option 2: Export variables for the session\nexport ENVIO_PG_PORT=5433\npnpm codegen\npnpm dev\n\n```\n\nYou can further customize your Postgres connection with these additional environment variables:\n\n- `ENVIO_PG_PASSWORD`: Set a custom password\n- `ENVIO_PG_USER`: Set a custom username\n- `ENVIO_PG_DATABASE`: Set a custom database name\n\n* * *\n\n## Envio Error Codes [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-error-codes \"Direct link to Envio Error Codes\")\n\n**File:** `Troubleshoot/error-codes.md`\n\nThis guide provides a comprehensive list of error codes you may encounter when using Envio HyperIndex. Each error includes an explanation and recommended actions to resolve the issue.\n\n## How to Use This Guide [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-to-use-this-guide \"Direct link to How to Use This Guide\")\n\nWhen encountering an error in Envio, you'll receive an error code (like `EE101`). Use this guide to:\n\n1. Locate the error code by category or by searching for the specific code\n2. Read the explanation to understand what caused the error\n3. Follow the recommended steps to resolve the issue\n\nIf you can't resolve an error after following the suggestions, please reach out for support on our Discord community.\n\n## Error Categories [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#error-categories \"Direct link to Error Categories\")\n\nEnvio error codes are categorized by their first digits:\n\n| Error Code Range | Category | Description |\n| --- | --- | --- |\n| `EE100` \\- `EE199` | Configuration File | Issues with the configuration file format, parameters, or values |\n| `EE200` \\- `EE299` | Schema File | Problems with GraphQL schema definition |\n| `EE300` \\- `EE399` | ABI File | Issues with smart contract ABI files or event definitions |\n| `EE400` \\- `EE499` | Initialization Arguments | Problems with initialization parameters or directories |\n| `EE500` \\- `EE599` | Event Handling | Issues with event handler files or functions |\n| `EE600` \\- `EE699` | Event Syncing | Problems with event synchronization process |\n| `EE700` \\- `EE799` | Database Functions | Issues with database operations |\n| `EE800` \\- `EE899` | Database Migrations | Problems with database schema migrations or tracking |\n| `EE900` \\- `EE999` | Contract Interface | Issues related to smart contract interfaces |\n| `EE1000` \\- `EE1099` | Chain Manager | Problems with blockchain network connections |\n| `EE1100` \\- `EE1199` | Lazy Loader | General errors related to the loading process |\n\n## Initialization-Related Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialization-related-errors \"Direct link to Initialization-Related Errors\")\n\n### Configuration File Errors (EE100-EE111) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-file-errors-ee100-ee111 \"Direct link to Configuration File Errors (EE100-EE111)\")\n\n#### `EE100`: Invalid Addresses [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee100-invalid-addresses \"Direct link to ee100-invalid-addresses\")\n\n**Issue**: The configuration file contains invalid smart contract addresses.\n\n**Solution**: Verify all contract addresses in your configuration file. Ensure they:\n\n- Match the correct format for the blockchain (0x-prefixed for EVM chains)\n- Are valid addresses for the specified network\n- Have the correct length (42 characters including '0x' for EVM)\n\n#### `EE101`: Non-Unique Contract Names [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee101-non-unique-contract-names \"Direct link to ee101-non-unique-contract-names\")\n\n**Issue**: The configuration file contains duplicate contract names.\n\n**Solution**: Each contract in your configuration must have a unique name. Review your config.yaml and ensure all contract names are unique.\n\n#### `EE102`: Reserved Words in Configuration File [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee102-reserved-words-in-configuration-file \"Direct link to ee102-reserved-words-in-configuration-file\")\n\n**Issue**: Your configuration uses reserved programming words that conflict with Envio's code generation.\n\n**Solution**:\n\n- Review the reserved words list for JavaScript, TypeScript, and ReScript\n- Rename any contract or event names that use reserved words\n- Choose descriptive names that don't conflict with programming languages\n\n#### `EE103`: Parse Event Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee103-parse-event-error \"Direct link to ee103-parse-event-error\")\n\n**Issue**: Envio couldn't parse event signatures in your configuration.\n\n**Solution**:\n\n- Check your event signatures in the configuration file\n- Ensure they match the format in your ABI\n- Refer to the configuration guide for correct event definition syntax\n\n#### `EE104`: Resolve Config Path [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee104-resolve-config-path \"Direct link to ee104-resolve-config-path\")\n\n**Issue**: Envio couldn't find your configuration file at the specified path.\n\n**Solution**:\n\n- Verify that your configuration file exists in the correct directory\n- Ensure the file is named correctly (usually `config.yaml`)\n- Check for file permission issues\n\n#### `EE105`: Deserialize Config [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee105-deserialize-config \"Direct link to ee105-deserialize-config\")\n\n**Issue**: Your configuration file contains invalid YAML syntax.\n\n**Solution**:\n\n- Check your YAML file for syntax errors\n- Ensure proper indentation and structure\n- Validate your YAML using a linter or validator\n\n#### `EE106`: Undefined Network Config [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee106-undefined-network-config \"Direct link to ee106-undefined-network-config\")\n\n**Issue**: No `hypersync_config` or `rpc_config` defined for the network specified in your configuration.\n\n**Solution**:\n\n- Add either a HyperSync or RPC configuration for your network\n- See the HyperSync Data Source or RPC Data Source documentation\n- Example:\n\n\n\n\n\n  ```codeBlockLines_e6Vv\n  network:\n    network_id: 1\n    rpc_config:\n      rpc_url: \"https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY\"\n\n  ```\n\n\n#### `EE108`: Invalid Postgres Database Name [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee108-invalid-postgres-database-name \"Direct link to ee108-invalid-postgres-database-name\")\n\n**Issue**: The Postgres database name provided doesn't meet requirements.\n\n**Solution**: Provide a database name that:\n\n- Begins with a letter or underscore\n- Contains only letters, numbers, and underscores (no spaces)\n- Has a maximum length of 63 characters\n\n#### `EE109`: Incorrect RPC URL Format [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee109-incorrect-rpc-url-format \"Direct link to ee109-incorrect-rpc-url-format\")\n\n**Issue**: The RPC URL in your configuration has an invalid format.\n\n**Solution**:\n\n- Ensure all RPC URLs start with either `http://` or `https://`\n- Verify the URL is correctly formatted and accessible\n- Example: `https://eth-mainnet.g.alchemy.com/v2/YOUR_API_KEY`\n\n#### `EE110`: End Block Not Greater Than Start Block [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee110-end-block-not-greater-than-start-block \"Direct link to ee110-end-block-not-greater-than-start-block\")\n\n**Issue**: Your configuration specifies an end block that is less than or equal to the start block.\n\n**Solution**: If providing an end block, ensure it's greater than the start block:\n\n```codeBlockLines_e6Vv\nstart_block: 10000000\nend_block: 20000000 # Must be greater than start_block\n\n```\n\n#### `EE111`: Invalid Characters in Contract or Event Names [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee111-invalid-characters-in-contract-or-event-names \"Direct link to ee111-invalid-characters-in-contract-or-event-names\")\n\n**Issue**: Contract or event names contain invalid characters.\n\n**Solution**: Use only alphanumeric characters and underscores in contract and event names.\n\n### Schema File Errors (EE200-EE217) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#schema-file-errors-ee200-ee217 \"Direct link to Schema File Errors (EE200-EE217)\")\n\n#### `EE200`: Schema File Read Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee200-schema-file-read-error \"Direct link to ee200-schema-file-read-error\")\n\n**Issue**: Envio couldn't read the schema file.\n\n**Solution**:\n\n- Ensure the schema file exists at the expected location\n- Check file permissions\n- Verify the file isn't corrupted\n\n#### `EE201`: Schema Parse Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee201-schema-parse-error \"Direct link to ee201-schema-parse-error\")\n\n**Issue**: The schema file contains syntax errors.\n\n**Solution**:\n\n- Check for GraphQL syntax errors in your schema.graphql file\n- Ensure all entities and fields are properly defined\n- Validate your GraphQL schema with a schema validator\n\n#### `EE202`: Multiple `@derivedFrom` Directives [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee202-multiple-derivedfrom-directives \"Direct link to ee202-multiple-derivedfrom-directives\")\n\n**Issue**: An entity field has more than one `@derivedFrom` directive.\n\n**Solution**: Use only one `@derivedFrom` directive per entity. Review your schema and remove duplicate directives.\n\n#### `EE203`: Missing Field Argument for `@derivedFrom` [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee203-missing-field-argument-for-derivedfrom \"Direct link to ee203-missing-field-argument-for-derivedfrom\")\n\n**Issue**: A `@derivedFrom` directive is missing the required `field` argument.\n\n**Solution**: Add the `field` argument to your `@derivedFrom` directive:\n\n```codeBlockLines_e6Vv\ntype User {\nid: ID!\norders: [Order!]! @derivedFrom(field: \"user\")\n}\n\n```\n\n#### `EE204`: Invalid `@derivedFrom` Argument [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee204-invalid-derivedfrom-argument \"Direct link to ee204-invalid-derivedfrom-argument\")\n\n**Issue**: The `field` argument in `@derivedFrom` has an invalid value.\n\n**Solution**: Ensure the `field` argument contains a valid string value that matches a field name in the referenced entity.\n\n#### `EE207`: Undefined Type [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee207-undefined-type \"Direct link to ee207-undefined-type\")\n\n**Issue**: The schema contains an undefined type.\n\n**Solution**: Use only supported scalar types or defined entity types:\n\n- `ID`\n- `String`\n- `Int`\n- `Float`\n- `Boolean`\n- `Bytes`\n- `BigInt`\n\n#### `EE208`: Unsupported Nullable Scalars [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee208-unsupported-nullable-scalars \"Direct link to ee208-unsupported-nullable-scalars\")\n\n**Issue**: The schema contains nullable scalar types inside lists.\n\n**Solution**: Use non-nullable scalars in lists by adding `!` after the type:\n\n```codeBlockLines_e6Vv\n# Incorrect\nitems: [String]\n\n# Correct\nitems: [String!]!\n\n```\n\n#### `EE209`: Unsupported Multidimensional Lists [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee209-unsupported-multidimensional-lists \"Direct link to ee209-unsupported-multidimensional-lists\")\n\n**Issue**: The schema contains nullable multidimensional list types.\n\n**Solution**: Ensure inner list types are non-nullable:\n\n```codeBlockLines_e6Vv\n# Incorrect\nmatrix: [[Int]]\n\n# Correct\nmatrix: [[Int!]!]!\n\n```\n\n#### `EE210`: Reserved Words in Schema File [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee210-reserved-words-in-schema-file \"Direct link to ee210-reserved-words-in-schema-file\")\n\n**Issue**: The schema uses reserved programming words.\n\n**Solution**:\n\n- Check the reserved words list\n- Rename any entities or fields using reserved words\n- Choose alternative descriptive names\n\n#### `EE211`: Unsupported Arrays of Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee211-unsupported-arrays-of-entities \"Direct link to ee211-unsupported-arrays-of-entities\")\n\n**Issue**: The schema uses unsupported array syntax for entity relationships.\n\n**Solution**: Use one of the supported methods for entity references as outlined in the schema documentation.\n\n#### `EE212`: Reserved Enum Names [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee212-reserved-enum-names \"Direct link to ee212-reserved-enum-names\")\n\n**Issue**: The schema uses enum names that conflict with Envio's internal enums.\n\n**Solution**: Check the internal reserved types list and rename conflicting enums.\n\n#### `EE213`: Duplicate Enum Values [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee213-duplicate-enum-values \"Direct link to ee213-duplicate-enum-values\")\n\n**Issue**: An enum in the schema contains duplicate values.\n\n**Solution**: Ensure all values within each enum type are unique.\n\n#### `EE214`: Naming Conflicts Between Enums and Entities [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee214-naming-conflicts-between-enums-and-entities \"Direct link to ee214-naming-conflicts-between-enums-and-entities\")\n\n**Issue**: The schema has enums and entities with the same names.\n\n**Solution**: Ensure all enum and entity names are unique within the schema.\n\n#### `EE215`: Incorrectly Placed Directive [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee215-incorrectly-placed-directive \"Direct link to ee215-incorrectly-placed-directive\")\n\n**Issue**: A directive is used in an incorrect location in the schema.\n\n**Solution**: Ensure directives are placed on appropriate schema elements according to GraphQL specifications.\n\n#### `EE216`: Incorrect Directive Parameters [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee216-incorrect-directive-parameters \"Direct link to ee216-incorrect-directive-parameters\")\n\n**Issue**: A directive has incorrect parameter labels or count.\n\n**Solution**: Verify that all directive parameters match the expected format and count.\n\n#### `EE217`: Incorrect Directive Parameter Type [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee217-incorrect-directive-parameter-type \"Direct link to ee217-incorrect-directive-parameter-type\")\n\n**Issue**: A directive parameter has an invalid type.\n\n**Solution**: Ensure parameter values match the expected types for each directive.\n\n### ABI File Errors (EE300-EE305) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#abi-file-errors-ee300-ee305 \"Direct link to ABI File Errors (EE300-EE305)\")\n\n#### `EE300`: Event ABI Parse Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee300-event-abi-parse-error \"Direct link to ee300-event-abi-parse-error\")\n\n**Issue**: Cannot parse the ABI for specified contract events.\n\n**Solution**:\n\n- Verify the ABI file contains valid JSON\n- Ensure the ABI includes all events referenced in your configuration\n- Check for syntax errors in your ABI file\n\n#### `EE301`: Missing ABI File Path [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee301-missing-abi-file-path \"Direct link to ee301-missing-abi-file-path\")\n\n**Issue**: No ABI file path specified for a contract.\n\n**Solution**: Add the `abi_file_path` property in your configuration for each contract:\n\n```codeBlockLines_e6Vv\ncontracts:\n  - name: MyContract\n    abi_file_path: ./abis/MyContract.json\n\n```\n\n#### `EE302`: Invalid ABI File Path [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee302-invalid-abi-file-path \"Direct link to ee302-invalid-abi-file-path\")\n\n**Issue**: The specified ABI file path is invalid or inaccessible.\n\n**Solution**:\n\n- Verify the ABI file exists at the specified path\n- Ensure the path is relative to your project directory\n- Check file permissions\n\n#### `EE303`: Missing Event in ABI [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee303-missing-event-in-abi \"Direct link to ee303-missing-event-in-abi\")\n\n**Issue**: An event referenced in your configuration doesn't exist in the ABI.\n\n**Solution**:\n\n- Ensure the event name matches exactly what's in the ABI\n- Verify the ABI includes all events you want to track\n- If using a human-readable ABI, check event signature formatting\n\n#### `EE304`: Mismatched Event Signature [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee304-mismatched-event-signature \"Direct link to ee304-mismatched-event-signature\")\n\n**Issue**: Event signature in configuration doesn't match the ABI.\n\n**Solution**: Ensure event signatures in your configuration match exactly what's in the ABI file.\n\n#### `EE305`: ABI Config Mismatch [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee305-abi-config-mismatch \"Direct link to ee305-abi-config-mismatch\")\n\n**Issue**: Event parameters in configuration don't match ABI definition.\n\n**Solution**: Verify that event parameters in your configuration match the types and order defined in the ABI.\n\n### Initialization Arguments Errors (EE400-EE402) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#initialization-arguments-errors-ee400-ee402 \"Direct link to Initialization Arguments Errors (EE400-EE402)\")\n\n#### `EE400`: Invalid Directory Name [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee400-invalid-directory-name \"Direct link to ee400-invalid-directory-name\")\n\n**Issue**: A specified directory name contains invalid characters.\n\n**Solution**: Use directory names without special characters like `/`, `\\`, `:`, `*`, `?`, `\"`, \\`\\`, `|`.\n\n#### `EE401`: Directory Already Exists [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee401-directory-already-exists \"Direct link to ee401-directory-already-exists\")\n\n**Issue**: Trying to create a directory that already exists.\n\n**Solution**: Use a different directory name or remove the existing directory if appropriate.\n\n#### `EE402`: Invalid Subgraph ID [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee402-invalid-subgraph-id \"Direct link to ee402-invalid-subgraph-id\")\n\n**Issue**: The subgraph ID for migration is invalid.\n\n**Solution**: Provide a valid subgraph ID that starts with \"Qm\".\n\n## Event-Related Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-related-errors \"Direct link to Event-Related Errors\")\n\n### Event Handling Errors (EE500) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-handling-errors-ee500 \"Direct link to Event Handling Errors (EE500)\")\n\n#### `EE500`: Event Handler File Not Found [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee500-event-handler-file-not-found \"Direct link to ee500-event-handler-file-not-found\")\n\n**Issue**: Envio couldn't find or import the event handler file.\n\n**Solution**:\n\n- Ensure the handler file exists in the correct directory\n- Verify the file path in your configuration\n- Make sure the handler file is compiled correctly\n- Refer to the event handlers documentation for proper setup\n\n### Event Syncing Errors (EE600) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-syncing-errors-ee600 \"Direct link to Event Syncing Errors (EE600)\")\n\n#### `EE600`: Top Level Error During Event Processing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee600-top-level-error-during-event-processing \"Direct link to ee600-top-level-error-during-event-processing\")\n\n**Issue**: An unexpected error occurred while processing events.\n\n**Solution**:\n\n- Check your event handler logic for errors\n- Review recent changes to your indexer\n- If unable to resolve, contact support through Discord with error details\n\n## Database-Related Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#database-related-errors \"Direct link to Database-Related Errors\")\n\nFor database-related errors (EE700-EE808), you can often resolve issues by resetting the database migration:\n\n```codeBlockLines_e6Vv\npnpm envio local db-migrate setup\n\n```\n\n### Database Function Errors (EE700) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#database-function-errors-ee700 \"Direct link to Database Function Errors (EE700)\")\n\n#### `EE700`: Database Row Parse Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee700-database-row-parse-error \"Direct link to ee700-database-row-parse-error\")\n\n**Issue**: Unable to parse rows from the database.\n\n**Solution**:\n\n- Check entity definitions in your schema\n- Verify data types match between schema and database\n- Reset database migrations using the command above\n\n### Database Migration Errors (EE800-EE808) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#database-migration-errors-ee800-ee808 \"Direct link to Database Migration Errors (EE800-EE808)\")\n\n#### `EE800`: Raw Table Creation Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee800-raw-table-creation-error \"Direct link to ee800-raw-table-creation-error\")\n\n**Issue**: Error creating raw events table in database.\n\n**Solution**: Reset database migrations using the command above.\n\n#### `EE801`: Dynamic Contracts Table Creation Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee801-dynamic-contracts-table-creation-error \"Direct link to ee801-dynamic-contracts-table-creation-error\")\n\n**Issue**: Error creating dynamic contracts table.\n\n**Solution**: Reset database migrations using the command above.\n\n#### `EE802`: Entity Tables Creation Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee802-entity-tables-creation-error \"Direct link to ee802-entity-tables-creation-error\")\n\n**Issue**: Error creating entity tables.\n\n**Solution**:\n\n- Check your schema for invalid entity definitions\n- Reset database migrations\n\n#### `EE803`: Tracking Tables Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee803-tracking-tables-error \"Direct link to ee803-tracking-tables-error\")\n\n**Issue**: Error tracking tables in database.\n\n**Solution**: Reset database migrations using the command above.\n\n#### `EE804`: Drop Entity Tables Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee804-drop-entity-tables-error \"Direct link to ee804-drop-entity-tables-error\")\n\n**Issue**: Error dropping entity tables.\n\n**Solution**:\n\n- Check if any other processes are using the database\n- Reset database migrations\n\n#### `EE805`: Drop Tables Except Raw Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee805-drop-tables-except-raw-error \"Direct link to ee805-drop-tables-except-raw-error\")\n\n**Issue**: Error dropping all tables except raw events table.\n\n**Solution**: Reset database migrations using the command above.\n\n#### `EE806`: Clear Metadata Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee806-clear-metadata-error \"Direct link to ee806-clear-metadata-error\")\n\n**Issue**: Error clearing metadata.\n\n**Solution**:\n\n- Reset database migrations\n- Note: Indexing may still work, but you might have issues querying data in Hasura\n\n#### `EE807`: Table Tracking Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee807-table-tracking-error \"Direct link to ee807-table-tracking-error\")\n\n**Issue**: Error tracking a table in Hasura.\n\n**Solution**:\n\n- Reset database migrations\n- Note: Indexing may still work, but you might have issues querying data in Hasura\n\n#### `EE808`: View Permissions Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee808-view-permissions-error \"Direct link to ee808-view-permissions-error\")\n\n**Issue**: Error setting up view permissions.\n\n**Solution**:\n\n- Reset database migrations\n- Note: Indexing may still work, but you might have issues querying data in Hasura\n\n## Contract-Related Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contract-related-errors \"Direct link to Contract-Related Errors\")\n\n#### `EE900`: Undefined Contract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee900-undefined-contract \"Direct link to ee900-undefined-contract\")\n\n**Issue**: Referencing a contract that isn't defined in configuration.\n\n**Solution**:\n\n- Verify all contract names in your handlers match those in the configuration file\n- Check for typos in contract names\n\n#### `EE901`: Interface Mapping Error [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee901-interface-mapping-error \"Direct link to ee901-interface-mapping-error\")\n\n**Issue**: Contract name not found in interface mapping (unexpected internal error).\n\n**Solution**: Contact support through Discord for assistance.\n\n## Network-Related Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#network-related-errors \"Direct link to Network-Related Errors\")\n\n#### `EE1000`: Undefined Chain [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee1000-undefined-chain \"Direct link to ee1000-undefined-chain\")\n\n**Issue**: Using a chain ID that isn't defined or supported.\n\n**Solution**:\n\n- Use a valid chain ID in your configuration file\n- Check if the network is supported by Envio\n- Verify chain ID matches the intended network\n\n## General Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#general-errors \"Direct link to General Errors\")\n\n#### `EE1100`: Promise Timeout [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ee1100-promise-timeout \"Direct link to ee1100-promise-timeout\")\n\n**Issue**: A long-running operation timed out.\n\n**Solution**:\n\n- Check network connectivity\n- Verify RPC endpoint performance\n- Consider increasing timeouts if possible\n- If persists, contact support through Discord\n\n* * *\n\n## Reserved Words in Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#reserved-words-in-envio \"Direct link to Reserved Words in Envio\")\n\n**File:** `Troubleshoot/reserved-words.md`\n\n## Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-4 \"Direct link to Overview\")\n\nWhen creating your Envio indexer, certain words cannot be used in entity names, field names, contract names, or event names because they are reserved by the underlying programming languages or by Envio itself. Using these reserved words will trigger validation errors (such as `EE102` for configuration files or `EE210` for schema files).\n\nReserved words in Envio are taken from JavaScript, TypeScript, and ReScript because Envio generates code in these languages to power your indexer. Using these reserved words would create syntax conflicts in the generated code.\n\n## Why This Matters [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#why-this-matters \"Direct link to Why This Matters\")\n\nWhen you define names in your:\n\n- `config.yaml` file (for contracts and events)\n- `schema.graphql` file (for entities and fields)\n\nEnvio automatically generates code based on these names. If you use reserved words, the generated code will contain syntax errors and will not compile, causing your indexer to fail.\n\n## Common Error Scenarios [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#common-error-scenarios \"Direct link to Common Error Scenarios\")\n\nIf you use reserved words, you'll encounter these errors:\n\n- **Error `EE102`**: Reserved words in the configuration file\n- **Error `EE210`**: Reserved words in the schema file\n- **Error `EE212`**: Reserved enum names that conflict with Envio internal types\n\n## How to Fix Reserved Word Errors [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#how-to-fix-reserved-word-errors \"Direct link to How to Fix Reserved Word Errors\")\n\nWhen you encounter these errors, you need to rename the offending identifiers:\n\n1. Identify which names in your configuration or schema are using reserved words\n2. Choose alternative names that aren't reserved\n3. Update all references to these names in your code\n4. Run codegen again to regenerate the code\n\n### Example Problem [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-problem \"Direct link to Example Problem\")\n\n```codeBlockLines_e6Vv\n# In config.yaml\ncontracts:\n  - name: class # Error: 'class' is a reserved word in JavaScript\n    abi_file_path: ./abis/MyContract.json\n\n```\n\n```codeBlockLines_e6Vv\n# In schema.graphql\ntype interface { # Error: 'interface' is a reserved word in JavaScript and TypeScript\nid: ID!\nname: String!\n}\n\n```\n\n### Example Solution [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-solution \"Direct link to Example Solution\")\n\n```codeBlockLines_e6Vv\n# Fixed config.yaml\ncontracts:\n  - name: ClassContract # Good: Not a reserved word\n    abi_file_path: ./abis/MyContract.json\n\n```\n\n```codeBlockLines_e6Vv\n# Fixed schema.graphql\ntype UserInterface { # Good: Not a reserved word\nid: ID!\nname: String!\n}\n\n```\n\n## Tips for Avoiding Reserved Word Conflicts [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#tips-for-avoiding-reserved-word-conflicts \"Direct link to Tips for Avoiding Reserved Word Conflicts\")\n\n- Use camelCase or PascalCase for naming (e.g., `userAccount` instead of `class`)\n- Add a prefix or suffix to potentially conflicting names (e.g., `userInterface` instead of `interface`)\n- Use domain-specific terms that are less likely to be programming keywords\n- When in doubt, check against the lists below before finalizing your schema or configuration\n\n## Complete List of Reserved Words [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#complete-list-of-reserved-words \"Direct link to Complete List of Reserved Words\")\n\n### JavaScript Reserved Words [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#javascript-reserved-words \"Direct link to JavaScript Reserved Words\")\n\nThese keywords cannot be used as identifiers in your Envio configuration or schema:\n\n```codeBlockLines_e6Vv\nabstract, arguments, await, boolean, break, byte, case, catch, char,\nclass, const, continue, debugger, default, delete, do, double, else,\nenum, eval, export, extends, false, final, finally, float, for, function,\ngoto, if, implements, import, in, instanceof, int, interface, let, long,\nnative, new, null, package, private, protected, public, return, short,\nstatic, super, switch, synchronized, this, throw, throws, transient, true,\ntry, typeof, var, void, volatile, while, with, yield\n\n```\n\n### TypeScript Reserved Words [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#typescript-reserved-words \"Direct link to TypeScript Reserved Words\")\n\nIn addition to JavaScript keywords, these TypeScript-specific keywords are also reserved:\n\n```codeBlockLines_e6Vv\nany, as, boolean, break, case, catch, class, const, constructor, continue,\ndeclare, default, delete, do, else, enum, export, extends, false, finally,\nfor, from, function, get, if, implements, import, in, instanceof, interface,\nlet, module, new, null, number, of, package, private, protected, public,\nrequire, return, set, static, string, super, switch, symbol, this, throw,\ntrue, try, type, typeof, var, void, while, with, yield\n\n```\n\n### ReScript Reserved Words [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#rescript-reserved-words \"Direct link to ReScript Reserved Words\")\n\nThese ReScript-specific keywords are also reserved:\n\n```codeBlockLines_e6Vv\nand, as, assert, constraint, else, exception, external, false, for, if, in,\ninclude, lazy, let, module, mutable, of, open, rec, switch, true, try, type,\nwhen, while, with\n\n```\n\n### Envio Internal Reserved Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#envio-internal-reserved-types \"Direct link to Envio Internal Reserved Types\")\n\nThese types are used internally by Envio and cannot be used as enum or entity names:\n\n```codeBlockLines_e6Vv\nEVENT_TYPE\nCONTRACT_TYPE\n\n```\n\n## Best Practices [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#best-practices-5 \"Direct link to Best Practices\")\n\n1. **Use descriptive names** that are unlikely to be programming keywords\n2. **Check these lists** before finalizing your schema design\n3. **Run validation early** with `pnpm codegen` to catch issues before spending time on implementation\n4. **Use prefixes for domain entities** (e.g., `TokenTransfer` instead of `Transfer`)\n\nIf you encounter persistent issues with reserved words or need help refactoring your schema to avoid them, please reach out for support on our Discord community.\n\n* * *\n\n## Any EVM with RPC 🐌 [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#any-evm-with-rpc- \"Direct link to Any EVM with RPC 🐌\")\n\n**File:** `supported-networks/any-evm-with-rpc.md`\n\n* * *\n\n## Local network - Anvil [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#local-network---anvil \"Direct link to Local network - Anvil\")\n\n**File:** `supported-networks/local-anvil.md`\n\n* * *\n\n## Local network - Hardhat [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#local-network---hardhat \"Direct link to Local network - Hardhat\")\n\n**File:** `supported-networks/local-hardhat.md`\n\n* * *\n\n## Arbitrum [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#arbitrum \"Direct link to Arbitrum\")\n\n**File:** `supported-networks/arbitrum.md`\n\n## Indexing Arbitrum Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-arbitrum-data-with-envio \"Direct link to Indexing Arbitrum Data with Envio\")\n\n| **Field** | **Value** |\n| --- | --- |\n| **Arbitrum Chain ID** | 42161 |\n| **HyperSync URL Endpoint** | [https://arbitrum.hypersync.xyz](https://arbitrum.hypersync.xyz/) or [https://42161.hypersync.xyz](https://42161.hypersync.xyz/) |\n| **HyperRPC URL Endpoint** | [https://arbitrum.rpc.hypersync.xyz](https://arbitrum.rpc.hypersync.xyz/) or [https://42161.rpc.hypersync.xyz](https://42161.rpc.hypersync.xyz/) |\n\n### Defining Network Configurations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#defining-network-configurations \"Direct link to Defining Network Configurations\")\n\n```codeBlockLines_e6Vv\nname: IndexerName # Specify indexer name\ndescription: Indexer Description # Include indexer description\nnetworks:\n  - id: 42161 # Arbitrum\n    start_block: START_BLOCK_NUMBER  # Specify the starting block\n    contracts:\n      - name: ContractName\n        address:\n         - \"0xYourContractAddress1\"\n         - \"0xYourContractAddress2\"\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Event # Specify event\n          - event: Event\n\n```\n\nWith these steps completed, your application will be set to efficiently index Arbitrum data using Envio’s blockchain indexer.\n\nFor more information on how to set up your config, define a schema, and write event handlers, refer to the guides section in our documentation.\n\n### Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#support \"Direct link to Support\")\n\nCan’t find what you’re looking for or need support? Reach out to us on Discord; we’re always happy to help!\n\n* * *\n\n## Eth [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#eth \"Direct link to Eth\")\n\n**File:** `supported-networks/eth.md`\n\n## Indexing Eth Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-eth-data-with-envio \"Direct link to Indexing Eth Data with Envio\")\n\n| **Field** | **Value** |\n| --- | --- |\n| **Eth Chain ID** | 1 |\n| **HyperSync URL Endpoint** | [https://eth.hypersync.xyz](https://eth.hypersync.xyz/) or [https://1.hypersync.xyz](https://1.hypersync.xyz/) |\n| **HyperRPC URL Endpoint** | [https://eth.rpc.hypersync.xyz](https://eth.rpc.hypersync.xyz/) or [https://1.rpc.hypersync.xyz](https://1.rpc.hypersync.xyz/) |\n\n### Defining Network Configurations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#defining-network-configurations-1 \"Direct link to Defining Network Configurations\")\n\n```codeBlockLines_e6Vv\nname: IndexerName # Specify indexer name\ndescription: Indexer Description # Include indexer description\nnetworks:\n  - id: 1 # Eth\n    start_block: START_BLOCK_NUMBER  # Specify the starting block\n    contracts:\n      - name: ContractName\n        address:\n         - \"0xYourContractAddress1\"\n         - \"0xYourContractAddress2\"\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Event # Specify event\n          - event: Event\n\n```\n\nWith these steps completed, your application will be set to efficiently index Eth data using Envio’s blockchain indexer.\n\nFor more information on how to set up your config, define a schema, and write event handlers, refer to the guides section in our documentation.\n\n### Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#support-1 \"Direct link to Support\")\n\nCan’t find what you’re looking for or need support? Reach out to us on Discord; we’re always happy to help!\n\n* * *\n\n## Optimism [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#optimism \"Direct link to Optimism\")\n\n**File:** `supported-networks/optimism.md`\n\n## Indexing Optimism Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-optimism-data-with-envio \"Direct link to Indexing Optimism Data with Envio\")\n\n| **Field** | **Value** |\n| --- | --- |\n| **Optimism Chain ID** | 10 |\n| **HyperSync URL Endpoint** | [https://optimism.hypersync.xyz](https://optimism.hypersync.xyz/) or [https://10.hypersync.xyz](https://10.hypersync.xyz/) |\n| **HyperRPC URL Endpoint** | [https://optimism.rpc.hypersync.xyz](https://optimism.rpc.hypersync.xyz/) or [https://10.rpc.hypersync.xyz](https://10.rpc.hypersync.xyz/) |\n\n### Defining Network Configurations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#defining-network-configurations-2 \"Direct link to Defining Network Configurations\")\n\n```codeBlockLines_e6Vv\nname: IndexerName # Specify indexer name\ndescription: Indexer Description # Include indexer description\nnetworks:\n  - id: 10 # Optimism\n    start_block: START_BLOCK_NUMBER  # Specify the starting block\n    contracts:\n      - name: ContractName\n        address:\n         - \"0xYourContractAddress1\"\n         - \"0xYourContractAddress2\"\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Event # Specify event\n          - event: Event\n\n```\n\nWith these steps completed, your application will be set to efficiently index Optimism data using Envio’s blockchain indexer.\n\nFor more information on how to set up your config, define a schema, and write event handlers, refer to the guides section in our documentation.\n\n### Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#support-2 \"Direct link to Support\")\n\nCan’t find what you’re looking for or need support? Reach out to us on Discord; we’re always happy to help!\n\n* * *\n\n## Polygon [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#polygon \"Direct link to Polygon\")\n\n**File:** `supported-networks/polygon.md`\n\n## Indexing Polygon Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-polygon-data-with-envio \"Direct link to Indexing Polygon Data with Envio\")\n\n| **Field** | **Value** |\n| --- | --- |\n| **Polygon Chain ID** | 137 |\n| **HyperSync URL Endpoint** | [https://polygon.hypersync.xyz](https://polygon.hypersync.xyz/) or [https://137.hypersync.xyz](https://137.hypersync.xyz/) |\n| **HyperRPC URL Endpoint** | [https://polygon.rpc.hypersync.xyz](https://polygon.rpc.hypersync.xyz/) or [https://137.rpc.hypersync.xyz](https://137.rpc.hypersync.xyz/) |\n\n### Defining Network Configurations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#defining-network-configurations-3 \"Direct link to Defining Network Configurations\")\n\n```codeBlockLines_e6Vv\nname: IndexerName # Specify indexer name\ndescription: Indexer Description # Include indexer description\nnetworks:\n  - id: 137 # Polygon\n    start_block: START_BLOCK_NUMBER  # Specify the starting block\n    contracts:\n      - name: ContractName\n        address:\n         - \"0xYourContractAddress1\"\n         - \"0xYourContractAddress2\"\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Event # Specify event\n          - event: Event\n\n```\n\nWith these steps completed, your application will be set to efficiently index Polygon data using Envio’s blockchain indexer.\n\nFor more information on how to set up your config, define a schema, and write event handlers, refer to the guides section in our documentation.\n\n### Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#support-3 \"Direct link to Support\")\n\nCan’t find what you’re looking for or need support? Reach out to us on Discord; we’re always happy to help!\n\n* * *\n\n## Indexing on Fuel Network [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-on-fuel-network \"Direct link to Indexing on Fuel Network\")\n\n**File:** `fuel/fuel.md`\n\n## Introduction [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#introduction-12 \"Direct link to Introduction\")\n\nEnvio has expanded its indexing capabilities beyond EVM-compatible blockchains to now fully support the Fuel Network (both mainnet and testnet). This documentation covers how to use Envio's products with Fuel's unique architecture and features. ⛽⚡\n\nFuel offers several advantages as a modular execution layer including:\n\n- Parallel transaction execution\n- State-minimized design\n- UTXO-based architecture\n- Advanced FuelVM capabilities\n\n## HyperIndex for Fuel [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperindex-for-fuel \"Direct link to HyperIndex for Fuel\")\n\nHyperIndex enables developers to easily index and query real-time and historical data on Fuel Network with the same powerful features available for EVM chains.\n\n### Getting Started with Fuel Indexing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#getting-started-with-fuel-indexing \"Direct link to Getting Started with Fuel Indexing\")\n\nYou can start indexing Fuel contracts in two ways:\n\n1. **Quick Start (5-minute tutorial)**: Follow our step-by-step tutorial to create your first Fuel indexer quickly.\n\n2. **No-Code Contract Import**: Use our Contract Import tool to automatically generate configuration and schema files for your Fuel contracts.\n\n\n### Example Fuel Indexers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#example-fuel-indexers \"Direct link to Example Fuel Indexers\")\n\nLooking for inspiration? Check out these indexers built by projects in the Fuel ecosystem:\n\n| Project | Type | GitHub Repository |\n| --- | --- | --- |\n| Spark | Orderbook DEX | github |\n| Mira | AMM DEX | github |\n| Thunder | NFT Marketplace | github |\n| Swaylend | Lending Protocol | github |\n| Greeter | Tutorial | github |\n\n### Features Supported on Fuel [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#features-supported-on-fuel \"Direct link to Features Supported on Fuel\")\n\nHyperIndex for Fuel supports all the core features available in the EVM version:\n\n- ✅ No-code Contract Import\n- ✅ Dynamic Contracts / Factory Tracking\n- ✅ Testing Framework\n- ✅ Hosted Service\n- ✅ Wildcard Indexing\n\n## Fuel-Specific Event Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#fuel-specific-event-types \"Direct link to Fuel-Specific Event Types\")\n\n### Understanding Fuel's Event Model [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#understanding-fuels-event-model \"Direct link to Understanding Fuel's Event Model\")\n\nFuel's event model differs significantly from EVM. Instead of predefined events, Fuel uses a more flexible approach with various receipt types that can be indexed.\n\n### LOG\\_DATA Receipts (Primary Event Type) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#log_data-receipts-primary-event-type \"Direct link to LOG_DATA Receipts (Primary Event Type)\")\n\nThe most common event type in Fuel is the `LOG_DATA` receipt, created by the `log` instruction in Sway contracts.\n\nUnlike Solidity's `emit` which requires predefined event structures, Sway's `log` function allows passing any data, providing greater flexibility.\n\n#### Configuration Example: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#configuration-example \"Direct link to Configuration Example:\")\n\n```codeBlockLines_e6Vv\necosystem: fuel\nnetwork:\nname: \"fuel_testnet\"\n\ncontracts:\n  - name: SwayContract\n    abi_file_path: \"./abis/SwayContract.json\"\n    start_block: 1\n    address: \"0x123...\"\n    events:\n      - name: NewGreeting\n        logId: \"8500535089865083573\"\n\n```\n\nThe `logId` is a unique identifier for the logged struct, which you can find in your contract's ABI file.\n\n#### Auto-detection of logId: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#auto-detection-of-logid \"Direct link to Auto-detection of logId:\")\n\nIf your event name matches the logged struct name in Sway, you can omit the `logId`:\n\n```codeBlockLines_e6Vv\nevents:\n  - name: NewGreeting # Will automatically detect logId if it matches the struct name\n\n```\n\n> **Tip**: Instead of manually configuring events, use the Contract Import tool which automatically detects events and generates the proper configuration.\n\n### Additional Fuel Event Types [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#additional-fuel-event-types \"Direct link to Additional Fuel Event Types\")\n\nFuel allows indexing several additional receipt types not available in EVM:\n\n| Event Type | Description | Example Configuration |\n| --- | --- | --- |\n| `Mint` | Triggered when a contract mints tokens | `- name: Mint` |\n| `Burn` | Triggered when a contract burns tokens | `- name: Burn` |\n| `Transfer` | Combines `TRANSFER` and `TRANSFER_OUT` receipts | `- name: Transfer` |\n| `Call` | Triggered when a contract calls another contract | `- name: Call` |\n\n#### Using Custom Names: [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#using-custom-names \"Direct link to Using Custom Names:\")\n\nYou can rename these events while maintaining their type:\n\n```codeBlockLines_e6Vv\nevents:\n  - name: MintMyNft # Custom name\n    type: mint # Actual event type\n\n```\n\n> **Note**: All event types can be used with Wildcard Indexing.\n\n### Transfer Event Specifics [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#transfer-event-specifics \"Direct link to Transfer Event Specifics\")\n\nThe `Transfer` event type combines two Fuel receipt types:\n\n- `TRANSFER`: Emitted when a contract transfers tokens to another contract\n- `TRANSFER_OUT`: Emitted when a contract transfers tokens to a wallet\n\n> **Important**: Transfers between wallets are not included in the `Transfer` event type.\n\n## Event Object Structure in Handlers [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#event-object-structure-in-handlers \"Direct link to Event Object Structure in Handlers\")\n\nWhen handling Fuel events, the event object structure differs from EVM:\n\n```codeBlockLines_e6Vv\n// Example Fuel event handler\nSwayContract.NewGreeting.handler(async ({ event, context }) => {\n// Access event parameters\nconst message = event.params.message;\n\n// Access block information\nconst blockHeight = event.block.height;\nconst blockTime = event.block.time;\nconst blockId = event.block.id;\n\n// Access transaction information\nconst txId = event.transaction.id;\n\n// Access source contract address\nconst sourceContract = event.srcAddress;\n\n// Access log position\nconst logIndex = event.logIndex;\n\n// Store data\ncontext.Greeting.set({\n    id: event.transaction.id,\n    message: message,\n    timestamp: blockTime,\n});\n});\n\n```\n\n## Migration Guide from v2.x.x-fuel [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#migration-guide-from-v2xx-fuel \"Direct link to Migration Guide from v2.x.x-fuel\")\n\nStarting with V2.3, the Fuel indexer has been integrated into the main `envio` package. If you were using the Fuel-specific version ( `envio@2.x.x-fuel`), follow these steps to migrate:\n\n### 1\\. Update Package Version [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-update-package-version \"Direct link to 1. Update Package Version\")\n\n```codeBlockLines_e6Vv\n# Update local dependency\npnpm i envio@latest\n\n# If installed globally\npnpm i -g envio@latest\n\n```\n\n### 2\\. Update Configuration [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-update-configuration \"Direct link to 2. Update Configuration\")\n\nAdd the `ecosystem: fuel` field to your `config.yaml`:\n\n```codeBlockLines_e6Vv\necosystem: fuel # Required for Fuel indexers\nnetwork:\nname: \"fuel_testnet\"\n# other network config...\n\n```\n\n### 3\\. Update Event Handler Code [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-update-event-handler-code \"Direct link to 3. Update Event Handler Code\")\n\nSeveral field names have changed in the event object:\n\n| Old Field | New Field |\n| --- | --- |\n| `event.data.x` | `event.params.x` |\n| `event.time` | `event.block.time` |\n| `event.blockHeight` | `event.block.height` |\n| (none) | `event.block.id` |\n| `event.transactionId` | `event.transaction.id` |\n| `event.contractId` | `event.srcAddress` |\n| `event.receiptIndex` | `event.logIndex` |\n| `event.receiptType` | (removed) |\n\nExample migration:\n\n```codeBlockLines_e6Vv\nSwayContract.NewGreeting.handler(async ({ event, context }) => {\ncontext.Greeting.set({\n-   id: event.data.id,\n-   message: event.data.message,\n-   createdAt: event.time,\n-   blockHeight: event.blockHeight,\n+   id: event.params.id,\n+   message: event.params.message,\n+   createdAt: event.block.time,\n+   blockHeight: event.block.height,\n    transaction: event.transaction.id,\n});\n});\n\n```\n\n> **Note**: If you use loaders, also follow the v1 to v2 migration guide for loader-specific changes.\n\n## HyperFuel [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperfuel \"Direct link to HyperFuel\")\n\nHyperFuel is Envio's low-level data API for the Fuel Network (equivalent to HyperSync for EVM chains).\n\nHyperFuel provides:\n\n- High-performance data access\n- Flexible query capabilities\n- Multiple data formats (Parquet, Arrow, typed data)\n- Complete historical data\n\n### Available Clients [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#available-clients \"Direct link to Available Clients\")\n\nAccess HyperFuel data using any of these clients:\n\n- **Rust**: hyperfuel-client-rust\n- **Python**: hyperfuel-client-python\n- **Node.js**: hyperfuel-client-node\n- **JSON API**: hyperfuel-json-api\n\n### HyperFuel Endpoints [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperfuel-endpoints \"Direct link to HyperFuel Endpoints\")\n\n- **Mainnet**: [https://fuel.hypersync.xyz](https://fuel.hypersync.xyz/)\n- **Testnet**: [https://fuel-testnet.hypersync.xyz](https://fuel-testnet.hypersync.xyz/)\n\nFor detailed information, see the HyperFuel documentation.\n\n## About Fuel Network [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#about-fuel-network \"Direct link to About Fuel Network\")\n\nFuel is an operating system purpose-built for Ethereum rollups with unique architecture focused on:\n\n- **P** arallelization: Execute transactions concurrently for higher throughput\n- **S** tate-minimized execution: Efficient storage and computation model\n- **I** nteroperability: Seamless integration with other blockchain systems\n\nPowered by the FuelVM, Fuel expands Ethereum's capabilities without compromising security or decentralization.\n\n### Resources [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#resources \"Direct link to Resources\")\n\n- Website\n- Twitter\n- Discord\n- Documentation\n\n## Need Help? [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#need-help \"Direct link to Need Help?\")\n\nIf you encounter any issues with Fuel indexing, please:\n\n1. Check our Troubleshooting guides\n2. Join our Discord for community support\n3. Create an issue in our GitHub repository\n\n* * *\n\n## Licensing [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#licensing \"Direct link to Licensing\")\n\n**File:** `licensing.md`\n\n## TL;DR [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#tldr \"Direct link to TL;DR\")\n\n- Envio's licensing reflects open source ethos but is not OSI recognized.\n- Developers can use Envio's services without vendor lock-in, either by self-hosting or specifying an RPC URL.\n- The generated code is open and public\n- Our license allows self-hosting but restricts third-party competition with Envio's hosted service.\n- Envio may consider open-sourcing in the future but prioritizes stakeholder interests and market traction.\n\n## Our position [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#our-position \"Direct link to Our position\")\n\nWe're devs and we value OS ethos too, that's why our licensing mirrors a lot of the benefits from open source licensing however Envio and its products do not use a recognized open source license by the OSI, we are however public and open and our licensing reflects this.\n\nOur future business model lies in our hosted service and HyperSync requests and so we are protecting this, but to ensure continuity and no vendor lock-in, developers are able to run and develop on their indexer without either. Either by self-hosting, which our license permits, or by specifying an RPC URL in their indexer configuration and thus bypassing HyperSync.\n\nEnvio is in its formative stages and though we may look to open-source the software in the future we are dedicated to ensuring the best interests of all stakeholders. Going open source is somewhat of a one-way function and it is easier to go open source than to proverbially go \"closed source\". Once we have gained more market traction we will review our position on going open source.\n\n## HyperIndex End-User License Agreement (EULA) [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#hyperindex-end-user-license-agreement-eula \"Direct link to HyperIndex End-User License Agreement (EULA)\")\n\nThis agreement describes the users' rights and the conditions upon which the Software and Generated Code may be used. The user should review the entire agreement, including any supplemental license terms that accompany the Software since all of the terms are important and together create this agreement that applies to them.\n\n### 1\\. Definitions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#1-definitions \"Direct link to 1. Definitions\")\n\n**Software:** HyperIndex, a copyrightable work created by Envio and licensed under this End User License Agreement (“EULA”).\n\n**Generated Code:** In the context of this license agreement, the term \"generated code\" refers to computer programming code that is produced automatically by the Software based on input provided by the user.\n\n**Licensed Material:** The Software and Generated Code defined here will be collectively referred to as “Licensed Material”.\n\n### 2\\. Installation and User Rights [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#2-installation-and-user-rights \"Direct link to 2. Installation and User Rights\")\n\n**License:** The Software is provided under this EULA. By agreeing to the EULA terms, you are granted the right to install and operate one instance of the Software on your device (referred to as the licensed device), for the use of one individual at a time, on the condition that you adhere to all terms outlined in this agreement.\nThe licensor provides you with a non-exclusive, royalty-free, worldwide license that is non-sublicensable and non-transferable. This license allows you to use the Software subject to the limitations and conditions outlined in this EULA.\nWith one license, the user can only use the Software on a single device.\n\n**Device:** In this agreement, \"device\" refers to a hardware system, whether physical or virtual, equipped with an internal storage device capable of executing the Software. This includes hardware partitions, which are considered individual devices for the purposes of this agreement. Updates may be provided to the Software, and these updates may alter the minimum hardware requirements necessary for the Software. It is the responsibility of users to comply with any changing hardware requirements.\n\n**Updates:** The Software may be updated automatically. With each update, the EULA may be amended, and it is the users' responsibility to comply with the amendments.\n\n**Limitations:** Envio reserves all rights, including those under intellectual property laws, not expressly granted in this agreement. For instance, this license does not confer upon you the right to, and you are prohibited from:\n\n(i) Publishing, copying (other than the permitted backup copy), renting, leasing, or lending the Software;\n\n(ii) Transferring the Software (except as permitted by this agreement);\n\n(iii) Circumventing any technical restrictions or limitations in the Software;\n\n(iv) Using the Software as server Software, for commercial hosting, making the Software available for simultaneous use by multiple users over a network, installing the Software on a server and allowing users to access it remotely, or installing the Software on a device solely for remote user use;\n\n(v) Reverse engineering, decompiling, or disassembling the Software, or attempting to do so, except and only to the extent that the foregoing restriction is (a) permitted by applicable law; (b) permitted by licensing terms governing the use of open-source components that may be included with the Software and\n\n(vi) When using the Software, you may not use any features in any manner that could interfere with anyone else's use of them, or attempt to gain unauthorized access to or use of any service, data, account, or network.\n\nThese limitations apply specifically to the Software and do not extend to the Generated Code. Details regarding the use of the Generated Code, including associated limitations, are provided below.\n\n### 3\\. Use of the Generated Code [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#3-use-of-the-generated-code \"Direct link to 3. Use of the Generated Code\")\n\n**Limitations:** Users can use, copy, distribute, make available, and create derivative works of the Generated Code freely, subject to the limitations and conditions specified below.\n\n(i) The user is prohibited from offering the Generated Code or any software that includes the Generated Code to third parties as a hosted or managed service, where the service grants users access to a significant portion of the Software's features or functionality.\n\n(ii) The user is not permitted to tamper with, alter, disable, or bypass the functionality of the license key in the Software. Additionally, the user may not eliminate or conceal any functionality within the Software that is safeguarded by the license key.\n\n(iii) Any modification, removal, or concealment of licensing, copyright, or other notices belonging to the licensor in the Software is strictly forbidden. The use of the licensor's trademarks is subject to relevant laws.\n\n**Credit:** If the user utilizes the Generated Code to develop and release new software, product, or service, the license agreement for said software, product, or service must include proper credit to HyperIndex.\n\n**Liability:** Envio does not provide any assurance that the Generated Code functions correctly, nor does it assume any responsibility in this regard.\n\nAdditionally, it will be the responsibility of the user to assess whether the Generated Code is suitable for the products and services provided by the user. Envio will not bear any responsibility if the Generated Code is found unsuitable for the products and services provided by the user.\n\n### 4\\. Additional Terms [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#4-additional-terms \"Direct link to 4. Additional Terms\")\n\n**Disclaimer of Warranties and Limitation of Liability:**\n\n(i) Unless expressly undertaken by the Licensor separately, the Licensed Material is provided on an as-is, as-available basis, and the Licensor makes no representations or warranties of any kind regarding the Licensed Material, whether express, implied, statutory, or otherwise. This encompasses, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether known or discoverable. If disclaimers of warranties are not permitted in whole or in part, this disclaimer may not apply to You.\n\n(ii) To the fullest extent permitted by law, under no circumstances shall the Licensor be liable to You under any legal theory (including, but not limited to, negligence) for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising from the use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. If limitations of liability are not permitted in whole or in part, this limitation may not apply to You.\n\n(iii) The disclaimers of warranties and limitations of liability outlined above shall be construed in a manner that most closely approximates an absolute disclaimer and waiver of all liability, to the fullest extent permitted by law.\n\n**Applicable Law and Competent Courts:** This EULA shall be governed by and construed in accordance with the laws of England. The courts of England shall have exclusive jurisdiction to settle any dispute arising out of or in connection with this EULA.\n\n**Additional Agreements:** If the user chooses to use the Software, it may be required to agree to additional terms or agreements outside of this EULA.\n\n* * *\n\n## Terms of Service [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#terms-of-service \"Direct link to Terms of Service\")\n\n**File:** `terms-of-service.md`\n\nLast updated: Feb 06, 2025\n\n_The fine print: Please note these terms are intended to protect us, where adverse outcomes arise we will do our best to use generally accepted reason and logic as our first port of call._\n\n01. **Introduction and Acceptance of Terms**\n\n    Welcome to Envio! By accessing or using our website and services, you agree to abide by these Terms of Service. If you do not agree with any part of these terms, you may not use our services.\n\n02. **Description of Services**\n\n    Envio provides the following services:\n    - A development framework named HyperIndex.\n    - A hosted service for deploying and hosting HyperIndex indexers.\n    - Low-level read-only API accessible as Hypersync and HyperRPC.\n03. **User Accounts**\n\n    Users may create accounts to access and utilize our services. By creating an account, you agree to provide accurate and up-to-date information. You are responsible for maintaining the security of your account credentials.\n\n04. **Payments and Refunds**\n\n    Our services are provided on a paid basis. By subscribing or making a payment, you agree to the applicable fees and billing terms.\n\n    Billing & Payment: Fees are charged upfront based on the selected plan. Any additional unit fees exceeding the included base usage will be billed separately at the end of the monthly billing cycle. Should the additional unit fees exceed a significant threshold, we reserve the right to charge for accrued units at a point in time before the end of the billing cycle. Payments must be made via the payment methods we support.\n\n    No Refunds: All payments are non-refundable. We do not provide refunds or credits for any unused service, partial subscription periods, downgrades, or cancellations.\n\n    Pricing Changes: We reserve the right to modify our pricing at any time. Any changes will be communicated in advance and will take effect at the start of the next billing cycle.\n\n    Cancellation: Subscriptions can be canceled at any time, but cancellations take effect at the end of the current monthly billing cycle for monthly subscriptions. For annual subscriptions, cancellations will take effect at the end of the current annual billing cycle. Previously paid fees will not be refunded.\n\n    Failed Payments & Account Suspension: If a payment fails, we may retry the charge or suspend access to our services until the outstanding amount is settled. Continued failure to make payment may result in account termination.\n\n    By using our services, you acknowledge and agree to these payment terms.\n\n05. **Termination**\n\n    Envio reserves the right to terminate user accounts or suspend access to our services at our discretion. Users will be notified in advance of any such actions unless deemed necessary for security or legal reasons.\n\n06. **Governing Law and Dispute Resolution**\n\n    These terms and any disputes arising from or related to them shall be governed by and construed in accordance with the laws of the United Kingdom. Any disputes shall be resolved through arbitration in the jurisdiction of the United Kingdom.\n\n07. **Changes to Terms**\n\n    Envio reserves the right to update or modify these terms at any time. Changes will be effective upon posting on our website. It is your responsibility to review these terms periodically for any updates. Your continued use of our services after the posting of changes constitutes your acceptance of such changes.\n\n08. **Prohibited Conduct**\n\n    Users are prohibited from engaging in the following conduct while using Envio's website and services:\n    - Violating any applicable laws or regulations.\n    - Transmitting any content that is unlawful, harmful, threatening, abusive, harassing, defamatory, vulgar, obscene, or otherwise objectionable.\n    - Attempting to gain unauthorized access to other users' accounts or to any part of Envio's systems.\n    - Interfering with or disrupting the operation of Envio's website or services.\n    - Engaging in any activity that could harm, disable, overburden, or impair Envio's servers or networks.\n    - Uploading or transmitting any viruses, worms, or other malicious code.\n    - Violating the intellectual property rights of Envio or any third party.\n09. **Privacy Policy**\n\n    Envio is committed to protecting the privacy and security of our users' personal information. Our Privacy Policy outlines how we collect, use, and safeguard user data. By using our website and services, you agree to the terms of our Privacy Policy. Please review our Privacy Policy carefully to understand how we handle your information.\n\n10. **Disclaimer of Warranties**\n\n    Envio's products are provided \"as is\" and without warranties of any kind. We make no guarantees regarding the reliability, availability, or performance of our services. Users utilize our services at their own risk.\n\n11. **Limitation of Liability**\n\n    Envio shall not be liable for any damages arising from the use or inability to use our services, including but not limited to direct, indirect, incidental, consequential, or punitive damages.\n\n12. **Indemnification**\n\n    Users agree to indemnify and hold harmless Envio, its affiliates, and their respective officers, directors, employees, and agents from any claims, damages, losses, or liabilities arising out of their use of our services or violation of these terms.\n\n\n* * *\n\n## Privacy Policy [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#privacy-policy \"Direct link to Privacy Policy\")\n\n**File:** `privacy-policy.md`\n\nLast updated: February 06, 2024\n\n_The fine print: Please note this privacy policy is intended to protect us, we have no intention of using your data for any malicious purposes_\n\nThis Privacy Policy describes Our policies and procedures on the collection, use, and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You.\n\nWe use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy.\n\n## Interpretation and Definitions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#interpretation-and-definitions \"Direct link to Interpretation and Definitions\")\n\n### Interpretation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#interpretation \"Direct link to Interpretation\")\n\nThe words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural.\n\n### Definitions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#definitions-1 \"Direct link to Definitions\")\n\nFor the purposes of this Privacy Policy:\n\n- Account means a unique account created for You to access our Service or parts of our Service.\n\n- Affiliate means an entity that controls, is controlled by or is under common control with a party, where \"control\" means ownership of 50% or more of the shares, equity interest, or other securities entitled to vote for the election of directors or other managing authority.\n\n- Company (referred to as either \"the Company\", \"We\", \"Us\" or \"Our\" in this Agreement) refers to Envio.\n\n- Cookies are small files that are placed on Your computer, mobile device, or any other device by a website, containing the details of Your browsing history on that website among its many uses.\n\n- Country refers to: Cayman Islands\n\n- Device means any device that can access the Service such as a computer, a cellphone, or a digital tablet.\n\n- Personal Data is any information that relates to an identified or identifiable individual.\n\n- Service refers to the Website.\n\n- Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service, or to assist the Company in analyzing how the Service is used.\n\n- Third-party Social Media Service refers to any website or any social network website through which a User can log in or create an account to use the Service.\n\n- Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).\n\n- Website refers to Envio, accessible from [https://envio.dev](https://envio.dev/)\n\n- You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.\n\n\n## Collecting and Using Your Personal Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#collecting-and-using-your-personal-data \"Direct link to Collecting and Using Your Personal Data\")\n\n### Types of Data Collected [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#types-of-data-collected \"Direct link to Types of Data Collected\")\n\n#### Personal Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#personal-data \"Direct link to Personal Data\")\n\nWhile using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:\n\n- Email address\n\n- First name and last name\n\n- Usage Data\n\n\n#### Usage Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#usage-data \"Direct link to Usage Data\")\n\nUsage Data is collected automatically when using the Service.\n\nUsage Data may include information such as Your Device's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data.\n\nWhen You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device's unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data.\n\nWe may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device.\n\n#### Information from Third-Party Social Media Services [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#information-from-third-party-social-media-services \"Direct link to Information from Third-Party Social Media Services\")\n\nThe Company allows You to create an account and log in to use the Service through the following Third-party Social Media Services:\n\nGithub\n\nIf You decide to register through or otherwise grant us access to a Third-Party Social Media Service, We may collect Personal data that is already associated with Your Third-Party Social Media Service's account, such as Your name and Your email address.\n\nYou may also have the option of sharing additional information with the Company through Your Third-Party Social Media Service's account. If You choose to provide such information and Personal Data, during registration or otherwise, You are giving the Company permission to use, share, and store it in a manner consistent with this Privacy Policy.\n\n#### Tracking Technologies and Cookies [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#tracking-technologies-and-cookies \"Direct link to Tracking Technologies and Cookies\")\n\nWe use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:\n\nCookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse cookies, our Service may use Cookies.\nWeb Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).\nCookies can be \"Persistent\" or \"Session\" Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser.\n\nWe use both Session and Persistent Cookies for the purposes set out below:\n\n- Necessary / Essential Cookies\n\n  Type: Session Cookies\n\n  Administered by: Us\n\n  Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services.\n\n- Cookies Policy / Notice Acceptance Cookies\n\n  Type: Persistent Cookies\n\n  Administered by: Us\n\n  Purpose: These Cookies identify if users have accepted the use of cookies on the Website.\n\n- Functionality Cookies\n\n  Type: Persistent Cookies\n\n  Administered by: Us\n\n  Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these cookies is to provide You with a more personal experience and to avoid having to re-enter your preferences every time You use the Website.\n\n  For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy or the Cookies section of our Privacy Policy.\n\n\nBy visiting this site you consent to the use of cookies.\n\n### Use of Your Personal Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#use-of-your-personal-data \"Direct link to Use of Your Personal Data\")\n\nThe Company may use Personal Data for the following purposes:\n\nTo provide and maintain our Service, including monitoring the usage of our Service.\n\nTo manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.\n\nFor the performance of a contract: the development, compliance, and undertaking of the purchase contract for the products, items, or services You have purchased or of any other contract with Us through the Service.\n\nTo contact You: To contact You by email, telephone calls, SMS, or other equivalent forms of electronic communication, such as a mobile application's push notifications regarding updates or informative communications related to the functionalities, products, or contracted services, including the security updates, when necessary or reasonable for their implementation.\n\nTo provide You with news, special offers, and general information about other goods, services, and events that we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.\n\nTo manage Your requests: To attend and manage Your requests to Us.\n\nFor business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.\n\nFor other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns, and evaluating and improving our Service, products, services, marketing, and your experience.\n\nWe may share Your personal information in the following situations:\n\nWith Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to contact You.\nFor business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.\nWith Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners, or other companies that We control or that are under common control with Us.\nWith business partners: We may share Your information with Our business partners to offer You certain products, services, or promotions.\nWith other users: When you share personal information or otherwise interact in public areas with other users, such information may be viewed by all users and may be publicly distributed outside. If You interact with other users or register through a Third-Party Social Media Service, Your contacts on the Third-Party Social Media Service may see Your name, profile, pictures and description of Your activity. Similarly, other users will be able to view descriptions of Your activity, communicate with You, and view Your profile.\nWith Your consent: We may disclose Your personal information for any other purpose with Your consent.\nRetention of Your Personal Data\nThe Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.\n\nThe Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods.\n\nTransfer of Your Personal Data\nYour information, including Personal Data, is processed at the Company's operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country, or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction.\n\nYour consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer.\n\nThe Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information.\n\nDelete Your Personal Data\nYou have the right to delete or request that We assist in deleting the Personal Data that We have collected about You.\n\nOur Service may give You the ability to delete certain information about You from within the Service.\n\nYou may also contact Us to request access to, correct, or delete any personal information that You have provided to Us.\n\nPlease note, however, that We may need to retain certain information when we have a legal obligation or lawful basis to do so.\n\n## Disclosure of Your Personal Data [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#disclosure-of-your-personal-data \"Direct link to Disclosure of Your Personal Data\")\n\n### Business Transactions [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#business-transactions \"Direct link to Business Transactions\")\n\nIf the Company is involved in a merger, acquisition, or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy.\n\n### Law enforcement [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#law-enforcement \"Direct link to Law enforcement\")\n\nUnder certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e.g. a court or a government agency).\n\n### Other legal requirements [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#other-legal-requirements \"Direct link to Other legal requirements\")\n\nThe Company may disclose Your Personal Data in the good faith belief that such action is necessary to:\n\n### Comply with a legal obligation [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#comply-with-a-legal-obligation \"Direct link to Comply with a legal obligation\")\n\nProtect and defend the rights or property of the Company\nPrevent or investigate possible wrongdoing in connection with the Service\nProtect the personal safety of Users of the Service or the public\nProtect against legal liability\nSecurity of Your Personal Data\nThe security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security.\n\n## Children's Privacy [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#childrens-privacy \"Direct link to Children's Privacy\")\n\nOur Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers.\n\n## Links to Other Websites [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#links-to-other-websites \"Direct link to Links to Other Websites\")\n\nOur Service may contain links to other websites that are not operated by Us. If You click on a third-party link, You will be directed to that third-party's site. We strongly advise You to review the Privacy Policy of every site You visit.\n\nWe have no control over and assume no responsibility for the content, privacy policies, or practices of any third party sites or services.\n\n## Changes to this Privacy Policy [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#changes-to-this-privacy-policy \"Direct link to Changes to this Privacy Policy\")\n\nWe may update Our Privacy Policy from time to time. We will update the Privacy Policy by posting the new Privacy Policy on this page.\n\nYou are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.\n\n## Contact Us [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#contact-us \"Direct link to Contact Us\")\n\nIf you have any questions about this Privacy Policy, You can contact us by email: [hello@envio.dev](mailto:hello@envio.dev) or on our discord\n\n* * *\n\n## 0G Newton Testnet [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#0g-newton-testnet \"Direct link to 0G Newton Testnet\")\n\n**File:** `supported-networks/0g-newton-testnet.md`\n\n## Indexing 0G Newton Testnet Data with Envio via RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-0g-newton-testnet-data-with-envio-via-rpc \"Direct link to Indexing 0G Newton Testnet Data with Envio via RPC\")\n\nwarning\n\nRPC as a source is not as fast as HyperSync. It is important in production to source RPC data from reliable sources. We recommend our partners at drpc.org. Below, we have provided a set of free endpoints sourced from chainlist.org. **We don't recommend using these in production** as they may be rate limited. We recommend tweaking the RPC config to accommodate potential rate limiting.\n\nWe suggest getting the latest from chainlist.org.\n\n### Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-5 \"Direct link to Overview\")\n\nEnvio supports 0G Newton Testnet through an RPC-based indexing approach. This method allows you to ingest blockchain data via an RPC endpoint by setting the RPC configuration.\n\n* * *\n\n## Abstract [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#abstract \"Direct link to Abstract\")\n\n**File:** `supported-networks/abstract.md`\n\n## Indexing Abstract Data with Envio [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-abstract-data-with-envio \"Direct link to Indexing Abstract Data with Envio\")\n\n| **Field** | **Value** |\n| --- | --- |\n| **Abstract Chain ID** | 2741 |\n| **HyperSync URL Endpoint** | [https://abstract.hypersync.xyz](https://abstract.hypersync.xyz/) or [https://2741.hypersync.xyz](https://2741.hypersync.xyz/) |\n| **HyperRPC URL Endpoint** | [https://abstract.rpc.hypersync.xyz](https://abstract.rpc.hypersync.xyz/) or [https://2741.rpc.hypersync.xyz](https://2741.rpc.hypersync.xyz/) |\n\n### Defining Network Configurations [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#defining-network-configurations-4 \"Direct link to Defining Network Configurations\")\n\n```codeBlockLines_e6Vv\nname: IndexerName # Specify indexer name\ndescription: Indexer Description # Include indexer description\nnetworks:\n  - id: 2741 # Abstract\n    start_block: START_BLOCK_NUMBER  # Specify the starting block\n    contracts:\n      - name: ContractName\n        address:\n         - \"0xYourContractAddress1\"\n         - \"0xYourContractAddress2\"\n        handler: ./src/EventHandlers.ts\n        events:\n          - event: Event # Specify event\n          - event: Event\n\n```\n\nWith these steps completed, your application will be set to efficiently index Abstract data using Envio’s blockchain indexer.\n\nFor more information on how to set up your config, define a schema, and write event handlers, refer to the guides section in our documentation.\n\n### Support [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#support-4 \"Direct link to Support\")\n\nCan’t find what you’re looking for or need support? Reach out to us on Discord; we’re always happy to help!\n\n* * *\n\n## Aleph Zero EVM [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#aleph-zero-evm \"Direct link to Aleph Zero EVM\")\n\n**File:** `supported-networks/aleph-zero-evm.md`\n\n## Indexing Aleph Zero EVM Data with Envio via RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-aleph-zero-evm-data-with-envio-via-rpc \"Direct link to Indexing Aleph Zero EVM Data with Envio via RPC\")\n\nwarning\n\nRPC as a source is not as fast as HyperSync. It is important in production to source RPC data from reliable sources. We recommend our partners at drpc.org. Below, we have provided a set of free endpoints sourced from chainlist.org. **We don't recommend using these in production** as they may be rate limited. We recommend tweaking the RPC config to accommodate potential rate limiting.\n\nWe suggest getting the latest from chainlist.org.\n\n### Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-6 \"Direct link to Overview\")\n\nEnvio supports Aleph Zero EVM through an RPC-based indexing approach. This method allows you to ingest blockchain data via an RPC endpoint by setting the RPC configuration.\n\n* * *\n\n## Altlayer OP Demo Testnet [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#altlayer-op-demo-testnet \"Direct link to Altlayer OP Demo Testnet\")\n\n**File:** `supported-networks/altlayer-op-demo-testnet.md`\n\n## Indexing Altlayer OP Demo Testnet Data with Envio via RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-altlayer-op-demo-testnet-data-with-envio-via-rpc \"Direct link to Indexing Altlayer OP Demo Testnet Data with Envio via RPC\")\n\nwarning\n\nRPC as a source is not as fast as HyperSync. It is important in production to source RPC data from reliable sources. We recommend our partners at drpc.org. Below, we have provided a set of free endpoints sourced from chainlist.org. **We don't recommend using these in production** as they may be rate limited. We recommend tweaking the RPC config to accommodate potential rate limiting.\n\nWe suggest getting the latest from chainlist.org.\n\n### Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-7 \"Direct link to Overview\")\n\nEnvio supports Altlayer OP Demo Testnet through an RPC-based indexing approach. This method allows you to ingest blockchain data via an RPC endpoint by setting the RPC configuration.\n\n* * *\n\n## Ancient8 [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#ancient8 \"Direct link to Ancient8\")\n\n**File:** `supported-networks/ancient8.md`\n\n## Indexing Ancient8 Data with Envio via RPC [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#indexing-ancient8-data-with-envio-via-rpc \"Direct link to Indexing Ancient8 Data with Envio via RPC\")\n\nwarning\n\nRPC as a source is not as fast as HyperSync. It is important in production to source RPC data from reliable sources. We recommend our partners at drpc.org. Below, we have provided a set of free endpoints sourced from chainlist.org. **We don't recommend using these in production** as they may be rate limited. We recommend tweaking the RPC config to accommodate potential rate limiting.\n\nWe suggest getting the latest from chainlist.org.\n\n### Overview [​](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete\\#overview-8 \"Direct link to Overview\")\n\nEnvio supports Ancient8 through an RPC-based indexing approach. This method allows you to ingest blockchain data via an RPC endpoint by setting the RPC configuration.\n\n* * *\n\n**Is this page useful?**\n\n[Edit this page](https://github.com/enviodev/docs/edit/main/docs/HyperIndex-LLM/hyperindex-complete.mdx)\n\n- [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview)\n- [HyperSync API Token Requirements](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hypersync-api-token-requirements)\n- [🔗 Quick Links](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#-quick-links)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started)\n- [Indexer Initialization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexer-initialization)\n  - [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites)\n- [Essential Files](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#essential-files)\n- [Contract Import](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-import)\n  - [Video Tutorials](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#video-tutorials)\n- [Contract Import Methods](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-import-methods)\n  - [1\\. Block Explorer Import](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-block-explorer-import)\n- [Generated Files & Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#generated-files--configuration)\n  - [1\\. `config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-configyaml)\n  - [2\\. GraphQL Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-graphql-schema)\n  - [3\\. Event Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-event-handlers)\n- [HyperIndex Performance Benchmarks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperindex-performance-benchmarks)\n- [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-1)\n- [Recent Independent Benchmarks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#recent-independent-benchmarks)\n  - [Key Performance Highlights](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-performance-highlights)\n- [Historical Benchmarking Results](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#historical-benchmarking-results)\n- [Verify For Yourself](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#verify-for-yourself)\n- [Migrate from TheGraph to HyperIndex](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#migrate-from-thegraph-to-hyperindex)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction)\n- [Why Migrate to HyperIndex?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-migrate-to-hyperindex)\n- [Subgraph to HyperIndex Migration Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#subgraph-to-hyperindex-migration-overview)\n  - [0.5 Use `npx envio init` to generate a boilerplate](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#05-use-npx-envio-init-to-generate-a-boilerplate)\n  - [1\\. `subgraph.yaml` → `config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-subgraphyaml--configyaml)\n- [2\\. Schema migration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-schema-migration)\n- [3\\. Event handler migration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-event-handler-migration)\n  - [3.1 Converting Assemblyscript to Typescript](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#31-converting-assemblyscript-to-typescript)\n  - [3.2 Converting the subgraph syntax to HyperIndex syntax](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#32-converting-the-subgraph-syntax-to-hyperindex-syntax)\n- [Extra tips](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#extra-tips)\n- [Share Your Learnings](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#share-your-learnings)\n- [Getting Help](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-help)\n- [Key Configuration Options](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-configuration-options)\n  - [Contract Addresses](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-addresses)\n  - [Events Selection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#events-selection)\n  - [Field Selection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#field-selection)\n  - [Rollback on Reorg](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rollback-on-reorg)\n  - [Environment Variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-variables)\n  - [Output Directory Path](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#output-directory-path)\n- [Configuration Schema Reference](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-schema-reference)\n- [Schema File](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schema-file)\n- [Scalar Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#scalar-types)\n- [Enum Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#enum-types)\n- [Field Indexing ( `@index`)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#field-indexing-index)\n- [Generating Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#generating-types)\n- [Event Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-handlers)\n- [Registration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#registration)\n  - [Basic Example](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#basic-example)\n  - [Preload Optimization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#preload-optimization)\n  - [Advanced Use Cases](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#advanced-use-cases)\n- [Context Object](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#context-object)\n  - [Retrieving Entities](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#retrieving-entities)\n  - [Retrieving Entities by Field](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#retrieving-entities-by-field)\n  - [Modifying Entities](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#modifying-entities)\n  - [Referencing Linked Entities](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#referencing-linked-entities)\n  - [Deleting Entities (Unsafe)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deleting-entities-unsafe)\n  - [Updating Specific Entity Fields](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#updating-specific-entity-fields)\n  - [`context.log`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contextlog)\n  - [`context.isPreload`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contextispreload)\n- [External Calls](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#external-calls)\n  - [`context.effect`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contexteffect)\n- [Performance Considerations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#performance-considerations)\n- [Block Handlers (new in v2.29)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#block-handlers-new-in-v229)\n- [Multichain Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#multichain-indexing)\n- [How It Works](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-it-works)\n- [Configuration Requirements](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-requirements)\n- [Real-World Example: Uniswap V4 Multichain Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#real-world-example-uniswap-v4-multichain-indexer)\n- [Config File Structure for Multichain Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#config-file-structure-for-multichain-indexing)\n  - [Key Configuration Concepts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-configuration-concepts)\n- [Multichain Event Ordering](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#multichain-event-ordering)\n  - [Unordered Multichain Mode](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#unordered-multichain-mode)\n  - [Ordered Mode](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ordered-mode)\n- [Best Practices for Multichain Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-for-multichain-indexing)\n  - [1\\. Entity ID Namespacing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-entity-id-namespacing)\n  - [2\\. Error Handling](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-error-handling)\n  - [3\\. Testing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-testing)\n  - [4\\. Performance Considerations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#4-performance-considerations)\n- [Troubleshooting Common Issues](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting-common-issues)\n- [Next Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#next-steps)\n- [Testing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#testing)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-1)\n- [Learn by doing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#learn-by-doing)\n- [Writing tests](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#writing-tests)\n  - [Test Library Design](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#test-library-design)\n  - [Typical Test Flow](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#typical-test-flow)\n- [Assertions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#assertions)\n- [Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting)\n  - [Environment and Setup](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-and-setup)\n  - [Common Issues and Solutions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#common-issues-and-solutions)\n- [Navigating Hasura](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#navigating-hasura)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-2)\n- [Accessing Hasura Console](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#accessing-hasura-console)\n- [Key Dashboard Areas](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-dashboard-areas)\n  - [API Tab](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#api-tab)\n  - [Data Tab](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#data-tab)\n- [Common Tasks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#common-tasks)\n  - [Checking Indexing Status](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#checking-indexing-status)\n  - [Troubleshooting Missing Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting-missing-data)\n  - [Resetting Indexed Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#resetting-indexed-data)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices)\n- [Aggregations: local vs hosted (avoid the foot‑gun)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#aggregations-local-vs-hosted-avoid-the-footgun)\n  - [Example: indexing-time aggregation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-indexing-time-aggregation)\n- [Disable Hasura for Self-Hosted Indexers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#disable-hasura-for-self-hosted-indexers)\n- [Environment Variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-variables-1)\n- [Naming Convention](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#naming-convention)\n- [Envio API Token (required for HyperSync)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-api-token-required-for-hypersync)\n- [Envio-specific environment variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-specific-environment-variables)\n- [Example Environment Variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-environment-variables)\n- [Setting Environment Variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#setting-environment-variables)\n  - [Local Development](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#local-development)\n  - [Hosted Service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service)\n- [Configuration File](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-file)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-1)\n- [Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting-1)\n- [Uniswap V4 Multi-chain Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#uniswap-v4-multi-chain-indexer)\n- [Key Features](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-features)\n- [Technical Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#technical-overview)\n  - [Performance Advantages](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#performance-advantages)\n- [Use Cases](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-cases)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-1)\n- [Contribution](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contribution)\n- [Sablier Protocol Indexers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#sablier-protocol-indexers)\n- [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-2)\n- [Professional Indexer Suite](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#professional-indexer-suite)\n  - [1\\. Lockup Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-lockup-indexer)\n  - [2\\. Flow Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-flow-indexer)\n  - [3\\. Merkle Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-merkle-indexer)\n- [Key Features](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-features-1)\n- [Best Practices Showcase](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-showcase)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-2)\n- [Envio Hosted Service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-hosted-service)\n- [Deployment Options](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deployment-options)\n- [Hosted Service Key Features](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-key-features)\n- [Hosted Service Deployment Model](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-deployment-model)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-3)\n- [Hosted Service Features](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-features)\n- [IP Whitelisting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ip-whitelisting)\n- [Built-in Alerts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#built-in-alerts)\n  - [Notification Channels](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#notification-channels)\n- [Zero-Downtime Deployments](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#zero-downtime-deployments)\n- [Deployment Location Choice](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deployment-location-choice)\n- [Direct Database Access](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#direct-database-access)\n- [Powerful Analytics Solution](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#powerful-analytics-solution)\n- [Deploying Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deploying-your-indexer)\n- [Prerequisites & Important Information](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites--important-information)\n  - [Requirements](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#requirements)\n  - [Deployment Limits](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deployment-limits)\n  - [Development Plan Fair Usage Policy](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#development-plan-fair-usage-policy)\n- [Step-by-Step Deployment Instructions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-by-step-deployment-instructions)\n  - [Initial Setup](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initial-setup)\n  - [Configure Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configure-your-indexer)\n  - [Deploy Your Code](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deploy-your-code)\n  - [Manage Your Deployment](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#manage-your-deployment)\n- [Monitoring](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#monitoring)\n- [Continuous Deployment Best Practices and Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#continuous-deployment-best-practices-and-configuration)\n  - [Continuous Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#continuous-configuration)\n- [Visual Reference Guide](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#visual-reference-guide)\n  - [Step 1: Select Organization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-select-organization)\n  - [Step 2: Install Github App](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-install-github-app)\n  - [Step 3: Add a New Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-add-a-new-indexer)\n  - [Step 4: Connect to Repository](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-connect-to-repository)\n  - [Step 5: Configure Deployment Settings](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-configure-deployment-settings)\n  - [Step 6: Create a Deployment Branch](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-6-create-a-deployment-branch)\n  - [Step 7: Deploy via Git](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-7-deploy-via-git)\n  - [Step 8: Monitoring](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-8-monitoring)\n  - [Step 9: Continuous Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-9-continuous-configuration)\n- [Related Documentation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#related-documentation)\n- [Monitoring Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#monitoring-your-indexer)\n- [Dashboard Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#dashboard-overview)\n- [Deployment Status Indicators](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deployment-status-indicators)\n- [Error Detection and Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#error-detection-and-troubleshooting)\n- [Logging](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#logging)\n- [Built-in Alerts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#built-in-alerts-1)\n- [Visual Reference](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#visual-reference)\n  - [Dashboard Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#dashboard-overview-1)\n  - [Network Progress Bars](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#network-progress-bars)\n  - [Example Failure Notifications](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-failure-notifications)\n- [Related Documentation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#related-documentation-1)\n- [Hosted Service Billing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-billing)\n- [Pricing Plans](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#pricing-plans)\n- [Self-Hosting Your Envio Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#self-hosting-your-envio-indexer)\n- [Why Self-Host?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-self-host)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-1)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-4)\n- [Configuration Explained](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-explained)\n  - [Environment Variables](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-variables-2)\n- [Getting Help](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-help-1)\n- [Indexing Optimism Bridge Deposits](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-optimism-bridge-deposits)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-3)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-2)\n- [Step 1: Initialize Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-initialize-your-indexer)\n- [Step 2: Import the Optimism Bridge Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-import-the-optimism-bridge-contract)\n- [Step 3: Add the Ethereum Mainnet Bridge Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-add-the-ethereum-mainnet-bridge-contract)\n- [Step 4: Start Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-start-your-indexer)\n- [Step 5: Understanding the Generated Code](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-understanding-the-generated-code)\n  - [1\\. `config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-configyaml-1)\n  - [2\\. `schema.graphql`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-schemagraphql)\n  - [3\\. `src/EventHandlers.ts`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-srceventhandlersts)\n- [Step 6: Exploring Your Indexed Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-6-exploring-your-indexed-data)\n  - [Accessing Hasura](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#accessing-hasura)\n  - [Monitoring Indexing Progress](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#monitoring-indexing-progress)\n  - [Querying Indexed Events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#querying-indexed-events)\n- [Conclusion](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#conclusion)\n  - [What You've Learned](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-youve-learned)\n  - [Next Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#next-steps-1)\n- [Indexing ERC20 Token Transfers on Base](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-erc20-token-transfers-on-base)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-4)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-3)\n- [Step 1: Initialize Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-initialize-your-indexer-1)\n- [Step 2: Import the USDC Token Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-import-the-usdc-token-contract)\n- [Step 3: Start Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-start-your-indexer)\n- [Step 4: Understanding the Generated Code](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-understanding-the-generated-code)\n  - [1\\. `config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-configyaml-2)\n  - [2\\. `schema.graphql`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-schemagraphql-1)\n  - [3\\. `src/EventHandlers.*`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-srceventhandlers)\n- [Step 5: Exploring Your Indexed Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-exploring-your-indexed-data)\n  - [Accessing Hasura](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#accessing-hasura-1)\n  - [Monitoring Indexing Progress](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#monitoring-indexing-progress-1)\n  - [Querying Indexed Events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#querying-indexed-events-1)\n- [Conclusion](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#conclusion-1)\n  - [What You've Learned](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-youve-learned-1)\n  - [Next Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#next-steps-2)\n- [Indexing Sway Farm on the Fuel Network](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-sway-farm-on-the-fuel-network)\n- [About Fuel](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#about-fuel)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-4)\n  - [Environment tooling](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-tooling)\n- [Initialize the project](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialize-the-project)\n- [Walk through initialized indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#walk-through-initialized-indexer)\n  - [`config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configyaml)\n  - [`schema.graphql`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schemagraphql)\n  - [`EventHandlers.ts`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#eventhandlersts)\n- [Starting the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#starting-the-indexer)\n- [View the indexed results](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#view-the-indexed-results)\n- [Deploy the indexer onto the hosted service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#deploy-the-indexer-onto-the-hosted-service)\n- [What next?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-next)\n- [Indexing a Greeter Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-a-greeter-contract)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-5)\n  - [What is the Greeter Contract?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-is-the-greeter-contract)\n  - [What You'll Build](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-youll-build)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-5)\n- [Step 1: Initialize Your Project](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-initialize-your-project)\n- [Step 2: Understanding the Generated Files](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-understanding-the-generated-files)\n  - [`config.yaml`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configyaml-1)\n  - [`schema.graphql`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schemagraphql-1)\n  - [`src/EventHandlers.js` (or `.ts`/ `.res`)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#srceventhandlersjs-or-tsres)\n- [Step 3: Start Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-start-your-indexer-1)\n- [Step 4: Interact with the Contracts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-interact-with-the-contracts)\n  - [For Polygon:](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#for-polygon)\n  - [For Linea:](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#for-linea)\n- [Step 5: Query the Indexed Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-query-the-indexed-data)\n  - [Example Query](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-query-1)\n- [Step 6: Deploy to Production (Optional)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-6-deploy-to-production-optional)\n- [What You've Learned](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-youve-learned-2)\n- [Next Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#next-steps-3)\n- [Getting Price Data in Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-price-data-in-your-indexer)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-6)\n- [What You'll Learn](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-youll-learn)\n- [Price Data Methods Compared](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#price-data-methods-compared)\n- [Method 1: Using Oracle Price Feeds](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#method-1-using-oracle-price-feeds)\n  - [How Oracles Work](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-oracles-work)\n  - [Finding the Right Oracle Feed](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#finding-the-right-oracle-feed)\n  - [Oracle Advantages and Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#oracle-advantages-and-limitations)\n- [Method 2: Using DEX Pool Swap Events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#method-2-using-dex-pool-swap-events)\n  - [Locating the Right DEX Pool](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#locating-the-right-dex-pool)\n  - [Getting Price Data From Swap Events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-price-data-from-swap-events)\n  - [DEX Advantages and Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#dex-advantages-and-limitations)\n- [Method 3: Using Off-chain APIs](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#method-3-using-off-chain-apis)\n  - [Making API Requests](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#making-api-requests)\n  - [Off-chain API Advantages and Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#off-chain-api-advantages-and-limitations)\n- [Building a Multi-Source Price Feed Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#building-a-multi-source-price-feed-indexer)\n  - [Step 1: Initialize Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-initialize-your-indexer-2)\n  - [Step 2: Configure Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-configure-your-indexer)\n  - [Step 3: Define Your Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-define-your-schema)\n  - [Step 4: Implement Event Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-implement-event-handlers)\n  - [Step 5: Run Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-run-your-indexer)\n  - [Step 6: Analyze the Results](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-6-analyze-the-results)\n- [Results Analysis](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#results-analysis)\n- [Conclusion: Choosing the Right Method](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#conclusion-choosing-the-right-method)\n  - [Use Oracle or DEX Pools when:](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-oracle-or-dex-pools-when)\n  - [Use Off-chain APIs when:](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-off-chain-apis-when)\n  - [For maximum accuracy while maintaining performance:](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#for-maximum-accuracy-while-maintaining-performance)\n- [Next Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#next-steps-4)\n- [Scaffold-Eth-2 Envio Extension](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#scaffold-eth-2-envio-extension)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-7)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-6)\n- [Step 1: Create a New Scaffold-ETH 2 Project with Envio Extension](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-create-a-new-scaffold-eth-2-project-with-envio-extension)\n- [Step 2: Start the Local Blockchain](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-start-the-local-blockchain)\n- [Step 3: Deploy Your Contracts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-deploy-your-contracts)\n- [Step 4: Start Scaffold-ETH Frontend](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-start-scaffold-eth-frontend)\n- [Step 5: Generate the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-5-generate-the-indexer)\n- [Step 6: Start the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-6-start-the-indexer)\n- [Regenerating the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#regenerating-the-indexer)\n  - [Via Frontend Dashboard](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#via-frontend-dashboard)\n  - [Via Command Line](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#via-command-line)\n- [Dynamic Contracts / Factories](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#dynamic-contracts--factories)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-8)\n  - [Contract Registration Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-registration-handler)\n- [Example: NFT Factory Pattern](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-nft-factory-pattern)\n  - [Scenario](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#scenario)\n  - [1\\. Configure Your Contracts in config.yaml](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-configure-your-contracts-in-configyaml)\n  - [2\\. Create the Contract Registration Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-create-the-contract-registration-handler)\n- [Async Contract Register](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#async-contract-register)\n- [When to Use Dynamic Contract Registration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#when-to-use-dynamic-contract-registration)\n- [Important Notes](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#important-notes)\n- [Debugging Tips](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#debugging-tips)\n- [Wildcard Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#wildcard-indexing)\n- [Index all ERC20 transfers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#index-all-erc20-transfers)\n- [Topic Filtering](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#topic-filtering)\n- [Multiple Filters](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#multiple-filters)\n- [Different Filters per Network](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#different-filters-per-network)\n- [Index all ERC20 transfers to your Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#index-all-erc20-transfers-to-your-contract)\n  - [Assert ERC20 Transfers in Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#assert-erc20-transfers-in-handler)\n- [Contract Register Example](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-register-example)\n- [Handler With Loader Example](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#handler-with-loader-example)\n- [Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#limitations)\n- [Preload Optimization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#preload-optimization-1)\n- [Configure](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configure)\n- [Why Preload?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-preload)\n- [How It Works?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-it-works-1)\n  - [The Database I/O Problem](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#the-database-io-problem)\n  - [The External Calls Problem](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#the-external-calls-problem)\n  - [Preload Phase Behavior](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#preload-phase-behavior)\n- [Double-Run Footgun](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#double-run-footgun)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-2)\n- [Migrating from Loaders](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#migrating-from-loaders)\n- [Effect Api](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#effect-api)\n  - [Viem Transport Batching](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#viem-transport-batching)\n  - [Persistence](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#persistence)\n  - [Reuse Effect Cache on Indexer Reruns](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#reuse-effect-cache-on-indexer-reruns)\n  - [Cache on Hosted Service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#cache-on-hosted-service)\n  - [Why Experimental?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-experimental)\n- [Accessing Contract State in Event Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#accessing-contract-state-in-event-handlers)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-9)\n- [The Challenge: Token Data from Pool Creation Events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#the-challenge-token-data-from-pool-creation-events)\n  - [Scenario](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#scenario-1)\n  - [Problem](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#problem)\n- [Prerequisites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#prerequisites-7)\n- [Implementation Steps](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#implementation-steps)\n  - [Step 1: Setup the Indexer Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-setup-the-indexer-configuration)\n  - [Step 2: Define the Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-define-the-schema)\n  - [Step 3: Implement the Event Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-3-implement-the-event-handler)\n  - [Step 4: Create the Token Metadata Effect](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-4-create-the-token-metadata-effect)\n- [Key Considerations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#key-considerations)\n  - [Understanding Current vs. Historical State](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-current-vs-historical-state)\n  - [Handling Rate Limiting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#handling-rate-limiting)\n- [Conclusion](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#conclusion-2)\n- [Indexing IPFS Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-ipfs-data-with-envio)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-10)\n- [Implementation Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#implementation-overview)\n- [Step 1: Setting Up the Basic NFT Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-1-setting-up-the-basic-nft-indexer)\n  - [Initialize the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialize-the-indexer)\n  - [Configure the Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configure-the-indexer)\n  - [Define the Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#define-the-schema)\n  - [Implement the Event Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#implement-the-event-handler)\n- [Step 2: Fetching IPFS Metadata](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#step-2-fetching-ipfs-metadata)\n  - [Update the Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#update-the-schema)\n  - [Create IPFS Effect](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#create-ipfs-effect)\n  - [Update the Event Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#update-the-event-handler)\n- [Best Practices for IPFS Integration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-for-ipfs-integration)\n  - [1\\. Use Multiple Gateways](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-use-multiple-gateways)\n  - [2\\. Handle Failures Gracefully](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-handle-failures-gracefully)\n  - [3\\. Implement Local Caching (For Local Development)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-implement-local-caching-for-local-development)\n  - [4\\. Learn about Preload Optimization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#4-learn-about-preload-optimization)\n- [Understanding IPFS](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-ipfs)\n  - [What is IPFS?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-is-ipfs)\n  - [Common Use Cases with Smart Contracts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#common-use-cases-with-smart-contracts)\n  - [IPFS Challenges](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ipfs-challenges)\n- [Using HyperSync as Your Indexing Data Source](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#using-hypersync-as-your-indexing-data-source)\n- [What is HyperSync?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-is-hypersync)\n- [How HyperSync Powers Your Indexers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-hypersync-powers-your-indexers)\n  - [The Performance Advantage](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#the-performance-advantage)\n  - [Default Enablement](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#default-enablement)\n- [Using HyperSync in Your Projects](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#using-hypersync-in-your-projects)\n  - [Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration)\n  - [Smart Block Detection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#smart-block-detection)\n- [Availability and Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#availability-and-support)\n  - [Improving resilience with RPC fallback](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#improving-resilience-with-rpc-fallback)\n  - [Supported Networks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#supported-networks)\n  - [Alternatives](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#alternatives)\n- [Performance Comparison](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#performance-comparison)\n- [Summary](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#summary)\n- [Using RPC as Your Indexing Data Source](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#using-rpc-as-your-indexing-data-source)\n- [When to Use RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#when-to-use-rpc)\n- [Configuring RPC in Your Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuring-rpc-in-your-indexer)\n  - [Basic Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#basic-configuration)\n  - [Advanced RPC Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#advanced-rpc-configuration)\n  - [Configuration Parameters Explained](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-parameters-explained)\n- [RPC Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rpc-best-practices)\n  - [Selecting an RPC Provider](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#selecting-an-rpc-provider)\n  - [Performance Optimization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#performance-optimization)\n- [Enhanced RPC with eRPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#enhanced-rpc-with-erpc)\n  - [What eRPC Provides](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-erpc-provides)\n  - [Setting Up eRPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#setting-up-erpc)\n- [Comparing HyperSync and RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#comparing-hypersync-and-rpc)\n- [Summary](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#summary-1)\n- [Config Schema Reference](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#config-schema-reference)\n- [Top-level Properties](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#top-level-properties)\n  - [description](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#description)\n  - [name](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#name)\n  - [ecosystem](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ecosystem)\n  - [schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schema)\n  - [output](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#output)\n  - [contracts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contracts)\n  - [networks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#networks)\n  - [unordered\\_multichain\\_mode](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#unorderedmultichainmode)\n  - [event\\_decoder](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#eventdecoder)\n  - [rollback\\_on\\_reorg](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rollbackonreorg)\n  - [save\\_full\\_history](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#savefullhistory)\n  - [field\\_selection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#fieldselection)\n  - [raw\\_events](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rawevents)\n  - [preload\\_handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#preloadhandlers)\n  - [address\\_format](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#addressformat)\n- [Definitions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#definitions)\n  - [EcosystemTag](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-ecosystemtag)\n  - [GlobalContract\\_for\\_ContractConfig](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-globalcontractforcontractconfig)\n  - [EventConfig](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-eventconfig)\n  - [FieldSelection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-fieldselection)\n  - [Network](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-network)\n  - [RpcConfig](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-rpcconfig)\n  - [NetworkRpc](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-networkrpc)\n  - [Rpc](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-rpc)\n  - [For](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-for)\n  - [HypersyncConfig](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-hypersyncconfig)\n  - [NetworkContract\\_for\\_ContractConfig](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-networkcontractforcontractconfig)\n  - [Addresses](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-addresses)\n  - [EventDecoder](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-eventdecoder)\n  - [AddressFormat](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#def-addressformat)\n- [Envio Command Line Interface](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-command-line-interface)\n- [Getting Started](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-5)\n- [Command Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#command-overview)\n  - [Initialization Commands](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialization-commands)\n  - [Development Commands](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#development-commands)\n  - [Environment Management](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-management)\n  - [Analysis Tools](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#analysis-tools)\n- [Global Command](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#global-command)\n  - [`envio`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio)\n- [Initialization Commands](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialization-commands-1)\n  - [`envio init`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init)\n  - [`envio init contract-import`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-contract-import)\n  - [`envio init contract-import explorer`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-contract-import-explorer)\n  - [`envio init contract-import local`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-contract-import-local)\n  - [`envio init template`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-template)\n  - [`envio init fuel`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-fuel)\n  - [`envio init fuel contract-import`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-fuel-contract-import)\n  - [`envio init fuel contract-import local`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-fuel-contract-import-local)\n  - [`envio init fuel template`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-init-fuel-template)\n- [Development Commands](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#development-commands-1)\n  - [`envio dev`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-dev)\n  - [`envio stop`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-stop)\n  - [`envio codegen`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-codegen)\n  - [`envio start`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-start)\n- [Environment Management Commands](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#environment-management-commands)\n  - [`envio local`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local)\n  - [`envio local docker`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-docker)\n  - [`envio local docker up`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-docker-up)\n  - [`envio local docker down`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-docker-down)\n  - [`envio local db-migrate`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-db-migrate)\n  - [`envio local db-migrate up`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-db-migrate-up)\n  - [`envio local db-migrate down`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-db-migrate-down)\n  - [`envio local db-migrate setup`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-local-db-migrate-setup)\n- [Analysis Tools](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#analysis-tools-1)\n  - [`envio benchmark-summary`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-benchmark-summary)\n- [Command Reference Table](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#command-reference-table)\n- [Complete One-Line Examples](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#complete-one-line-examples)\n  - [Contract Import from Block Explorer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-import-from-block-explorer)\n  - [Contract Import from Local ABI](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-import-from-local-abi)\n  - [Template Initialization](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#template-initialization)\n  - [Running Benchmarks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#running-benchmarks)\n- [Understanding and Handling Chain Reorganizations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-and-handling-chain-reorganizations)\n- [What Are Chain Reorganizations?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-are-chain-reorganizations)\n- [Automatic Reorg Handling in HyperIndex](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#automatic-reorg-handling-in-hyperindex)\n- [Configuration Options](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-options)\n  - [Enabling or Disabling Reorg Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#enabling-or-disabling-reorg-support)\n  - [Configuring Confirmation Thresholds](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuring-confirmation-thresholds)\n- [Default Confirmation Thresholds](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#default-confirmation-thresholds)\n- [Technical Details and Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#technical-details-and-limitations)\n  - [Guaranteed Detection](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#guaranteed-detection)\n  - [RPC Limitations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rpc-limitations)\n  - [Scope of Rollbacks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#scope-of-rollbacks)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-3)\n- [Example Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-configuration)\n- [Understanding Generated Indexing Files](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-generated-indexing-files)\n- [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-3)\n- [Purpose of Generated Files](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#purpose-of-generated-files)\n- [Real-World Example: Uniswap V4 Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#real-world-example-uniswap-v4-indexer)\n  - [From Schema to Generated Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#from-schema-to-generated-types)\n  - [From Config to Generated Event Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#from-config-to-generated-event-handlers)\n  - [From Multi-Network Config to Generated Network Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#from-multi-network-config-to-generated-network-handlers)\n- [When to Run Code Generation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#when-to-run-code-generation)\n- [Troubleshooting Generation Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting-generation-errors)\n  - [Configuration Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-errors)\n  - [Schema Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schema-errors)\n  - [Handler Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#handler-errors)\n- [Relationship with Setup Files](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#relationship-with-setup-files)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-4)\n- [Summary](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#summary-2)\n- [Metadata Query](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#metadata-query)\n- [Usage](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#usage)\n- [Metadata fields](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#metadata-fields)\n  - [Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-1)\n  - [Transactional](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#transactional)\n  - [Throttled](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#throttled)\n- [HyperIndex Terminology & Key Concepts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperindex-terminology--key-concepts)\n- [Table of Contents](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#table-of-contents)\n- [Blockchain Fundamentals](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#blockchain-fundamentals)\n  - [Address](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#address)\n  - [Block](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#block)\n  - [EVM](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#evm)\n  - [EVM Compatible](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#evm-compatible)\n  - [Node](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#node)\n  - [Transaction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#transaction)\n- [Smart Contract Concepts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#smart-contract-concepts)\n  - [Event](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event)\n  - [Event Handler](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-handler)\n  - [Smart Contract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#smart-contract)\n  - [Tokens](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#tokens)\n- [Indexing & Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing--data)\n  - [API](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#api)\n  - [Endpoint](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#endpoint)\n  - [GraphQL](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#graphql)\n  - [GraphQL API](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#graphql-api)\n  - [Indexer](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexer)\n  - [Query](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#query)\n  - [Schema File](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schema-file-1)\n- [Development Tools](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#development-tools)\n  - [Codegen](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#codegen)\n  - [Envio CLI](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-cli)\n  - [SDK](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#sdk)\n- [Programming Languages](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#programming-languages)\n  - [JavaScript](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#javascript)\n  - [ReScript](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rescript)\n  - [TypeScript](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#typescript)\n- [Envio Platform](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-platform)\n  - [Hosted Service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-1)\n  - [Ploffen](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ploffen)\n- [Mathematical Concepts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#mathematical-concepts)\n  - [Commutative Property](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#commutative-property)\n- [Optimizing Database Performance in HyperIndex](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimizing-database-performance-in-hyperindex)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-11)\n- [Understanding Database Indices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-database-indices)\n  - [Why Indices Matter](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-indices-matter)\n- [Creating Custom Indices in Your Schema](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#creating-custom-indices-in-your-schema)\n  - [Single-Column Indices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#single-column-indices)\n  - [Composite Indices for Multi-Field Queries](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#composite-indices-for-multi-field-queries)\n  - [Automatic Indices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#automatic-indices)\n- [Strategic Indexing: When to Use Each Type](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#strategic-indexing-when-to-use-each-type)\n  - [When to Use Single-Column Indices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#when-to-use-single-column-indices)\n  - [When to Use Composite Indices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#when-to-use-composite-indices)\n- [Performance Tradeoffs](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#performance-tradeoffs)\n  - [Write Performance Impact](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#write-performance-impact)\n  - [Storage Considerations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#storage-considerations)\n- [Practical Examples](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#practical-examples)\n  - [Optimizing Token Transfer Queries](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimizing-token-transfer-queries)\n  - [Optimizing Complex NFT Marketplace Queries](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimizing-complex-nft-marketplace-queries)\n- [Optimizing GraphQL Queries](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimizing-graphql-queries)\n  - [Fetch Only What You Need](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#fetch-only-what-you-need)\n  - [Use Pagination for Large Result Sets](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-pagination-for-large-result-sets)\n  - [Use Timestamps for Efficient Polling](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-timestamps-for-efficient-polling)\n- [Summary](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#summary-3)\n- [Understanding Chain Head Latency](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-chain-head-latency)\n- [HyperSync Block Retrieval](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hypersync-block-retrieval)\n- [Network-Specific Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#network-specific-performance)\n  - [Optimized Major Networks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimized-major-networks)\n  - [Smaller Chain Networks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#smaller-chain-networks)\n- [Special Configuration Options](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#special-configuration-options)\n  - [Multi-Chain Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#multi-chain-indexing)\n  - [Chain Reorganization Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#chain-reorganization-support)\n- [Hosted Service Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hosted-service-performance)\n- [Benchmarking Your Indexer Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#benchmarking-your-indexer-performance)\n- [Why Benchmark Your Indexer?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-benchmark-your-indexer)\n- [Running Benchmarks](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#running-benchmarks-1)\n  - [Capturing Benchmark Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#capturing-benchmark-data)\n  - [Viewing Benchmark Results](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#viewing-benchmark-results)\n- [Understanding Benchmark Output](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-benchmark-output)\n  - [Time Breakdown](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#time-breakdown)\n  - [General Performance Metrics](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#general-performance-metrics)\n  - [Block Fetching Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#block-fetching-performance)\n  - [Event Processing Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-processing-performance)\n  - [Per-Handler Performance](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#per-handler-performance)\n- [Interpreting Results and Taking Action](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#interpreting-results-and-taking-action)\n  - [Identifying Your Bottleneck](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#identifying-your-bottleneck)\n  - [Benchmarking Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#benchmarking-best-practices)\n- [Advanced Performance Tuning](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#advanced-performance-tuning)\n- [Loaders Optimization (Deprecated)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#loaders-optimization-deprecated)\n- [What Are Loaders?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#what-are-loaders)\n- [How It Works?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-it-works-2)\n- [Logging](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#logging-1)\n- [Table of Contents](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#table-of-contents-1)\n- [Users](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#users)\n  - [Available Logging Methods](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#available-logging-methods)\n  - [Examples by Language](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#examples-by-language)\n- [Metrics, Debugging, and Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#metrics-debugging-and-troubleshooting)\n  - [Output Formats](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#output-formats)\n- [Developer Logging](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#developer-logging)\n  - [Log Levels](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#log-levels)\n  - [Configuring Log Levels](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuring-log-levels)\n  - [Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#troubleshooting-2)\n- [Common Issues and Troubleshooting](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#common-issues-and-troubleshooting)\n- [Table of Contents](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#table-of-contents-2)\n- [Setup and Configuration Issues](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#setup-and-configuration-issues)\n  - [Cannot find module errors on `pnpm start`](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#cannot-find-module-errors-on-pnpm-start)\n  - [Smart contract updated after the initial codegen](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#smart-contract-updated-after-the-initial-codegen)\n  - [Using the correct version of Node.js](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#using-the-correct-version-of-nodejs)\n  - [Using the correct version of PNPM](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#using-the-correct-version-of-pnpm)\n- [Runtime Issues](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#runtime-issues)\n  - [Indexer not starting at the specified start block](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexer-not-starting-at-the-specified-start-block)\n  - [Tables for entities are not registered on Hasura](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#tables-for-entities-are-not-registered-on-hasura)\n  - [RPC-Related issues](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rpc-related-issues)\n- [Infrastructure Conflicts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#infrastructure-conflicts)\n  - [Postgres running locally](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#postgres-running-locally)\n- [Envio Error Codes](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-error-codes)\n- [How to Use This Guide](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-to-use-this-guide)\n- [Error Categories](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#error-categories)\n- [Initialization-Related Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialization-related-errors)\n  - [Configuration File Errors (EE100-EE111)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#configuration-file-errors-ee100-ee111)\n  - [Schema File Errors (EE200-EE217)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#schema-file-errors-ee200-ee217)\n  - [ABI File Errors (EE300-EE305)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#abi-file-errors-ee300-ee305)\n  - [Initialization Arguments Errors (EE400-EE402)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#initialization-arguments-errors-ee400-ee402)\n- [Event-Related Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-related-errors)\n  - [Event Handling Errors (EE500)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-handling-errors-ee500)\n  - [Event Syncing Errors (EE600)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-syncing-errors-ee600)\n- [Database-Related Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#database-related-errors)\n  - [Database Function Errors (EE700)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#database-function-errors-ee700)\n  - [Database Migration Errors (EE800-EE808)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#database-migration-errors-ee800-ee808)\n- [Contract-Related Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contract-related-errors)\n- [Network-Related Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#network-related-errors)\n- [General Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#general-errors)\n- [Reserved Words in Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#reserved-words-in-envio)\n- [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-4)\n- [Why This Matters](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#why-this-matters)\n- [Common Error Scenarios](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#common-error-scenarios)\n- [How to Fix Reserved Word Errors](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#how-to-fix-reserved-word-errors)\n  - [Example Problem](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-problem)\n  - [Example Solution](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-solution)\n- [Tips for Avoiding Reserved Word Conflicts](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#tips-for-avoiding-reserved-word-conflicts)\n- [Complete List of Reserved Words](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#complete-list-of-reserved-words)\n  - [JavaScript Reserved Words](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#javascript-reserved-words)\n  - [TypeScript Reserved Words](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#typescript-reserved-words)\n  - [ReScript Reserved Words](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#rescript-reserved-words)\n  - [Envio Internal Reserved Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#envio-internal-reserved-types)\n- [Best Practices](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#best-practices-5)\n- [Any EVM with RPC 🐌](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#any-evm-with-rpc-)\n- [Local network - Anvil](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#local-network---anvil)\n- [Local network - Hardhat](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#local-network---hardhat)\n- [Arbitrum](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#arbitrum)\n- [Indexing Arbitrum Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-arbitrum-data-with-envio)\n  - [Defining Network Configurations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#defining-network-configurations)\n  - [Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#support)\n- [Eth](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#eth)\n- [Indexing Eth Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-eth-data-with-envio)\n  - [Defining Network Configurations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#defining-network-configurations-1)\n  - [Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#support-1)\n- [Optimism](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#optimism)\n- [Indexing Optimism Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-optimism-data-with-envio)\n  - [Defining Network Configurations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#defining-network-configurations-2)\n  - [Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#support-2)\n- [Polygon](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#polygon)\n- [Indexing Polygon Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-polygon-data-with-envio)\n  - [Defining Network Configurations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#defining-network-configurations-3)\n  - [Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#support-3)\n- [Indexing on Fuel Network](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-on-fuel-network)\n- [Introduction](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#introduction-12)\n- [HyperIndex for Fuel](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperindex-for-fuel)\n  - [Getting Started with Fuel Indexing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#getting-started-with-fuel-indexing)\n  - [Example Fuel Indexers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#example-fuel-indexers)\n  - [Features Supported on Fuel](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#features-supported-on-fuel)\n- [Fuel-Specific Event Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#fuel-specific-event-types)\n  - [Understanding Fuel's Event Model](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#understanding-fuels-event-model)\n  - [LOG\\_DATA Receipts (Primary Event Type)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#log_data-receipts-primary-event-type)\n  - [Additional Fuel Event Types](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#additional-fuel-event-types)\n  - [Transfer Event Specifics](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#transfer-event-specifics)\n- [Event Object Structure in Handlers](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#event-object-structure-in-handlers)\n- [Migration Guide from v2.x.x-fuel](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#migration-guide-from-v2xx-fuel)\n  - [1\\. Update Package Version](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-update-package-version)\n  - [2\\. Update Configuration](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-update-configuration)\n  - [3\\. Update Event Handler Code](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-update-event-handler-code)\n- [HyperFuel](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperfuel)\n  - [Available Clients](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#available-clients)\n  - [HyperFuel Endpoints](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperfuel-endpoints)\n- [About Fuel Network](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#about-fuel-network)\n  - [Resources](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#resources)\n- [Need Help?](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#need-help)\n- [Licensing](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#licensing)\n- [TL;DR](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#tldr)\n- [Our position](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#our-position)\n- [HyperIndex End-User License Agreement (EULA)](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#hyperindex-end-user-license-agreement-eula)\n  - [1\\. Definitions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#1-definitions)\n  - [2\\. Installation and User Rights](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#2-installation-and-user-rights)\n  - [3\\. Use of the Generated Code](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#3-use-of-the-generated-code)\n  - [4\\. Additional Terms](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#4-additional-terms)\n- [Terms of Service](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#terms-of-service)\n- [Privacy Policy](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#privacy-policy)\n- [Interpretation and Definitions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#interpretation-and-definitions)\n  - [Interpretation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#interpretation)\n  - [Definitions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#definitions-1)\n- [Collecting and Using Your Personal Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#collecting-and-using-your-personal-data)\n  - [Types of Data Collected](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#types-of-data-collected)\n  - [Use of Your Personal Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#use-of-your-personal-data)\n- [Disclosure of Your Personal Data](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#disclosure-of-your-personal-data)\n  - [Business Transactions](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#business-transactions)\n  - [Law enforcement](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#law-enforcement)\n  - [Other legal requirements](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#other-legal-requirements)\n  - [Comply with a legal obligation](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#comply-with-a-legal-obligation)\n- [Children's Privacy](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#childrens-privacy)\n- [Links to Other Websites](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#links-to-other-websites)\n- [Changes to this Privacy Policy](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#changes-to-this-privacy-policy)\n- [Contact Us](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#contact-us)\n- [0G Newton Testnet](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#0g-newton-testnet)\n- [Indexing 0G Newton Testnet Data with Envio via RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-0g-newton-testnet-data-with-envio-via-rpc)\n  - [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-5)\n- [Abstract](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#abstract)\n- [Indexing Abstract Data with Envio](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-abstract-data-with-envio)\n  - [Defining Network Configurations](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#defining-network-configurations-4)\n  - [Support](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#support-4)\n- [Aleph Zero EVM](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#aleph-zero-evm)\n- [Indexing Aleph Zero EVM Data with Envio via RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-aleph-zero-evm-data-with-envio-via-rpc)\n  - [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-6)\n- [Altlayer OP Demo Testnet](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#altlayer-op-demo-testnet)\n- [Indexing Altlayer OP Demo Testnet Data with Envio via RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-altlayer-op-demo-testnet-data-with-envio-via-rpc)\n  - [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-7)\n- [Ancient8](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#ancient8)\n- [Indexing Ancient8 Data with Envio via RPC](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#indexing-ancient8-data-with-envio-via-rpc)\n  - [Overview](https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete#overview-8)\n\nCommunity\n\n- [Discord](https://discord.gg/Q9qt8gZ2fX)\n- [Twitter](https://twitter.com/envio_indexer)\n- [Lens](https://lenster.xyz/u/envio.lens)\n\nMore\n\n- [Blog](https://docs.envio.dev/blog)\n- [GitHub](https://github.com/enviodev)\n\nCopyright © 2025 Envio",
  "metadata": {
    "ogImage": "https://docs.envio.dev/img/preview-banner.png",
    "ogTitle": "HyperIndex Complete Documentation | Envio",
    "og:locale": "en",
    "viewport": "width=device-width, initial-scale=1.0",
    "docusaurus_version": "current",
    "ogLocale": "en",
    "twitter:card": "summary_large_image",
    "language": "en",
    "docusaurus_tag": "docs-HyperIndex-LLM-current",
    "docsearch:docusaurus_tag": "docs-HyperIndex-LLM-current",
    "og:title": "HyperIndex Complete Documentation | Envio",
    "og:url": "https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete",
    "description": "This document contains all HyperIndex documentation consolidated into a single file for LLM consumption.",
    "ogDescription": "This document contains all HyperIndex documentation consolidated into a single file for LLM consumption.",
    "twitter:site": "@envio_indexer",
    "ogUrl": "https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete",
    "og:image": "https://docs.envio.dev/img/preview-banner.png",
    "twitter:image": "https://docs.envio.dev/img/preview-banner.png",
    "docusaurus_locale": "en",
    "position": "1",
    "title": "HyperIndex Complete Documentation | Envio",
    "og:description": "This document contains all HyperIndex documentation consolidated into a single file for LLM consumption.",
    "docsearch:version": "current",
    "docsearch:language": "en",
    "og:type": "website",
    "generator": "Docusaurus v3.4.0",
    "favicon": "https://docs.envio.dev/img/favicon.ico",
    "scrapeId": "004a2e2f-9151-48e2-ab56-7fd14eda392f",
    "sourceURL": "https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete",
    "url": "https://docs.envio.dev/docs/HyperIndex-LLM/hyperindex-complete",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic",
    "cacheState": "miss",
    "indexId": "96adeaa5-3581-4137-b33b-014cd4336ebb",
    "creditsUsed": 1
  }
}